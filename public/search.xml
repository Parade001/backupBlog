<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>V-for 和 V-if 优先级</title>
      <link href="/2022/08/1244728.html"/>
      <url>/2022/08/1244728.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="在vue2中应尽量避免二者同时使用"><a href="#在vue2中应尽量避免二者同时使用" class="headerlink" title="在vue2中应尽量避免二者同时使用"></a>在vue2中应尽量避免二者同时使用</h3><p><a href="https://link.juejin.cn/?target=https://cn.vuejs.org/v2/guide/conditional.html">vue 2.x官方链接</a></p><blockquote><p>当 <code>v-if</code> 与 <code>v-for</code> 一起使用时，<code>v-for</code> 具有比 <code>v-if</code> 更高的优先级。</p></blockquote><p>那么,我们举个例子说明为啥不推荐</p><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div class="hello"&gt;     &lt;div  v-for="(item,index) in list" v-if="index === 9" :key="item" &gt;&lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  data(){    return {      list:[1,2,3,4,5,6,7,8,9,10]   //需要遍历的数据    }  }};&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它实际经过的运算是这样的</p><pre class="line-numbers language-none"><code class="language-none">this.list.map(function (item,index) {  if (index===9) {    return item  }})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因此哪怕我们只渲染出一小部分的元素，也得在每次重渲染的时候遍历整个列表，不论是否发生了变化。</p><p>不建议这样做的原因就是比较浪费性能</p><p>Vue2 推荐的改进方案也是比较简单,就是采用计算属性去生成你要遍历的数组</p><p>如下</p><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div class="hello"&gt;    &lt;!-- 2. 然后这里去循环已经被过滤的属性 --&gt;     &lt;div  v-for="(item) in ListArr" :key="item" &gt;&lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  data(){    return {      list:[1,2,3,4,5,6,7,8,9,10]    }  },  computed:{    //1. 在computed里先做好判断，这里过滤的成本远比v-if的成本低    ListArr(){        return this.list.filter((_,index) =&gt; index === 1)    }  }};&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从计算成本上来说，在计算属性中过滤会比在dom中判断是否显示更低。</p><h3 id="vue3中的改变"><a href="#vue3中的改变" class="headerlink" title="vue3中的改变"></a>vue3中的改变</h3><p><a href="https://link.juejin.cn/?target=https://v3.cn.vuejs.org/guide/conditional.html%23v-show">vue 3.x官方文档</a></p><blockquote><p>当 <code>v-if</code> 与 <code>v-for</code> 一起使用时，<code>v-if</code> 具有比 <code>v-for</code> 更高的优先级。</p></blockquote><p>那么是不是就可以鼓励大家这样使用呢?很显然不是,官方文档仍然不推荐同时使用,我们看下为什么</p><p>同样的,我们仍然使用上面例子做分析</p><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div class="hello"&gt;     &lt;div  v-for="(item,index) in list" v-if="index === 9" :key="item" &gt;&lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  data(){    return {      list:[1,2,3,4,5,6,7,8,9,10]   //需要遍历的数据    }  }};&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于 v-if 优先级高,导致页面什么也不会渲染,控制台还有报错</p><pre class="line-numbers language-none"><code class="language-none">[Vue warn]: Property "index" was accessed during render but is not defined on instance.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当然还有一些其它用法例如这种,可以显示数据,只是会一些Vue warn的警告</p><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div class="hello"&gt;     &lt;ul&gt;        &lt;li v-for="(item, index) in list" :key="index" v-if="item.show"&gt;          {{ item.name }}        &lt;/li&gt;      &lt;/ul&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  data(){    return {      list:[       { name: '张三', show: false },       { name: '李四', show: true },      ]   //需要遍历的数据    }  }};&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方法也不是最好的,官方推荐的写法是这样的, 把 v-for 移动到容器元素上,例如ul,ol 或者外面包裹一层 template</p><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div class="hello"&gt;     &lt;ul&gt;         &lt;template v-for="(item, index) in list" :key="index"&gt;          &lt;li v-if="item.show"&gt;            {{ item.name }}          &lt;/li&gt;        &lt;/template&gt;      &lt;/ul&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  data(){    return {      list:[       { name: '张三', show: false },       { name: '李四', show: true },      ]   //需要遍历的数据    }  }};&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但如果想要有条件地跳过循环的执行，那么可以将v-if置于外层元素或者template上。</p><p>例如这样</p><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div class="hello"&gt;     &lt;ul v-if="list.length"&gt;          &lt;li v-for="(item, index) in list" :key="index"&gt;            {{ item.name }}          &lt;/li&gt;      &lt;/ul&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  data(){    return {      list:[       { name: '张三', show: false },       { name: '李四', show: true },      ]   //需要遍历的数据    }  }};&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>v-if</code>与<code>v-for</code>都是<code>vue</code>模板系统中的指令</p><p>在<code>vue</code>模板编译的时候，会将指令系统转化成可执行的<code>render</code>函数</p><h3 id="示例"><a href="#示例" class="headerlink" title="#示例"></a><a href="https://vue3js.cn/interview/vue/if_for.html#%E7%A4%BA%E4%BE%8B">#</a>示例</h3><p>编写一个<code>p</code>标签，同时使用<code>v-if</code>与 <code>v-for</code></p><pre class="line-numbers language-none"><code class="language-none">&lt;div id="app"&gt;    &lt;p v-if="isShow" v-for="item in items"&gt;        {{ item.title }}    &lt;/p&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建<code>vue</code>实例，存放<code>isShow</code>与<code>items</code>数据</p><pre class="line-numbers language-none"><code class="language-none">const app = new Vue({  el: "#app",  data() {    return {      items: [        { title: "foo" },        { title: "baz" }]    }  },  computed: {    isShow() {      return this.items &amp;&amp; this.items.length &gt; 0    }  }})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>模板指令的代码都会生成在<code>render</code>函数中，通过<code>app.$options.render</code>就能得到渲染函数</p><pre class="line-numbers language-none"><code class="language-none">ƒ anonymous() {  with (this) { return     _c('div', { attrs: { "id": "app" } },     _l((items), function (item)     { return (isShow) ? _c('p', [_v("\n" + _s(item.title) + "\n")]) : _e() }), 0) }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>_l</code>是<code>vue</code>的列表渲染函数，函数内部都会进行一次<code>if</code>判断</p><p>初步得到结论：<code>v-for</code>优先级是比<code>v-if</code>高</p><p>再将<code>v-for</code>与<code>v-if</code>置于不同标签</p><pre class="line-numbers language-none"><code class="language-none">&lt;div id="app"&gt;    &lt;template v-if="isShow"&gt;        &lt;p v-for="item in items"&gt;{{item.title}}&lt;/p&gt;    &lt;/template&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再输出下<code>render</code>函数</p><pre class="line-numbers language-none"><code class="language-none">ƒ anonymous() {  with(this){return     _c('div',{attrs:{"id":"app"}},    [(isShow)?[_v("\n"),    _l((items),function(item){return _c('p',[_v(_s(item.title))])})]:_e()],2)}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这时候我们可以看到，<code>v-for</code>与<code>v-if</code>作用在不同标签时候，是先进行判断，再进行列表的渲染</p><p>我们再在查看下<code>vue</code>源码</p><p>源码位置：<code>\vue-dev\src\compiler\codegen\index.js</code></p><pre class="line-numbers language-none"><code class="language-none">export function genElement (el: ASTElement, state: CodegenState): string {  if (el.parent) {    el.pre = el.pre || el.parent.pre  }  if (el.staticRoot &amp;&amp; !el.staticProcessed) {    return genStatic(el, state)  } else if (el.once &amp;&amp; !el.onceProcessed) {    return genOnce(el, state)  } else if (el.for &amp;&amp; !el.forProcessed) {    return genFor(el, state)  } else if (el.if &amp;&amp; !el.ifProcessed) {    return genIf(el, state)  } else if (el.tag === 'template' &amp;&amp; !el.slotTarget &amp;&amp; !state.pre) {    return genChildren(el, state) || 'void 0'  } else if (el.tag === 'slot') {    return genSlot(el, state)  } else {    // component or element    ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在进行<code>if</code>判断的时候，<code>v-for</code>是比<code>v-if</code>先进行判断</p><p>最终结论：<code>v-for</code>优先级比<code>v-if</code>高</p><h2 id="三、注意事项"><a href="#三、注意事项" class="headerlink" title="#三、注意事项"></a><a href="https://vue3js.cn/interview/vue/if_for.html#%E4%B8%89%E3%80%81%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9">#</a>三、注意事项</h2><ol><li>永远不要把 <code>v-if</code> 和 <code>v-for</code> 同时用在同一个元素上，带来性能方面的浪费（每次渲染都会先循环再进行条件判断）</li><li>如果避免出现这种情况，则在外层嵌套<code>template</code>（页面渲染不生成<code>dom</code>节点），在这一层进行v-if判断，然后在内部进行v-for循环</li></ol><pre class="line-numbers language-none"><code class="language-none">&lt;template v-if="isShow"&gt;    &lt;p v-for="item in items"&gt;&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>如果条件出现在循环内部，可通过计算属性<code>computed</code>提前过滤掉那些不需要显示的项</li></ol><pre class="line-numbers language-none"><code class="language-none">computed: {    items: function() {      return this.list.filter(function (item) {        return item.isShow      })    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><ul><li>在vue2中，v-for的优先级高于v-if</li><li>在vue3中，v-if的优先级高于v-for</li><li>两种混在一起写法均不被官方推荐</li></ul><p>转载：<a href="https://juejin.cn/post/7128328827981266980#heading-2">Vue3的v-if 和v-for优先级详解</a></p><p>参考：<a href="https://vue3js.cn/interview/vue/if_for.html#%E4%B8%80%E3%80%81%E4%BD%9C%E7%94%A8">v-if和v-for的优先级是什么？</a></p>]]></content>
      
      
      <categories>
          
          <category> Vue.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 优先级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 之生成二维码</title>
      <link href="/2022/08/1229287.html"/>
      <url>/2022/08/1229287.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> qrcode<span class="token keyword">import</span> re<span class="token keyword">from</span> os <span class="token keyword">import</span> startfileinput_data <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入完整url:"</span><span class="token punctuation">)</span>pattern <span class="token operator">=</span> <span class="token string">r'^(?=^.{3,255}$)(http(s)?:\/\/)?(www\.|cn\.)?[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+(:\d+)*(\/\w+\.\w+)*([\?&amp;]\w+=\w*)*$'</span>result <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> input_data<span class="token punctuation">)</span><span class="token keyword">if</span> result<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'请正确输入域名,比如: www.baidu.com'</span><span class="token punctuation">)</span>    <span class="token comment"># print('非法,请添加', result.group(3))</span>    exit<span class="token punctuation">(</span><span class="token punctuation">)</span>qr <span class="token operator">=</span> qrcode<span class="token punctuation">.</span>QRCode<span class="token punctuation">(</span>version<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> box_size<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> border<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># add_date :  pass the input text</span>qr<span class="token punctuation">.</span>add_data<span class="token punctuation">(</span><span class="token string">'http://'</span> <span class="token operator">+</span> input_data<span class="token punctuation">)</span><span class="token comment"># converting into image</span>qr<span class="token punctuation">.</span>make<span class="token punctuation">(</span>fit<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># specify the foreground and background color for the img</span>img <span class="token operator">=</span> qr<span class="token punctuation">.</span>make_image<span class="token punctuation">(</span>fill<span class="token operator">=</span><span class="token string">'black'</span><span class="token punctuation">,</span> back_color<span class="token operator">=</span><span class="token string">'white'</span><span class="token punctuation">)</span><span class="token comment"># store the image</span>img<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'_img.png'</span><span class="token punctuation">)</span>startfile<span class="token punctuation">(</span><span class="token string">'_img.png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qrcode, </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>protoc转js</title>
      <link href="/2022/08/1236763.html"/>
      <url>/2022/08/1236763.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>首先需要下载protoc编译器<a href="https://github.com/protocolbuffers/protobuf/releases/tag/v3.9.0">protocV3.9.0</a></p><p>因为是从3.0.0 Beta 2 版开始支持JavaScript</p><p>配置环境变量</p><pre class="line-numbers language-none"><code class="language-none">C:\Program Files\protoc3.9\bin //你的路径protoc --versionlibprotoc 3.9.0  //安装成功<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>编译输出为js文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">protoc --js_out<span class="token operator">=</span>import_style<span class="token operator">=</span>commonjs,binary:./ local.proto<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> proto buffer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> protoc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试系列-css垂直居中的打开方式</title>
      <link href="/2022/07/2738067.html"/>
      <url>/2022/07/2738067.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="【爆肝面试系列】CSS-垂直居中的正确打开方式"><a href="#【爆肝面试系列】CSS-垂直居中的正确打开方式" class="headerlink" title="【爆肝面试系列】CSS 垂直居中的正确打开方式"></a>【爆肝面试系列】CSS 垂直居中的正确打开方式</h1><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a1c9e5382c214764961f05824186fa4d~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="图片"></p><h2 id="前言之爆锤面试官神器-CSS"><a href="#前言之爆锤面试官神器-CSS" class="headerlink" title="前言之爆锤面试官神器 - CSS"></a><strong>前言之爆锤面试官神器 - CSS</strong></h2><p>无论是实际开发中，亦或者是求职面试中，css 垂直居中往往都是一个绕不开的话题，其中不乏有许多面试者在多次双重尝受打击之后，而没有一个很好的反击点，刚好结合自己以前受的委屈和痛苦，来给大家一个锤爆面试官大佬们的机会。</p><p>其实垂直居中主要分为了两种类型：<strong>居中元素宽高已知</strong> 和 <strong>居中元素宽高未知</strong>，那么我们就结合这两种类型来一一做举例。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0d208686e8e04fce9e22920a6c4d7a0a~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="图片"></p><h2 id="居中元素宽高已知"><a href="#居中元素宽高已知" class="headerlink" title="居中元素宽高已知"></a><strong>居中元素宽高已知</strong></h2><h3 id="1-absolute-margin-auto"><a href="#1-absolute-margin-auto" class="headerlink" title="1. absolute + margin auto"></a><strong>1. absolute + margin auto</strong></h3><p>顾名思义，就是利用当前元素的 <code>position: absolute;</code> 和 <code>margin: auto;</code></p><p>注意使用此方法：父元素与当前元素的高度要设置；</p><p>通过将各个方向的距离都设置为 0，此时将 <code>margin</code> 设置为 <code>auto</code>，就可以实现垂直居中显示了；</p><h4 id="具体代码如下："><a href="#具体代码如下：" class="headerlink" title="具体代码如下："></a>具体代码如下：</h4><pre class="line-numbers language-none"><code class="language-none">.parent{  position: relative;  width: 90vw;  height: 90vh;  border: 3px solid steelblue;}.child{  background: tomato;  width: 50vw; height: 50vh;  /* 核心代码 */  position:absolute;  top: 0; bottom: 0; left: 0; right: 0;  margin: auto;}复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="具体效果如下："><a href="#具体效果如下：" class="headerlink" title="具体效果如下："></a>具体效果如下：</h4><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1fb6f7e6ef794a9a8fd39d3ab89e78d6~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="图片"></p><h3 id="2-absolute-负-margin"><a href="#2-absolute-负-margin" class="headerlink" title="2. absolute + 负 margin"></a><strong>2. absolute + 负 margin</strong></h3><p>利用绝对定位百分比 50% 来实现，因为当前元素的百分比是基于相对定位（也就是父元素）来定位的;</p><p>然后再用负的 margin-top 和 margin-left 来进行简单的位移即可，因为现在的负 margin 是基于自身的高度和宽度来进行位移的。</p><h4 id="具体代码如下：-1"><a href="#具体代码如下：-1" class="headerlink" title="具体代码如下："></a>具体代码如下：</h4><pre class="line-numbers language-none"><code class="language-none">.parent{  position:relative;  width: 90vw;  height: 90vh;  border: 3px solid steelblue;}.child{  background: tomato;  width: 100px; height: 100px;  /* 核心代码 */  position:absolute;  top: 50%; left: 50%;  margin-top: -50px;  margin-left: -50px;}复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="具体效果如下：-1"><a href="#具体效果如下：-1" class="headerlink" title="具体效果如下："></a>具体效果如下：</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/136dc66faaf948519a2eef8229c32c96~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="图片"></p><h3 id="3-absolute-calc"><a href="#3-absolute-calc" class="headerlink" title="3. absolute + calc"></a><strong>3. absolute + calc</strong></h3><p>使用 CSS3 的一个计算函数来进行计算即可；方法与上面类似</p><h4 id="具体代码如下：-2"><a href="#具体代码如下：-2" class="headerlink" title="具体代码如下："></a>具体代码如下：</h4><pre class="line-numbers language-none"><code class="language-none">.parent{  width: 90vw;  height: 90vh;  border: 3px solid steelblue;  /* 核心代码 */  position:relative;}.child{  background: tomato;  width: 200px; height: 200px;  /* 核心代码 */  position:absolute;  top: calc(50% - 100px);  left: calc(50% - 100px);}复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="具体效果如下：-2"><a href="#具体效果如下：-2" class="headerlink" title="具体效果如下："></a>具体效果如下：</h4><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b4448eda1bf3453fa2d1bdc42ecfdcd4~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="图片"></p><h2 id="居中元素宽高未知"><a href="#居中元素宽高未知" class="headerlink" title="居中元素宽高未知"></a><strong>居中元素宽高未知</strong></h2><h3 id="4-absolute-transform"><a href="#4-absolute-transform" class="headerlink" title="4. absolute + transform"></a><strong>4. absolute + transform</strong></h3><p>利用 CSS3 的新特性 <code>transform</code>；因为 <code>transform</code> 的 <code>translate</code> 属性值如果是一个百分比，那么这个百分比将是基于自身的宽高计算出来的。</p><h4 id="具体代码如下：-3"><a href="#具体代码如下：-3" class="headerlink" title="具体代码如下："></a>具体代码如下：</h4><pre class="line-numbers language-none"><code class="language-none">.parent{  width: 90vw;  height: 90vh;  border: 3px solid steelblue;  /* 核心代码 */  position:relative;}.child{  background: tomato;  /* 核心代码 */  position:absolute;  top: 50%;  left: 50%;  transform: translate(-50%, -50%);}复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="具体效果如下：-3"><a href="#具体效果如下：-3" class="headerlink" title="具体效果如下："></a>具体效果如下：</h4><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6e071ede21814f1c8e26dfc989e44173~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="图片"></p><h3 id="5-line-height-vertical-align"><a href="#5-line-height-vertical-align" class="headerlink" title="5. line-height + vertical-align"></a><strong>5. line-height + vertical-align</strong></h3><p>把当前元素设置为行内元素，然后通过设置父元素的 <code>text-align: center;</code> 实现水平居中；</p><p>同时通过设置当前元素的 <code>vertical-align: middle;</code> 来实现垂直居中；</p><p>最后设置当前元素的 <code>line-height: initial;</code> 来继承父元素的<code>line-height</code>。</p><h4 id="具体代码如下：-4"><a href="#具体代码如下：-4" class="headerlink" title="具体代码如下："></a>具体代码如下：</h4><pre class="line-numbers language-none"><code class="language-none">.parent{  width: 90vw;  border: 3px solid steelblue;  /* 核心代码 */  line-height: 500px;  text-align: center;}.child{  background: tomato;  /* 核心代码 */  display: inline-block;  vertical-align: middle;  line-height: initial;}复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="具体效果如下：-4"><a href="#具体效果如下：-4" class="headerlink" title="具体效果如下："></a>具体效果如下：</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/45c041123890421cb7e1d298f5307242~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="图片"></p><h3 id="6-table-表格元素"><a href="#6-table-表格元素" class="headerlink" title="6. table 表格元素"></a><strong>6. table 表格元素</strong></h3><p>通过最经典的 table 元素来进行水平垂直居中，不过代码看起来会很冗余，不推荐使用；</p><h4 id="具体代码如下：-5"><a href="#具体代码如下：-5" class="headerlink" title="具体代码如下："></a>具体代码如下：</h4><pre class="line-numbers language-none"><code class="language-none">&lt;table&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;td class="parent"&gt;        &lt;div class="child"&gt;&lt;/div&gt;      &lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;style&gt;  .parent {    width: 90vw;    height: 90vh;    border: 3px solid steelblue;    /* 核心代码 */    text-align: center;  }  .child {    background: tomato;    /* 核心代码 */    display: inline-block;  }&lt;/style&gt;复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="具体效果如下：-5"><a href="#具体效果如下：-5" class="headerlink" title="具体效果如下："></a>具体效果如下：</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8a1d347f750146f3b58a3579822a1086~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="图片"></p><h3 id="7-css-table-表格样式"><a href="#7-css-table-表格样式" class="headerlink" title="7. css-table 表格样式"></a><strong>7. css-table 表格样式</strong></h3><p>如果一定要使用 <code>table</code> 的特性，但是不想写 <code>table</code> 元素的话，那么<code>css-table</code> 就很适合你；</p><h4 id="具体代码如下：-6"><a href="#具体代码如下：-6" class="headerlink" title="具体代码如下："></a>具体代码如下：</h4><pre class="line-numbers language-none"><code class="language-none">.parent{  width: 90vw;  height: 90vh;  border: 3px solid steelblue;  /* 核心代码 */  display: table-cell;  text-align: center;  vertical-align: middle;}.child{  background: tomato;  /* 核心代码 */  display: inline-block;}复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="具体效果如下：-6"><a href="#具体效果如下：-6" class="headerlink" title="具体效果如下："></a>具体效果如下：</h4><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/df36ab0e4689467c8b0d7d1fbfce9bdb~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="图片"></p><h3 id="8-flex-布局（一）"><a href="#8-flex-布局（一）" class="headerlink" title="8. flex 布局（一）"></a><strong>8. flex 布局（一）</strong></h3><p>要说现在较为流行和使用较多的布局方案，那么非 flex 莫属了，那么举例两个最常见的使用方式 ~</p><p>直接在 <code>flex-container</code> 上通过几行代码即可很优雅的实现</p><h4 id="具体代码如下：-7"><a href="#具体代码如下：-7" class="headerlink" title="具体代码如下："></a>具体代码如下：</h4><pre class="line-numbers language-none"><code class="language-none">.parent {  width: 90vw;  height: 90vh;  border: 3px solid steelblue;  /* 核心代码 */  display: flex;  justify-content: center; align-items: center;}.child{  background: tomato;}复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>justify-content</code> 表示：设置或检索弹性盒子元素在主轴（横轴）方向上的对齐方式；</p><p><code>align-items</code> 表示：定义 flex 子项在 flex 容器的当前行的侧轴（纵轴）方向上的对齐方式。</p><h4 id="具体效果如下：-7"><a href="#具体效果如下：-7" class="headerlink" title="具体效果如下："></a>具体效果如下：</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cd42197963bf4b2ca5f155333a145688~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="图片"></p><h3 id="9-flex-margin-auto（二）"><a href="#9-flex-margin-auto（二）" class="headerlink" title="9. flex + margin auto（二）"></a><strong>9. flex + margin auto（二）</strong></h3><p>在 <code>flex-item</code> 上更加优雅的实现</p><h4 id="具体代码如下：-8"><a href="#具体代码如下：-8" class="headerlink" title="具体代码如下："></a>具体代码如下：</h4><pre class="line-numbers language-none"><code class="language-none">.parent{  width: 90vw;  height: 90vh;  border: 3px solid steelblue;  /* 核心代码 */  display: flex;}.child{  background: tomato;  /* 核心代码 */  margin: auto;}复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="具体效果如下：-8"><a href="#具体效果如下：-8" class="headerlink" title="具体效果如下："></a>具体效果如下：</h4><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc6f274a395e4849bd5d8e375790fe3d~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="图片"></p><blockquote><p><strong>flex 的两种方法使用取舍，任凭您意</strong></p></blockquote><h4 id="附赠-flex-兼容性图片一张"><a href="#附赠-flex-兼容性图片一张" class="headerlink" title="附赠 flex 兼容性图片一张"></a>附赠 flex 兼容性图片一张</h4><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/91f2dea4f7eb495ea8160c30da4ea36f~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="图片"></p><h3 id="10-grid-网格布局-一"><a href="#10-grid-网格布局-一" class="headerlink" title="10. grid 网格布局 (一)"></a><strong>10. grid 网格布局 (一)</strong></h3><p>grid 布局相信大家在实际项目中用的较少，主要是该布局实在是太超前，导致了兼容性不是那么理想，但是不可否认的是 grid 的能力在 css 布局中绝对是一个质的飞越。</p><p>不熟悉的可以看下阮一峰老师的详细<strong>入门教程</strong>[1]</p><p><code>CSS Grid</code> 包含与 <code>Flexbox</code> 几乎相同的对齐选项，因此我们可以在 <code>grid-container</code> 上优雅的实现</p><h4 id="具体代码如下：-9"><a href="#具体代码如下：-9" class="headerlink" title="具体代码如下："></a>具体代码如下：</h4><pre class="line-numbers language-none"><code class="language-none">.parent{  width: 90vw;  height: 90vh;  border: 3px solid steelblue;  /* 核心代码 */  display: grid;  align-items: center;  justify-content: center;}.child{  background: tomato;}复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="具体效果如下：-9"><a href="#具体效果如下：-9" class="headerlink" title="具体效果如下："></a>具体效果如下：</h4><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/33ab7c28383c4f4b8d3236c81f5c6ff2~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="图片"></p><h3 id="11-grid-网格布局-二"><a href="#11-grid-网格布局-二" class="headerlink" title="11. grid 网格布局 (二)"></a><strong>11. grid 网格布局 (二)</strong></h3><p>同样我们可以像 <code>Flexbox</code> 一样，在 <code>grid-item</code> 上优雅的实现</p><h4 id="具体代码如下：-10"><a href="#具体代码如下：-10" class="headerlink" title="具体代码如下："></a>具体代码如下：</h4><pre class="line-numbers language-none"><code class="language-none">.parent{  width: 90vw;  height: 90vh;  border: 3px solid steelblue;  /* 核心代码 */  display: grid}.child{  background: tomato;  /* 核心代码 */  align-self: center;  justify-self: center;}复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="具体效果如下：-10"><a href="#具体效果如下：-10" class="headerlink" title="具体效果如下："></a>具体效果如下：</h4><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5cef36061f6c41468009a1c64dec4f47~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="图片"></p><blockquote><p><strong>flex 的两种方法使用取舍，任凭您高兴</strong></p></blockquote><h4 id="附赠-grid-兼容性图片一张"><a href="#附赠-grid-兼容性图片一张" class="headerlink" title="附赠 grid 兼容性图片一张"></a>附赠 grid 兼容性图片一张</h4><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1cb0422169a44010a270541da006932e~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="图片"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p>在学习了上面的 11 种垂直居中布局方法后，我们简单概括一下</p><ul><li>如果你的项目<strong>在 PC 端有兼容性要求</strong>并且<strong>宽高固定</strong>，推荐使用 <code>absolute + 负 margin</code> 方法实现；</li><li>如果你的项目<strong>在 PC 端有兼容性要求</strong>并且<strong>宽高不固定</strong>，推荐使用 <code>css-table</code> 方式实现；</li><li>如果你的项目<strong>在 PC 端无兼容性要求</strong> ，推荐使用 <code>flex</code> 实现居中，当然不考虑 IE 的话，<code>grid</code> 也是个不错的选择；</li><li>如果你的项目<strong>在移动端使用</strong> ，那么推荐你使用 <code>flex</code> ，<code>grid</code> 也可作为备选。</li></ul><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a><strong>写在最后</strong></h2><p>其实以上的是一种垂直居中方法，只是比较常见的，其实还有一些比较冷门的方式方法，例如 <strong>伪类元素</strong>、<strong>grid-container 的 grid-template-rows</strong> 等，大家下去可以自行尝试一下 ~</p><p>周末已结束，周一还会远吗，祝大家新的一周新的开始 ~</p><p>帅气美丽的你给个赞呗再走呗 ~</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>[1]</p><p><a href="https://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html">https://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html</a>: <em><a href="https://link.juejin.cn/?target=https://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html">https://link.juejin.cn?target=https%3A%2F%2Fwww.ruanyifeng.com%2Fblog%2F2019%2F03%2Fgrid-layout-tutorial.html</a></em></p><p>关于本文</p><p>来自：易师傅</p><p><a href="https://juejin.cn/post/6991465721565806605">https://juejin.cn/post/6991465721565806605</a></p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 盒子居中 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 提示没有权限查看?</title>
      <link href="/2022/07/1762666.html"/>
      <url>/2022/07/1762666.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>在提交代码的时候发现一直没有权限（windows）</p><pre class="line-numbers language-none"><code class="language-none">//无论是git init git remote add origingit fetch <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/0066jXzmgy1h4s83g9rz7j30m809eq3q.jpg" alt="img"></p><pre class="line-numbers language-none"><code class="language-none">//或者git clone -b //都没有权限<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/0066jXzmgy1h4s88i06v3j30cz016jr8.jpg" alt="img"></p><pre class="line-numbers language-none"><code class="language-none">//检查你用户名git config user.name//若没有配置，则配置git config --global user.name "your name"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/0066jXzmgy1h4s8aubcqgj304w015a9u.jpg" alt="img"></p><pre class="line-numbers language-none"><code class="language-none">//win+r control //查看你的window凭证<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/0066jXzmgy1h4s8dju17nj30kg0a83z1.jpg" alt="img"></p><p><img src="/0066jXzmgy1h4s8dzuxgpj30cx061gll.jpg" alt="img"></p><p><img src="/0066jXzmgy1h4s8e83i3aj30h504f0sr.jpg" alt="img"></p><ul><li>检查是否同一个</li><li>修改完成后才能有权限取clone view 仓库</li></ul><pre class="line-numbers language-none"><code class="language-none">&lt;link rel="stylesheet"href="https://cdn.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.css"&gt; &lt;script src="https://cdn.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.js"&gt;&lt;/script&gt; &lt;script src="https://cdn.jsdelivr.net/npm/meting@1.2/dist/Meting.min.js"&gt;&lt;/script&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">{% meting "7868005687" "tencent" "playlist" "theme:#555" "mutex:true" "listmaxheight:1000px" "preload:auto" %}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git 权限 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>精读正则表达式ES2018</title>
      <link href="/2022/07/071650.html"/>
      <url>/2022/07/071650.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h1><p>本周精读的文章是 <a href="https://www.smashingmagazine.com/2019/02/regexp-features-regular-expressions/">regexp-features-regular-expressions</a>。</p><p>这篇文章介绍了 ES2018 正则支持的几个重要特性：</p><ul><li>Lookbehind assertions - 后行断言</li><li>Named capture groups - 命名捕获组</li><li>s (dotAll) Flag - . 匹配任意字符</li><li>Unicode property escapes - Unicode 属性转义</li></ul><h1 id="2-概述"><a href="#2-概述" class="headerlink" title="2. 概述"></a>2. 概述</h1><p>还在用下标匹配内容吗？匹配任意字符只有 <code>[\w\W]</code> 吗？现在正则有更简化的写法了，事实上正则正在变得更加易用，是时候更新对正则的认知了。</p><h2 id="2-1-Lookbehind-assertions"><a href="#2-1-Lookbehind-assertions" class="headerlink" title="2.1. Lookbehind assertions"></a>2.1. Lookbehind assertions</h2><p>完整的断言定义分为：正/负向断言 与 先/后行断言 的笛卡尔积组合，在 ES2018 之前仅支持先行断言，现在终于支持了后行断言。</p><p>解释一下这四种断言：</p><p><strong>正向先行断言</strong> <code>(?=...)</code> 表示<strong>之后</strong>的字符串<strong>能匹配</strong> pattern。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Item(?= 10)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"Item"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// → null</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"Item5"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// → null</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"Item 5"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// → null</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"Item 10"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// → ["Item", index: 0, input: "Item 10", groups: undefined]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>负向先行断言</strong> <code>(?!...)</code> 表示<strong>之后</strong>的字符串<strong>不能匹配</strong> pattern。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Red(?!head)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"Redhead"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// → null</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"Redberry"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// → ["Red", index: 0, input: "Redberry", groups: undefined]</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"Redjay"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// → ["Red", index: 0, input: "Redjay", groups: undefined]</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"Red"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// → ["Red", index: 0, input: "Red", groups: undefined]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 ES2018 后，又支持了两种新的断言方式：</p><p><strong>正向后行断言</strong> <code>(?&lt;=...)</code> 表示<strong>之前</strong>的字符串<strong>能匹配</strong> pattern。</p><blockquote><p>先行时字符串放前面，pattern 放后面；后行时字符串放后端，pattern 放前面。先行匹配以什么结尾，后行匹配以什么开头。</p></blockquote><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;=€)\d+(\.\d*)?</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"199"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// → null</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"$199"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// → null</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"€199"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// → ["199", undefined, index: 1, input: "€199", groups: undefined]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>负向后行断言</strong> <code>(?&lt;!...)</code> 表示<strong>之前</strong>的字符串<strong>不能匹配</strong> pattern。</p><blockquote><p>注：下面的例子表示 meters <strong>之前</strong> <strong>不能匹配</strong> 三个数字。</p></blockquote><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;!\d{3}) meters</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"10 meters"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// → [" meters", index: 2, input: "10 meters", groups: undefined]</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"100 meters"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// → null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文中给了一个稍复杂的例子，结合了 正向后行断言 与 负向后行断言：</p><blockquote><p>注：下面的例子表示 meters <strong>之前</strong> <strong>能匹配</strong> 两个数字，<strong>且</strong> <strong>之前</strong> <strong>不能匹配</strong> 数字 35.</p></blockquote><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;=\d{2})(?&lt;!35) meters</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"35 meters"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// → null</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"meters"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// → null</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"4 meters"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// → null</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"14 meters"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// → ["meters", index: 2, input: "14 meters", groups: undefined]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-Named-Capture-Groups"><a href="#2-2-Named-Capture-Groups" class="headerlink" title="2.2. Named Capture Groups"></a>2.2. Named Capture Groups</h2><p>命名捕获组可以给正则捕获的内容命名，比起下标来说更可读。</p><p>其语法是 <code>?&lt;name&gt;</code>：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;year&gt;\d{4})-(?&lt;month&gt;\d{2})-(?&lt;day&gt;\d{2})</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">[</span>match<span class="token punctuation">,</span> year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day<span class="token punctuation">]</span> <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"2020-03-04"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// → 2020-03-04</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// → 2020</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>month<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// → 03</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// → 04</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以在正则表达式中，通过下标 <code>\1</code> 直接使用之前的捕获组，比如：</p><blockquote><p>解释一下，<code>\1</code> 代表 <code>(\w\w)</code> 匹配的内容而非 <code>(\w\w)</code> 本身，所以当 <code>(\w\w)</code> 匹配了 <code>'ab'</code> 后，<code>\1</code> 表示的就是对 <code>'ab'</code> 的匹配了。</p></blockquote><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\w\w)\1</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"abab"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// → true</span><span class="token comment">// if the last two letters are not the same</span><span class="token comment">// as the first two, the match will fail</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\w\w)\1</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"abcd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// → false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于命名捕获组，可以通过 <code>\k&lt;name&gt;</code> 的语法访问，而不需要通过 <code>\1</code> 这种下标：</p><blockquote><p>下标和命名可以同时使用。</p></blockquote><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\b(?&lt;dup&gt;\w+)\s+\k&lt;dup&gt;\b</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> match <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"I'm not lazy, I'm on on energy saving mode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>match<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// → 18</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>match<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// → on on</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3-s-dotAll-Flag"><a href="#2-3-s-dotAll-Flag" class="headerlink" title="2.3. s (dotAll) Flag"></a>2.3. s (dotAll) Flag</h2><p>虽然正则中 <code>.</code> 可以匹配任何字符，但却无法匹配换行符。因此聪明的开发者们用 <code>[\w\W]</code> 巧妙的解决了这个问题。</p><p>然而这终究是个设计缺陷，在 ES2018 支持了 <code>/s</code> 模式，这个模式下，<code>.</code> 等价于 <code>[\w\W]</code>：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.</span><span class="token regex-delimiter">/</span><span class="token regex-flags">s</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// → true</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.</span><span class="token regex-delimiter">/</span><span class="token regex-flags">s</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"\r"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// → true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-4-Unicode-Property-Escapes"><a href="#2-4-Unicode-Property-Escapes" class="headerlink" title="2.4. Unicode Property Escapes"></a>2.4. Unicode Property Escapes</h2><p>正则支持了更强大的 Unicode 匹配方式。在 <code>/u</code> 模式下，可以用 <code>\p{Number}</code> 匹配所有数字：</p><blockquote><p>u 修饰符可以识别所有大于 0xFFFF 的 Unicode 字符。</p></blockquote><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\p{Number}+$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">u</span></span><span class="token punctuation">;</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"²³¹¼½¾"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"㉛㉜㉝"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩⅪⅫ"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>\p{Alphabetic}</code> 可以匹配所有 Alphabetic 元素，包括汉字、字母等：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">"漢"</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\p{Alphabetic}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">u</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// → true</span><span class="token comment">// the \w shorthand cannot match 漢</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\w</span><span class="token regex-delimiter">/</span><span class="token regex-flags">u</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// → false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>终于有简便的方式匹配汉字了。</p></blockquote><h2 id="2-5-兼容表"><a href="#2-5-兼容表" class="headerlink" title="2.5. 兼容表"></a>2.5. 兼容表</h2><p>可以到 <a href="https://www.smashingmagazine.com/2019/02/regexp-features-regular-expressions/">原文</a> 查看兼容表，总体上只有 Chrome 与 Safari 支持，Firefox 与 Edge 都不支持。所以大型项目使用要再等几年。</p><h1 id="3-精读"><a href="#3-精读" class="headerlink" title="3. 精读"></a>3. 精读</h1><p>文中列举的四个新特性是 ES2018 加入到正则中的。但正如兼容表所示，这些特性基本还都不能用，所以不如我们再温习一下 ES6 对正则的改进，找一找与 ES2018 正则变化的结合点。</p><h2 id="3-1-RegExp-构造函数优化"><a href="#3-1-RegExp-构造函数优化" class="headerlink" title="3.1. RegExp 构造函数优化"></a>3.1. RegExp 构造函数优化</h2><p>当 RegExp 构造函数第一个参数是正则表达式时，允许指定第二个参数 - 修饰符（ES5 会报错）：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">book(?=s)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">giu</span></span><span class="token punctuation">,</span> <span class="token string">"iu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不痛不痒的优化，，毕竟大部分时间构造函数不会这么用。</p><h2 id="3-2-字符串的正则方法"><a href="#3-2-字符串的正则方法" class="headerlink" title="3.2. 字符串的正则方法"></a>3.2. 字符串的正则方法</h2><p>将字符串的 <code>match()</code>、<code>replace()</code>、<code>search</code>、<code>split</code> 方法内部调用时都指向到 RegExp 的实例方法上，比如</p><p><code>String.prototype.match</code> 指向 <code>RegExp.prototype[Symbol.match]</code>。</p><p>也就是正则表达式原本应该由正则实例触发，但现在却支持字符串直接调用（方便）。但执行时其实指向了正则实例对象，让逻辑更为统一。</p><p>举个例子：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token string">"abc"</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">abc</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span> <span class="token operator">/</span>  <span class="token comment">// 内部执行时，等价于</span>  abc <span class="token operator">/</span>  g<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>match<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-3-u-修饰符"><a href="#3-3-u-修饰符" class="headerlink" title="3.3. u 修饰符"></a>3.3. u 修饰符</h2><p>概述中，Unicode Property Escapes 就是对 u 修饰符的增强，而 <code>u</code> 修饰符是在 ES6 中添加的。</p><p><code>u</code> 修饰符的含义为 “Unicode 模式”，用来正确处理大于 <code>\uFFFF</code> 的 Unicode 字符。</p><p>同时 <code>u</code> 修饰符还会改变以下正则表达式的行为：</p><ul><li>点字符原本支持单字符，但在 <code>u</code> 模式下，可以匹配大于 <code>0xFFFF</code> 的 Unicode 字符。</li><li>将 <code>\u{61}</code> 含义由匹配 61 个 <code>u</code> 改编为匹配 Unicode 编码为 61 号的字母 <code>a</code>。</li><li>可以正确识别非单字符 Unicode 字符的量词匹配。</li><li><code>\S</code> 可以正确识别 Unicode 字符。</li><li><code>u</code> 模式下，<code>[a-z]</code> 还能识别 Unicode 编码不同，但是字型很近的字母，比如 <code>\u212A</code> 表示的另一个 <code>K</code>。</li></ul><p>基本上，在 <code>u</code> 修饰符模式下，所有 Unicode 字符都可以被正确解读，而在 ES2018，又新增了一些 <code>u</code> 模式的匹配集合来匹配一些常见的字符，比如 <code>\p{Number}</code> 来匹配 <code>¼</code>。</p><h2 id="3-4-y-修饰符"><a href="#3-4-y-修饰符" class="headerlink" title="3.4. y 修饰符"></a>3.4. y 修饰符</h2><p><code>y</code> 修饰符是 “粘连”（sticky）修饰符。</p><p><code>y</code> 类似 <code>g</code> 修饰符，都是全局匹配，也就是从上次成功匹配位置开始，继续匹配。<code>y</code> 的区别是，必须是上一次匹配成功后的下一个位置就立即匹配才算成功。</p><p>比如：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"aaa_aa_a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["aaa"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-5-flags"><a href="#3-5-flags" class="headerlink" title="3.5. flags"></a>3.5. flags</h2><p>通过 <code>flags</code> 属性拿到修饰符：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-z]*</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gu</span></span><span class="token punctuation">;</span>regex<span class="token punctuation">.</span>flags<span class="token punctuation">;</span> <span class="token comment">// 'gu'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h1><p>本周精读借着 <a href="https://www.smashingmagazine.com/2019/02/regexp-features-regular-expressions/">regexp-features-regular-expressions</a> 这篇文章，一起理解了 ES2018 添加的正则新特性，又顺藤摸瓜的整理了 ES6 对正则做的增强。</p><p>如果你擅长这种扩散式学习方式，不妨再进一步温习一下整个 ES6 引入的新特性，笔者强烈推荐阮一峰老师的 <a href="http://caibaojian.com/es6/README_about.html">ECMAScript 6 入门</a> 一书。</p><p>ES2018 引入的特性还太新，单在对 ES6 特性的使用应该和对 ES3 一样熟练。</p><p>如果你身边的小伙伴还对 ES6 特性感到惊讶，请把这篇文章分享给他，防止退化为 “只剩项目经验的 JS 入门者”。</p><blockquote><p>讨论地址是：<a href="https://github.com/dt-fe/weekly/issues/127">精读《正则 ES2018》 · Issue #127 · dt-fe/weekly</a></p></blockquote><p><strong>如果你想参与讨论，请<a href="https://github.com/dt-fe/weekly">点击这里</a>，每周都有新的主题，周末或周一发布。前端精读 - 帮你筛选靠谱的内容。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 正则表达式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES2018 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端开发学习路线</title>
      <link href="/2022/06/214834.html"/>
      <url>/2022/06/214834.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前端侧重于人机交互和用户体验，后端侧重于业务逻辑和大规模数据处理。理论上，面向用户的产品里，所有问题（包括产品、设计、后端、甚至看不见的问题）的表现形式，都会暴露在前端，而只有部分问题（数据问题、计算问题、安全问题等）暴露在后端，这就意味着前端起到了至关重要的承载和连接作用。</p><p>前端技术的更新日新月异；前端框架的技术选型百家争鸣；视觉审美的潮流不断更替；可视化效果酷炫无比；用户的运营体系逐渐精细化；适老化、无障碍化、青少年人群的诉求浮出水面；智能设备的升级和适配无穷无尽。所有的这一切，对前端领域和前端同学就一个要求：要折腾，爱折腾，反复折腾。</p><h2 id="一、前端开发流程"><a href="#一、前端开发流程" class="headerlink" title="一、前端开发流程"></a>一、前端开发流程</h2><h3 id="需求评审"><a href="#需求评审" class="headerlink" title="需求评审"></a>需求评审</h3><blockquote><p>一般在做需求评审时，PRD里只有交互稿，尚未有视觉稿。需要在评审结束并达成一致后，再输出视觉稿。</p></blockquote><p>1、需求分析：需求点逐一讨论、需求合理性、交互评审、逻辑梳理，以及可能遗漏的部分。</p><p>提示：逻辑梳理的过程很花时间，贯穿开发始末。</p><p>2、涉及渠道/环境：</p><blockquote><p>渠道和环境，往往是需求盲点，也是影响技术选型和开发进度的关键因素。</p></blockquote><ul><li>App：App原生页面、<strong>App内嵌H5</strong>、App内嵌小程序。</li><li>小程序：技术栈视角：小程序原生页面、<strong>小程序内嵌H5</strong>、App内嵌小程序。</li><li>普通H5：微信H5、M站（即普通浏览器环境）</li><li>B端：运营管理平台等等</li></ul><p>3、可行性分析：是否有技术上的实现难点，是否有其他的依赖条件。</p><p>数据来源：哪些是调接口，哪些是做成<strong>可配置</strong>，哪些是前端写死；可配置的部分，是前端读取，还是接口读取然后返给前端。提示：可配置的灵活性与风险正相关。</p><p>异常流设计：容错、容灾、兜底、降级、回退机制、风险可控。prd一般只写了正常流的逻辑，异常流往往需要研发同学配合做全盘考虑。</p><p>6、需求变更：如有需求不明确、改需求、加需求、砍需求、加时间、改时间、加人力等等，需要提前预判风险。</p><h3 id="视觉评审"><a href="#视觉评审" class="headerlink" title="视觉评审"></a>视觉评审</h3><p>1、进度跟进：<strong>视觉稿是分批交付，还是一次性给到</strong>？这是要首先考虑的。</p><p>按照历史经验，前端项目进度的延误，有一半的概率依赖于视觉稿的进度；因为一个新页面的开发，前端有30%~50%的工作在做页面构建。 </p><p>2、视觉稿的文件格式：</p><ul><li>Sketch 原型设计软件：.sketch 格式。一般用来画<strong>视觉稿</strong>。</li><li>Figma 原型设计软件：.fig 格式。</li><li>Axure 原型设计软件：：.rp 格式。Axure 一般用来画<strong>交互稿</strong>。如果是输出高保真的视觉稿，推荐用 Sketch 或 Figma。</li><li>Photoshop 软件： .psd 格式。专门做<strong>图片处理</strong>。当然，有些CP外包人员的技能单一，喜欢用PS输出视觉稿。</li><li>Adobe Illustrator 软件（简称AI软件）：.ai格式。制作矢量图。</li><li>Adobe After Effects（AE） 软件：.aep 格式。制作动画。</li></ul><p>备注：Sketch 是Mac平台独有的原型设计软件，最为知名和常见。<a href="https://www.figma.com/community/file/1038450359694759149">Figma</a> 是最近比较火的全平台原型设计软件，有取代 Sketch 的趋势。</p><p>【划重点】交付视觉稿时，需要视觉同学输出“<strong>带尺寸标注</strong>”的视觉规范文件。</p><p>3、检查需求：是否覆盖需求和交互设计中的全部设计点。</p><p>4、检查视觉规范：</p><ul><li>样式和配色，是否符合页面和产品的整体风格。</li><li>尺寸规范：移动端的视觉稿宽度是750px。</li><li>排版、对齐、一致性。推荐阅读书籍《写个大家看的设计书》，了解基本的设计原则。</li><li>字体：字号大小（一般是12px以上，特别小的是10px以上）、字重（注意bold属性值为700），以及有哪些<strong>特殊字体</strong>。尤其要注意字体的版权问题。</li></ul><p>5、哪些图是前端构建，哪些图是写死图片资源，哪些是可配置；可配置的图中，需要把每个元素做拆解，这个元素是合并到背景图中，还是单独切图，还是读取数据。</p><p>6、切图格式：png（透明格式）、jpg</p><p>切图的图片大小，不要太大。移动端的大图（比如幕帘弹窗的背景图）建议不超过50kb，小图建议不超过20kb。图片在上传之前，可以先在 <a href="https://tinypng.com/">https://tinypng.com/</a>  上进行压缩。</p><p>7、复杂图形、动画的实现难度和实现方式，技术评估。详见接下来要讲的「技术选型」。</p><h3 id="排期评估"><a href="#排期评估" class="headerlink" title="排期评估"></a>排期评估</h3><p>1、排期一般包含这几个要素：</p><ul><li>开发时间：视觉构建时长、接口文档（接口协议）交付时间、前后端联调时间、自测时间</li><li>转体验时间</li><li>转测时间</li><li>上线时间（以及，需确认业务投放时间）</li></ul><p>2、评估排期时，<strong>要根据视觉稿排期</strong>，不要根据交互稿排期。这是首先要强调的。一个新页面的开发，前端有30%~50%的工作在做页面构建。 只看交互稿的话，无法评估真实的开发工作量。</p><p>3、前端开发工作包括：概要设计、视觉构建、逻辑代码、前后端联调、自测、转体验。每一项都要单独拆解后评估时间，加在一起就是整体的排期。</p><p>4、排期时，要考虑其它的依赖因素：比如视觉稿延期、需求不明确、接口进度、测试进度，当然最重要的是上线进度。紧急项目，经常是根据上线时间倒推开发排期。</p><p>5、即将进入开发阶段后，与测试部门协调测试资源，确认转测时间；大型项目&amp;重点项目，需要在需求评审阶段，提前知会测试部门，让其预留时间。</p><p>6、如果自己有在并行开发其他项目，则排期时需要给自己预留 buffer。并行开发两个项目是家常便饭；但，这个项目在测试时，往往很难抽身去做别的项目，因为会一直被测试童鞋牵制。</p><p>7、开发排期：如果开发排期有变更，需要立即周知其他相关人员，尤其是要评估测试排期的风险。测试排期比开发排期 更难变更。</p><h3 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h3><blockquote><p>技术选型千变万化，百家争鸣。这里需要列出你所在部门的常用技术选型，并非市面上的技术栈罗列。</p></blockquote><p>1、页面开发框架：</p><p>（1）多端页面：（小程序原生页面、H5）</p><ul><li><a href="https://taro-docs.jd.com/">Taro 框架</a>（基于 React技术栈）</li></ul><p>注2：有些业务，一开始只做H5，后来迭代时，要求做小程序原生页面。这一点也要纳入需求评估。</p><p>（2）H5页面：<a href="https://v3.cn.vuejs.org/guide/introduction.html">Vue.js</a> 框架、React 框架</p><p>（3）App端：</p><ul><li>Android端开发语言：Kotlin（新）、Java（老）</li><li>iOS端开发语言：Swift（新）、Objective-C（老）</li></ul><p>（4）B端开发，UI框架：</p><ul><li>React 技术栈：<a href="https://ant.design/index-cn">Ant Design</a>（简称Antd）</li><li>Vue 技术栈：<a href="https://element.eleme.cn/#/zh-CN">Element</a>、<a href="https://antdv.com/components/overview-cn">Ant Design Vue</a></li><li>较简单的CSS响应式框架：<a href="https://www.bootcss.com/">Bootstrap</a></li></ul><p>（5）Node.js后端开发框架：</p><ul><li>Koa：新一代 Node.js 框架。</li><li><a href="https://eggjs.github.io/zh/">Egg.js</a>：Egg 是在Koa基础上进一步封装的企业级Web开发框架。</li><li>Express：比较老的Node.js 框架。</li></ul><p>2、CSS预处理器：SASS</p><p>3、复杂图形、动画的实现难度和实现方式，技术评估：</p><ul><li>gif 动图：尽量不用。因为文件太大，且效果模糊。</li><li>CSS3 动画：适合简单的、有规律的动画。举例：<a href="https://www.cnblogs.com/qianguyihao/p/8435182.html">摆动的鱼</a>、<a href="https://mp.weixin.qq.com/s/u5GHsA0vHz8A_MmGslRw2g">京喜工厂</a></li><li><a href="https://www.liaoxuefeng.com/wiki/1022910821149312/1023022423592576">Canvas</a>：Canvas 动画、小程序分享图采用 Canvas 绘制</li><li>3D动画：<a href="https://www.zoo.team/article/webglabout">WebGL</a>（<a href="http://www.webgl3d.cn/Three.js/">Three.js</a> 是 WebGL 的综合库）常见案例：太阳系</li><li>游戏框架：Cocos 引擎</li></ul><h3 id="概要设计"><a href="#概要设计" class="headerlink" title="概要设计"></a>概要设计</h3><ul><li>需求背景及资源</li><li>风险评估</li><li>技术选型</li><li>项目结构设计</li><li>主要功能点逻辑设计</li><li>可扩展可复用设计</li><li>依赖接口</li><li>工作量拆解和排期</li></ul><h3 id="开发环节"><a href="#开发环节" class="headerlink" title="开发环节"></a>开发环节</h3><p>1、代码设计：</p><p>（1）目录结构设计、代码风格</p><p>（2）公共组件、工具类设计：确保<strong>可复用</strong>、高内聚低耦合的原则。哪些可以复用京喜平台的公共组件，哪些需要自己单独写 components、utils。</p><p>（3）弹窗设计：如果一个页面有多个弹窗，建议先设计一个抽象的弹窗基类。<strong>设计弹窗时，需要考虑的是</strong>：</p><ul><li>设计原则：易扩展、复用性强</li><li>避免重复代码</li><li>避免同一时间出现多个弹窗</li><li>弹窗的位置要严格居中（不能因为屏幕尺寸的大小变了，导致弹窗位置不居中）</li><li>处理滚动穿透这个顽疾。</li></ul><p>2、视觉构建：</p><p>（1）后端在开发接口时，前端做视觉构建；视觉构建完成后，前端根据接口文档的定义，通过 mock 数据的方式调接口，写前端逻辑；待接口开发完成后，可进入前后端联调阶段。</p><p>（2）建议前端童鞋学会自己切图，可控程度更高，也能减少沟通成本。学会基本的 PS、Sketch操作就行，做一名合格的前端切图仔。</p><p>（3）对于规则的样式和动画，建议用代码实现，而不是图片。图片会降低页面的打开性能，且大屏都显示效果比较模糊。</p><p>（4）切图的尺寸要求：100%宽度以 750px 为准。</p><p>（5）<strong>像素级还原视觉稿</strong>：推荐使用 <a href="https://zh.snipaste.com/">Snipaste</a> 截图软件，按F1截图，F2贴图，然后调整贴图的透明度为50%，将贴图与前端页面进行像素级比对。</p><p>3、业务逻辑实现：</p><p>（1）建议先用<strong>思维导图</strong>，梳理业务逻辑，再着手写代码。思维导图有利于理清逻辑、事后复盘、高效给他人讲解，一目了然。重要的是思想，而不是用哪一款工具更酷。</p><p>（2）在调用接口时，要明确前端自己的安全边界：假设接口字段异常时，前端需要有自己的降级措施，不能完全依赖和信任字段，导致让页面直接白屏、交互异常、甚至挂掉。</p><p>（3）除了完成产品要求的业务逻辑之外，还要时刻考虑异常流的设计和容灾。</p><p>（4）很多前端童鞋在做需求时，有个习惯是不喜欢细看prd，只对着交互稿和视觉稿进行开发。这样做虽然省事，但有三道手续不能少：</p><ul><li>开发前，一定要再和产品童鞋过一遍prd细节；</li><li>开发过程中，随时和产品童鞋反复沟通确认；</li><li>开发到80%时，自己对照prd，只字不差地阅读，看看是否有遗漏的地方。</li></ul><p>4、非功能性需求。业务代码写完后，还有很多细节需要打磨。比如：</p><ul><li>不同渠道的分享场景</li><li>ppms 配置检查：运营配置端要做校验；是给产品运营用的，配置要尽量人性化。</li><li>添加埋点：曝光上报、点击上报、呼吸上报</li><li>监控上报、测试上报、badjs上报</li><li>重复代码精简</li><li>去掉 console.log、debugger 等多余的代码</li><li>图片、字体等静态资源压缩</li><li>常见的性能优化：骨架屏（按需）、图片懒加载、图片预加载、防抖节流、长列表<em>滚动</em>到可视区域动态加载</li><li>用户体验完善：返回定位、滚动穿透</li><li>屏幕适配</li><li>小程序代码瘦身</li><li>容灾演习</li></ul><p>5、代码提交：</p><ul><li>先 git pull，再 git push，减少代码冲突。</li><li>commit粒度要尽量细</li><li>commit之前，一定要diff代码，确认每一行改动，以免提交不必要的改动。</li><li>Commit Message 常用格式：feat、fix、docs、merge</li><li>如合并代码时遇到冲突，一定要先解决完冲突后再提交代码。如冲突部分涉及到其他人的代码，一定要找到对应同学一起解决。</li></ul><p>6、自测：</p><ul><li>对照prd，查漏补缺。</li><li>在真机上体验页面，而不是在模拟器上。</li><li>写一部分测试用例，加快后续的测试进度。前面梳理的思维导图，其实就是测试的最佳素材。</li></ul><h3 id="产品体验"><a href="#产品体验" class="headerlink" title="产品体验"></a>产品体验</h3><p>1、在真机体验，而不是在模拟器上。最好是 iOS和 Android 都要对比体验。</p><p>2、体验时，记录整理各种 todolist：</p><ul><li>需求待确认 list：一些小的、风险可控的需求点，可以在体检阶段，集中向产品童鞋提出。</li><li>开发未完成 list：有哪些尚未完成的部分，需要和产品童鞋交代清楚。</li><li>已知 bug list</li><li>体验问题 list：边体验，边记录产品反馈的问题，并在稍后同步给测试童鞋。</li><li>依赖项 list：接口、视觉切图、真实的测试环境等等。</li></ul><h3 id="代码评审-代码review"><a href="#代码评审-代码review" class="headerlink" title="代码评审/代码review"></a>代码评审/代码review</h3><blockquote><p>代码 review 可以在测试期间进行。</p></blockquote><p>review顺序：</p><ul><li>业务核心逻辑</li><li>编码规范</li><li>关键位置、容易踩坑的地方，需要注释详细</li><li>系统保障（监控、容灾降级）</li><li>系统安全和风险</li><li>用户体验</li></ul><h3 id="视觉走查"><a href="#视觉走查" class="headerlink" title="视觉走查"></a>视觉走查</h3><blockquote><p>视觉走查 可以在测试期间进行。</p></blockquote><p>视觉童鞋都有像素眼，即便是一两个像素的区别，他们都能瞧出来。所以，建议前端童鞋加强自测，努力做到<strong>像素级还原视觉稿</strong>。</p><p>推荐前端童鞋使用 <a href="https://zh.snipaste.com/">Snipaste</a> 截图软件，按F1截图，F2贴图，然后调整贴图的透明度为50%，将贴图与前端页面进行像素级比对。</p><h3 id="测试环节"><a href="#测试环节" class="headerlink" title="测试环节"></a>测试环节</h3><p>1、建议加强自测质量。进入测试阶段后，测试童鞋会进行一轮冒烟测试，如果质量不合格，将会被打回，这就很尴尬了。</p><p>2、整理自测、测试、发布时需要的主流程checkList，每次迭代时都能用上。</p><p>转测邮件的基本元素，包括但不仅限于：</p><ul><li>prd链接、视觉稿链接</li><li>页面链接</li><li>项目相关人员</li><li>数据配置系统</li><li>host 代理</li><li>接口文档</li><li>概要设计、前端开发整理（如果有的话）</li><li>测试用例（如果有的话）</li><li>核心业务逻辑梳理（如果有的话）</li><li>体验问题列举</li><li>测试重点建议</li><li>风险点评估</li></ul><p>3、测试童鞋提的bug单，开发同学需要在 XX 小时内处理完成，否则会被QA催。</p><p>4、需要控制bug单数量，否则会被追责复盘。同类问题，建议测试童鞋合并到同一个bug单中。</p><p>5、测试管理系统 是所有人处理bug 流程的平台，不是让测试童鞋随便记录个人问题的。所以要提醒测试童鞋，明确该问题是bug，再提单；不是bug，要么不提，要么在沟通后驳回。</p><h3 id="发布方案"><a href="#发布方案" class="headerlink" title="发布方案"></a>发布方案</h3><ul><li>发布顺序：一般是先发后端，再发前端</li><li>依赖项是否准备就绪：配置的数据、配置项等</li><li>是否会对线上业务、线上数据造成影响</li><li>本地环境、dev环境、gamma环境，均要做好验证。</li><li>回退机制</li><li>发布 checkList</li></ul><h3 id="上线确认"><a href="#上线确认" class="headerlink" title="上线确认"></a>上线确认</h3><ul><li>发布完成后，需要输出上线确认邮件</li><li>观察页面体验、页面性能表现</li><li>观察监控数据、业务调用量</li><li>总结复盘</li></ul><h2 id="二、前端工程化"><a href="#二、前端工程化" class="headerlink" title="二、前端工程化"></a>二、前端工程化</h2><h3 id="Git-版本管理"><a href="#Git-版本管理" class="headerlink" title="Git 版本管理"></a>Git 版本管理</h3><p>1、前端代码仓库 git 分支规范：</p><p><img src="https://img.smyhvae.com/image-20220510164257833.png"></p><p><img src="https://img.smyhvae.com/image-20220510164323243.png"></p><p>2、Commit Message 的格式，只允许使用以下10种标识，最常见的是 feat和 fix ：</p><ul><li><strong>feat:</strong> 新功能</li><li><strong>fix:</strong> 修补 Bug</li><li><strong>docs:</strong> 文档</li><li><strong>style:</strong> 格式变更，不影响代码的运行</li><li><strong>refactor:</strong> 重构（既不是新增功能，也不是修改 bug 的代码变动）</li><li><strong>test:</strong> 增加测试</li><li><strong>chore:</strong> 构建过程或辅助工具的变动</li><li><strong>up:</strong> 不属于上述分类时，可使用此类别</li><li><strong>merge:</strong> 用于 merge branch，需要手写 commit message 的情况</li><li><strong>revert:</strong> 用于撤销之前的 commit</li></ul><p>3、业务分支，命名规范：（建议一定加上日期）</p><ul><li>特性分支：feature_xxx_YYMMDD</li><li>紧急bug修复分支：hotfix_xxx_YYMMDD</li><li>小程序发布分支（自动生成）：release_YYMMDD</li></ul><h3 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h3><ul><li>代码格式化：Prettier</li><li>代码格式检查：ESLint</li></ul><h3 id="CSS预处理器"><a href="#CSS预处理器" class="headerlink" title="CSS预处理器"></a>CSS预处理器</h3><ul><li>SASS（用得较多）</li><li>Less</li><li>PostCSS</li></ul><h3 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h3><ul><li>包管理工具：npm（最常见）、yarn</li><li>cnpm、nvm、nrm常用命令</li></ul><h3 id="编译构建"><a href="#编译构建" class="headerlink" title="编译构建"></a>编译构建</h3><ul><li>webpack（最常见）</li><li>Vite</li><li>Gulp</li><li>Babel：ES6语法转为ES5语法</li></ul><h3 id="小程序工程化"><a href="#小程序工程化" class="headerlink" title="小程序工程化"></a>小程序工程化</h3><p><img src="https://img.smyhvae.com/640.jpeg" alt="图片"></p><ul><li><a href="https://mp.weixin.qq.com/s/_NSJTQ-4-8gTnwTVK-tn0A">小程序工程化探索</a></li><li><a href="https://mp.weixin.qq.com/s/tJN3Yz6usSt9LG37_pN7dw">京喜小程序最佳实践：我是如何写超大型小程序代码的</a></li></ul><h3 id="测试相关"><a href="#测试相关" class="headerlink" title="测试相关"></a>测试相关</h3><ul><li>编写测试用例代码</li><li>单元测试</li><li>自动化测试</li></ul><h2 id="三、前端核心知识"><a href="#三、前端核心知识" class="headerlink" title="三、前端核心知识"></a>三、前端核心知识</h2><blockquote><p>前端入门核心知识点</p></blockquote><h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><ul><li>Web标准：结构标准（HTML）、表现标准（CSS）、行为标准（JS）</li><li>浏览器分为两部分：渲染引擎（即：浏览器内核）、JS 引擎</li><li>浏览器的工作原理：重绘和重排、V8引擎</li><li>App的WebView容器，相当于浏览器，可以内嵌H5网页</li></ul><h3 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h3><ul><li>语义化标签：<code>&lt;header&gt;</code>、<code>&lt;article&gt;</code> 、<code>&lt;footer&gt;</code>等。</li><li>多媒体标签：<code>&lt;audio&gt;</code>、<code>&lt;video&gt;</code></li><li>更强的本地存储能力和设备兼容性：indexDB、HTML5 APP cookie</li><li>三维、图形及特效：SVG、Canvas、WebGL</li><li>更有效的实时连接：WebSocket、Server-Sent Events</li><li>无障碍体验</li></ul><h3 id="CSS、CSS3"><a href="#CSS、CSS3" class="headerlink" title="CSS、CSS3"></a>CSS、CSS3</h3><ul><li>CSS盒模型、BFC</li><li>浮动、定位（绝对定位和相对定位）</li><li>flex 布局</li><li>圣杯布局、双飞翼布局</li><li>选择器：后代选择器、交集选择器、并集选择器、伪类选择器</li><li>2D转换：移动translation、旋转rotate、缩放scale</li><li>3D转换：透视 perspective、3D移动 translate3d、3D旋转 rotate3d、3D呈现 transform-style</li><li>CSS3动画：animation</li><li>CSS hack</li><li>Retina 屏幕的 1px 像素，如何实现</li></ul><h3 id="JS基础"><a href="#JS基础" class="headerlink" title="JS基础"></a>JS基础</h3><ul><li><p>ES6语法：严格模式、箭头函数、Promise、Symbol数据类型、Set 和Map数据结构</p></li><li><p>ES6转ES5</p></li><li><p>JS数据类型转换、隐式类型转换</p></li><li><p>内置对象及其方法</p></li><li><p>数组的各种方法：map、filter、every、reduce等</p></li><li><p>事件机制、原型继承、立即执行函数</p></li><li><p>DOM操作、虚拟 DOM 的 diff 算法</p></li><li><p>BOM浏览器操作</p></li><li><p>事件冒泡机制：捕获阶段、目标阶段、冒泡阶段。</p></li><li><p>异步编程：Ajax、Promise、async await</p></li><li><p>SessionStorage和LocalStorage、Cookie</p></li><li><p>迭代器Iterator和生成器Generator</p></li><li><p>Web Socket</p></li><li><p>异步编程</p></li><li><p>单线程</p></li><li><p>Canvas图像绘制</p></li><li><p>svg 动画</p></li></ul><h3 id="JS-高级"><a href="#JS-高级" class="headerlink" title="JS 高级"></a>JS 高级</h3><ul><li>JS 三座大山：原型与原型链、作用域及闭包、异步和单线程</li><li>作用域链、类、继承、原型继承</li><li>this的指向和绑定规则</li><li>深拷贝和浅拷贝</li><li>防抖和节流</li><li>Promise的宏任务和微任务</li><li>浏览器的重排和重绘</li><li>手写 Promise的整个逻辑和API：resolve、reject、then、catch、finally、allSettled、race any</li><li>高阶函数</li><li>事件委托</li><li>call、apply、bind</li><li>arguments 伪数组</li><li>函数柯里化</li><li>模块化：CommonJS、AMD、CMD、ESModule</li><li>JS高阶语法：Iterator 迭代器、Decorator 生成器</li><li>JS 高阶语法：Decorator、Proxy/Reflect、MutationObserver、 对象属性描述符、Object.assign、Object.freeze、Object.seal</li><li>JS 内存泄漏、JS垃圾回收算法</li><li>TypeScript 类型检查</li><li>Vue.js、React.js源码解析</li><li>Vue.js、React.js的<strong>状态管理</strong>：Vuex、Redux、Redux Toolkit、React Hooks、zustand</li><li>V8引擎源码</li></ul><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><ul><li>回调函数</li><li>时间驱动机制</li><li>模块化</li><li>函数</li><li>路由</li><li>全局方法</li><li>文件系统</li></ul><h3 id="Web-安全"><a href="#Web-安全" class="headerlink" title="Web 安全"></a>Web 安全</h3><ul><li>跨域问题、同源策略、JSONP</li><li>CORS</li><li>XSS</li><li>CSRF</li></ul><h3 id="页面形式"><a href="#页面形式" class="headerlink" title="页面形式"></a>页面形式</h3><ul><li><p>多端自适应布局</p></li><li><p>SPA单页应用</p></li><li><p>PWA（Progressive Web App）：小程序的鼻祖</p></li></ul><h2 id="四、前端框架"><a href="#四、前端框架" class="headerlink" title="四、前端框架"></a>四、前端框架</h2><blockquote><p>每个框架和工具，都有自己的约束、价值和最佳实践。</p></blockquote><h3 id="JS框架"><a href="#JS框架" class="headerlink" title="JS框架"></a>JS框架</h3><ul><li>Vue.js</li><li>React.js</li><li>Svelte（轻量级框架，最近比较火）。</li><li>angular（逐渐淘汰）</li></ul><p>对比：</p><ul><li>vue ：声明式编程，数据驱动的思想</li><li>React：函数式编程。如果你要改变数据，那么必须调用api去改。</li></ul><p>在vue 中，几乎给你想要的全部给你了；而react 追求的更多的是自力更生。</p><h3 id="CSS框架、组件库（B端常用）"><a href="#CSS框架、组件库（B端常用）" class="headerlink" title="CSS框架、组件库（B端常用）"></a>CSS框架、组件库（B端常用）</h3><ul><li>React 技术栈：<a href="https://ant.design/index-cn">Ant Design</a>（简称Antd）</li><li>Vue 技术栈：<a href="https://element.eleme.cn/#/zh-CN">Element</a>、<a href="https://antdv.com/components/overview-cn">Ant Design Vue</a></li><li>简单的CSS响应式框架：<a href="https://www.bootcss.com/">Bootstrap</a></li><li><a href="https://github.com/tailwindlabs/tailwindcss">Tailwind CSS</a>（最近比较火）</li><li><a href="https://github.com/youzan/vant-weapp">Vant Weapp</a>：轻量级的移动端（含H5、小程序）组件库</li></ul><h3 id="知识库框架"><a href="#知识库框架" class="headerlink" title="知识库框架"></a>知识库框架</h3><ul><li>Vuepress（基于 Vue.js，推荐）</li><li>Docusaurus（基于 React.js，推荐）</li><li>GitBook</li><li>docsify：可制作简易的 wiki 文档。案例：<a href="https://wiki.juemuren4449.com/">掘墓人的 Wiki</a></li></ul><p>补充：知识库框架，首先推荐 Vuepress 和 Docusaurus，功能强大，成熟稳定。</p><h3 id="API-文档框架"><a href="#API-文档框架" class="headerlink" title="API 文档框架"></a>API 文档框架</h3><ul><li>TypeDoc：将TypeScript项目生成 html、markdown等文档。</li><li><a href="https://github.com/storybookjs/storybook/">storybook</a>：用于搭建UI组件的知识库。可在线预览UI组件的样式和交互效果。</li></ul><h3 id="跨端框架"><a href="#跨端框架" class="headerlink" title="跨端框架"></a>跨端框架</h3><ul><li><p>Flutter（最近比较火）：Flutter 的Dart开发语言，可以编译为 ARM 64、x86 和 JavaScript 代码</p></li><li><p>ReactNative（逐渐没落）：App、Web端</p></li><li><p>Taro：小程序、H5</p></li></ul><h3 id="桌面应用开发框架"><a href="#桌面应用开发框架" class="headerlink" title="桌面应用开发框架"></a>桌面应用开发框架</h3><ul><li>Electron 框架。案例：VS Code软件就是用  Electron 开发的。</li></ul><p>Electron 非常流行，也被大量公司使用，也有很多成功软件，比如 VS Code、Facebook Messager、Twitch、Microsoft Teams 等。Electron 虽然上手容易，但问题也很明显，就是<strong>慢、吃内存和大</strong>，Electron 吃内存是因为打包的 Chromium 吃内容，同时一个 Hello World 编译后就要 120M+ 。</p><p><strong>VS Code、chrome、小程序开发者工具</strong>，本质上都是运行的 chrome 内核。所以你会发现，这三个软件都很占内存，都很卡。我将其称之为“<strong>前端头痛三剑客</strong>”。</p><h3 id="前端可视化框架、图表库"><a href="#前端可视化框架、图表库" class="headerlink" title="前端可视化框架、图表库"></a>前端可视化框架、图表库</h3><ul><li>ECharts：百度的开源图表库。</li><li>D3.js：可视化 js 库。</li><li><a href="http://www.webgl3d.cn/Three.js/">Three.js</a>：基于原生 <a href="https://www.zoo.team/article/webglabout">WebGL</a> 封装运行的三维引擎。<a href="http://www.yanhuangxueyuan.com/3D/solarSystem/index.html">太阳系案例</a> <a href="https://www.teqng.com/2021/08/16/%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E7%94%A8three-js%E5%88%9B%E9%80%A0%E4%B8%80%E4%B8%AA%E4%B8%89%E7%BB%B4%E5%A4%AA%E9%98%B3%E7%B3%BB/">#</a></li><li><a href="https://www.cocos.com/products#Cocos2d-x">Cocos 引擎</a>：游戏动画开发框架。</li><li><a href="https://www.egret.com/">白鹭引擎</a>：H5游戏引擎，一套完整的H5游戏解决方案。白鹭引擎的所在公司已在2022年初破产，不建议使用。</li></ul><h3 id="编辑器框架"><a href="#编辑器框架" class="headerlink" title="编辑器框架"></a>编辑器框架</h3><ul><li>wangEditor：国内很流行</li><li>TinyMCE：国外很火</li><li>ueditor：百度的开源框架。比较老，逐渐没落。</li><li>Monaco Editor：VS Code的在线版</li></ul><h3 id="Node-js-框架"><a href="#Node-js-框架" class="headerlink" title="Node.js 框架"></a>Node.js 框架</h3><ul><li>Koa：新一代 Node.js 框架。</li><li><a href="https://eggjs.github.io/zh/">Egg.js</a>：Egg是在Koa基础上进一步封装的企业级Web开发框架。</li><li>Express：比较老的Node.js 框架。</li></ul><h3 id="服务端渲染框架"><a href="#服务端渲染框架" class="headerlink" title="服务端渲染框架"></a>服务端渲染框架</h3><ul><li>Next.js （基于React.js）</li><li>Nuxt.js （基于Vue.js）</li></ul><h3 id="前端测试框架"><a href="#前端测试框架" class="headerlink" title="前端测试框架"></a>前端测试框架</h3><ul><li><a href="https://github.com/mochajs/mocha">Mocha</a>：JS 测试框架。</li><li><a href="https://tiga.jd.com/docs/">Tiga</a>：跨端（H5、小程序）项目的自动化测试 SDK。凹凸实验室出品。</li></ul><h2 id="五、前端性能优化"><a href="#五、前端性能优化" class="headerlink" title="五、前端性能优化"></a>五、前端性能优化</h2><h3 id="性能分析工具"><a href="#性能分析工具" class="headerlink" title="性能分析工具"></a>性能分析工具</h3><ul><li><p>控制台的瀑布图 Waterfall</p></li><li><p>控制台的 performance工具：日常开发过程中观察分析运行时的性能表现</p></li><li><p>控制台的 LightHouse ：跑分、输出性能报告，分析性能</p></li><li><p><a href="https://www.webpagetest.org/">WebPageTest</a>网站：评估网站性能</p></li><li><p>Performance 这个API：实时动态测量性能</p></li></ul><h3 id="性能参数"><a href="#性能参数" class="headerlink" title="性能参数"></a>性能参数</h3><ul><li>首屏时间 = 白屏时间 + 渲染时间。预解析、预加载、预渲染、懒加载、懒执行。</li><li>FPS帧率</li><li>性能的测量标准：RAIL 模型</li><li>弱网环境，耗时对比</li></ul><h3 id="浏览器渲染优化"><a href="#浏览器渲染优化" class="headerlink" title="浏览器渲染优化"></a>浏览器渲染优化</h3><ul><li>了解渲染过程、关键渲染路径</li><li>减少重排和重绘</li><li>用户从输入url到页面加载显示完成，经历了哪些过程</li></ul><h3 id="JavaScript-优化"><a href="#JavaScript-优化" class="headerlink" title="JavaScript 优化"></a>JavaScript 优化</h3><ul><li>JS资源优化：按需加载、编译打包、解析执行、异步加载</li><li>V8引擎工作原理、性能优化原理</li><li>防抖和节流</li><li>无限滚动列表：做节点回收</li><li>骨架屏 skeleton：减少布局移动</li><li>时间分片：把一个运行时间比较长的任务分解成一块一块比较小的任务，分块去执行，减少用户的卡顿感</li><li>JS内存管理</li></ul><h3 id="资源优化"><a href="#资源优化" class="headerlink" title="资源优化"></a>资源优化</h3><ul><li>资源的压缩与合并：减少http请求数量；减少请求资源的大小；使用 http缓存</li><li>HTML优化：减少iframe的使用；避免节点的深层次嵌套；避免使用table布局</li><li>CSS优化：降低CSS对页面渲染的阻塞，尽早加载CSS；利用GPU渲染CSS动画；使用 contain属性，减少布局和绘制的消耗时间</li><li>图片优化：使用CSS3、SVG、IconFont代替图像；图片懒加载 lazy loading；图片的预加载；渐进式图片；响应式图片；使用 base64 代替小于8kb的图。</li><li>字体优化：字体闪动问题；使用特殊字体时，建议动态加载网络字体</li><li>异步加载第三方资源：第三方资源不可控会影响页面的加载和显示</li></ul><h3 id="构建优化"><a href="#构建优化" class="headerlink" title="构建优化"></a>构建优化</h3><ul><li>tree shaking、代码拆分（Code Splitting）</li><li>代码压缩混淆</li><li>打包时，避免对不变的库重复构建。</li></ul><h3 id="网络传输优化"><a href="#网络传输优化" class="headerlink" title="网络传输优化"></a>网络传输优化</h3><ul><li>启用Gzip对资源进行压缩</li><li>CDN传输：静态资源全部放CDN上，使用户可就近获取所需内容，大幅减小光纤传输距离。</li><li>避免重定向：301、302 重定向会降低响应速度</li><li>dns预解析：使用dns-prefetch 提前解析域名，提高资源加载速度。在访问以图片为主的网站时，DNS预解析可以让加载时间减少5%左右。</li><li>PWA，Service worker</li><li>SSR 服务端渲染/Node直出</li></ul><h2 id="六、前端工具和资源"><a href="#六、前端工具和资源" class="headerlink" title="六、前端工具和资源"></a>六、前端工具和资源</h2><h3 id="前端文档"><a href="#前端文档" class="headerlink" title="前端文档"></a>前端文档</h3><ul><li>MDN 官方文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web">https://developer.mozilla.org/zh-CN/docs/Web</a></li></ul><h3 id="前端社区"><a href="#前端社区" class="headerlink" title="前端社区"></a>前端社区</h3><ul><li>GitHub</li><li>stackoverflow</li><li>掘金</li></ul><h3 id="JS-学习资源"><a href="#JS-学习资源" class="headerlink" title="JS 学习资源"></a>JS 学习资源</h3><ul><li>现代 JavaScript 教程：<a href="https://zh.javascript.info/">https://zh.javascript.info/</a></li><li>阮一峰 JS教程：<a href="https://wangdoc.com/javascript/">https://wangdoc.com/javascript/</a></li><li>阮一峰 ES6教程：<a href="https://es6.ruanyifeng.com/">https://es6.ruanyifeng.com/</a></li><li>TypeScript 入门教程：<a href="https://github.com/xcatliu/typescript-tutorial">https://github.com/xcatliu/typescript-tutorial</a></li><li>Node.js学习指南：<a href="https://blog.poetries.top/node-learning-notes/">https://blog.poetries.top/node-learning-notes/</a></li></ul><h3 id="JS-代码规范"><a href="#JS-代码规范" class="headerlink" title="JS 代码规范"></a>JS 代码规范</h3><p>1、Airbnb JavaScript Style Guide：</p><ul><li>英文原版：<a href="https://github.com/airbnb/javascript">https://github.com/airbnb/javascript</a></li><li>中文版：<a href="https://github.com/lin-123/javascript">https://github.com/lin-123/javascript</a></li></ul><p>2、clean code JavaScript：</p><ul><li>英文原版：<a href="https://github.com/ryanmcdermott/clean-code-javascript">https://github.com/ryanmcdermott/clean-code-javascript</a></li><li>中文版1：<a href="https://github.com/alivebao/clean-code-js">https://github.com/alivebao/clean-code-js</a></li><li>中文版2：<a href="https://github.com/beginor/clean-code-javascript">https://github.com/beginor/clean-code-javascript</a></li></ul><h3 id="前端刷题"><a href="#前端刷题" class="headerlink" title="前端刷题"></a>前端刷题</h3><ul><li>前端进阶之道：<a href="https://yuchengkai.cn/">https://yuchengkai.cn/</a></li></ul><h3 id="CSS-学习资源"><a href="#CSS-学习资源" class="headerlink" title="CSS 学习资源"></a>CSS 学习资源</h3><ul><li>CSS灵感：<a href="https://github.com/chokcoco/CSS-Inspiration">https://github.com/chokcoco/CSS-Inspiration</a></li><li>CSS的各种实现效果：<a href="https://lhammer.cn/You-need-to-know-css/#/">https://lhammer.cn/You-need-to-know-css/#/</a></li><li>css_tricks：<a href="https://github.com/QiShaoXuan/css_tricks">https://github.com/QiShaoXuan/css_tricks</a></li><li>按需定制 CSS 动画效果：<a href="https://github.com/QiShaoXuan/css_tricks">https://github.com/QiShaoXuan/css_tricks</a></li></ul><h3 id="字体相关资源"><a href="#字体相关资源" class="headerlink" title="字体相关资源"></a>字体相关资源</h3><ul><li>360字体版权查询：<a href="https://fonts.safe.360.cn/">https://fonts.safe.360.cn/</a></li><li>最全的免费可商用字体-效果预览：<a href="https://wordshub.github.io/free-font/index.html">https://wordshub.github.io/free-font/index.html</a></li><li>常见的免费字体：<a href="http://zenozeng.github.io/Free-Chinese-Fonts/">http://zenozeng.github.io/Free-Chinese-Fonts/</a></li></ul><h3 id="抓包工具"><a href="#抓包工具" class="headerlink" title="抓包工具"></a>抓包工具</h3><ul><li>Whistle：<a href="https://wproxy.org/whistle/">https://wproxy.org/whistle/</a></li></ul><h3 id="兼容性查看工具"><a href="#兼容性查看工具" class="headerlink" title="兼容性查看工具"></a>兼容性查看工具</h3><ul><li>Can I use（前端API兼容性查看）：<a href="https://caniuse.com/">https://caniuse.com/</a></li></ul><h3 id="图片相关工具"><a href="#图片相关工具" class="headerlink" title="图片相关工具"></a>图片相关工具</h3><ul><li>图片压缩：<a href="https://tinypng.com/">https://tinypng.com/</a></li><li>图片压缩：<a href="https://docsmall.com/">https://docsmall.com/</a></li><li>生成代码截图：<a href="https://carbon.now.sh/">https://carbon.now.sh/</a></li></ul><h3 id="设计工具"><a href="#设计工具" class="headerlink" title="设计工具"></a>设计工具</h3><ul><li><strong>墨刀</strong>：原型设计工具。网址：<a href="https://modao.cc/">https://modao.cc/</a></li><li><strong>蓝湖</strong>：一款产品文档和设计图的在线协作平台。网址：<a href="https://lanhuapp.com/">https://lanhuapp.com</a></li><li><strong>PxCook（像素大厨）</strong>：高效易用的自动标注工具。软件下载链接：<a href="https://www.fancynode.com.cn/pxcook">https://www.fancynode.com.cn/pxcook</a></li><li>即时设计、稿定、master go</li></ul><h3 id="流程图工具"><a href="#流程图工具" class="headerlink" title="流程图工具"></a>流程图工具</h3><ul><li>ProcessOn：<a href="https://www.processon.com/">https://www.processon.com/</a></li></ul><h3 id="大纲笔记"><a href="#大纲笔记" class="headerlink" title="大纲笔记"></a>大纲笔记</h3><ul><li><strong>幕布</strong>：<a href="https://mubu.com/">https://mubu.com</a></li><li>飞书-思维笔记</li></ul><h3 id="markdown-编辑器"><a href="#markdown-编辑器" class="headerlink" title="markdown 编辑器"></a>markdown 编辑器</h3><ul><li>typora</li><li>VS Code </li></ul><h3 id="代码编辑器"><a href="#代码编辑器" class="headerlink" title="代码编辑器"></a>代码编辑器</h3><ul><li>VS Code</li><li>Sublime Text</li></ul><h2 id="七、前端书籍推荐"><a href="#七、前端书籍推荐" class="headerlink" title="七、前端书籍推荐"></a>七、前端书籍推荐</h2><h3 id="JS经典书籍"><a href="#JS经典书籍" class="headerlink" title="JS经典书籍"></a>JS经典书籍</h3><ul><li>红宝书：《JavaScript高级程序设计》</li><li>小黄书：《你不知道的JavaScript》上、下册</li><li>犀牛书：《JavaScript权威指南》</li><li>绿皮书：《javascript语言精粹与编程实践》</li></ul><h3 id="JS进阶"><a href="#JS进阶" class="headerlink" title="JS进阶"></a>JS进阶</h3><ul><li>《前端开发核心知识进阶》</li><li>《JavaScript 二十年》</li><li>《JavaScript 悟道》</li><li>《深入理解现代JavaScript》</li><li>《JavaScript忍者秘籍》</li><li>《编写可维护的JavaScript》</li><li>《了不起的JavaScript工程师：从前端到全端高级进阶》</li><li>《javascript设计模式与开发实践》</li><li>《WebKit技术内幕》</li><li>《JavaScript启示录》</li></ul><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><ul><li>《CSS世界》</li><li>《CSS新世界》</li><li>《CSS揭秘》</li><li>《精通 CSS》</li></ul><h3 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h3><ul><li>《Vue.js设计与实现》</li><li>《深入浅出Vue.js》</li></ul><h3 id="Node-js-1"><a href="#Node-js-1" class="headerlink" title="Node.js"></a>Node.js</h3><ul><li>《深入浅出Node.js》</li><li>《Node.js：来一打 C++ 扩展》</li></ul><h3 id="数据结构和算法"><a href="#数据结构和算法" class="headerlink" title="数据结构和算法"></a>数据结构和算法</h3><ul><li>《计算之魂》</li><li>《大话数据结构》</li><li>《学习JavaScript数据结构与算法》</li></ul><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><ul><li><p>《领域驱动设计》</p></li><li><p>《推荐系统实践》</p></li><li><p>《数据密集型应用系统设计》</p></li><li><p>《代码精进之路：从码农到工匠》</p></li></ul><h3 id="项目管理和认知"><a href="#项目管理和认知" class="headerlink" title="项目管理和认知"></a>项目管理和认知</h3><ul><li>《人月神话》</li><li>《黑客与画家》</li><li>Joel Spolsky的书：《软件随想录》《Joel 说软件》《Joel 谈优秀软件开发方法》</li><li>《凤凰项目》</li><li>《持续交付2.0》</li><li>《Google软件工程》</li><li>《软技能：代码之外的生存指南》</li><li>《重来3：跳出疯狂的忙碌》</li><li>《程序员的思维修炼》</li><li>《管理的常识》</li></ul><h3 id="产品"><a href="#产品" class="headerlink" title="产品"></a>产品</h3><ul><li>《启示录》</li><li>《结网》</li><li>《人人都是产品经理》</li><li>《用户体验要素》</li><li>《有效需求分析》</li><li>《产品逻辑之美：打造复杂的产品系统》</li><li>《微信背后的产品观》</li><li>《俞军产品方法论》</li><li>《决胜B端——产品经理升级之路》</li><li>《给产品经理讲技术》</li><li>《精益数据分析》</li><li>《产品经理面试宝典》</li><li>《体验引擎：游戏设计全景探秘》</li></ul><h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><ul><li>《设计心理学》四册</li><li>《用户体验要素》</li><li>《点石成金》</li><li>《写给大家看的设计书》</li><li>《About Face 4: 交互设计精髓》</li><li>《设计中的设计》</li><li>《破茧成蝶》</li><li>《简约至上：交互式设计四策略》</li><li>《Web表单设计：点石成金的艺术》</li><li>《触动人心：设计优秀的iPhone应用》</li><li>《瞬间之美：Web界面设计如何让用户心动》</li><li>《用户体验度量：收集、分析与呈现》</li></ul><h3 id="运营"><a href="#运营" class="headerlink" title="运营"></a>运营</h3><ul><li>《运营之光》两册</li><li>《我在一线做用户增长》</li><li>《增长黑客：创业公司的用户与收入增长秘籍》</li><li>《流量池》</li><li>《超级运营术》</li></ul><h3 id="商业"><a href="#商业" class="headerlink" title="商业"></a>商业</h3><ul><li>《史蒂夫·乔布斯传》</li><li>《浪潮之巅》</li><li>《赢》</li><li>《你凭什么做好互联网：从技术思维到商业逻辑》</li><li>《计算广告》</li><li>《详谈：左晖》</li><li>《在线：数据改变商业本质，计算重塑经济未来》</li><li>《零售的哲学》</li><li>《我看电商》</li><li>《冲浪板上的公司》</li><li>《一本书读懂财报》</li></ul><h3 id="思维和认知"><a href="#思维和认知" class="headerlink" title="思维和认知"></a>思维和认知</h3><ul><li>《学会提问》</li><li>《思考，快与慢》</li><li>《清醒思考的艺术》</li><li>《把时间当作朋友》</li><li>《智识分子》</li><li>《少有人走的路》</li><li>《沟通的方法》</li><li>《我们为什么要睡觉》</li></ul><h2 id="八、前端总结和认知"><a href="#八、前端总结和认知" class="headerlink" title="八、前端总结和认知"></a>八、前端总结和认知</h2><h3 id="研发视角，如何理解需求"><a href="#研发视角，如何理解需求" class="headerlink" title="研发视角，如何理解需求"></a>研发视角，如何理解需求</h3><blockquote><p><a href="https://img.smyhvae.com/20220613_1330-2.jpg">点击查看大图</a>。</p></blockquote><p><img src="https://img.smyhvae.com/20220613_1330-2.jpg"></p><p>从上面的流程图中可以看出，产品经理的交付物是什么？是prd吗？显然不是。</p><p>产品经理的工作跟设计师、工程师非常不同。人们对工程师的期望是交付有效的代码，对设计师的期望是交付视觉稿。而对于产品经理来说，只交付一份prd是不够的。</p><p>产品经理要负责跟进整个产品周期，包括上线后的页面效果和数据表现。编写需求规范是一种<strong>沟通和推动项目</strong>的手段，但<strong>规范本身并没有内在的价值</strong>。很多产品经理并不借助prd来交流他们的想法，他们可以用谈话，还可以把想法画在白板上。也有一些产品经理虽然写了规范，但却没有参照执行。</p><h3 id="前端工程师应该具备怎样的能力和素质"><a href="#前端工程师应该具备怎样的能力和素质" class="headerlink" title="前端工程师应该具备怎样的能力和素质"></a>前端工程师应该具备怎样的能力和素质</h3><ul><li>技术功底、技术视野、技术追求</li><li>除了开发业务功能外，还需要对开发规范、工程化、组件化、模块化、测试、设计模式有一定的认知和实践</li><li>沟通表达能力、书面表达能力、总结复盘习惯</li><li>全局思维、抽象思维、持续交付意识</li><li>项目一号位担当，团队协作意识</li><li>综合权衡：成本、效率、质量、风险、体验</li><li>关注产品、设计、商业等各个领域。交叉学科会带来更多创新。</li></ul><h3 id="前端认知"><a href="#前端认知" class="headerlink" title="前端认知"></a>前端认知</h3><p>1、虽然我们绝大多数时间耗在业务开发上，但仍需要积累其他方面的沉淀，做多一些有趣的、可持续的事情，比如分享总结、基础能力建设、研发效能提升、技术运营建设、技术沉淀等。</p><p>2、学会提问。我们日常在提出问题和解决问题时，经常容易陷入<a href="https://coolshell.cn/articles/10804.html">X-Y问题</a>，导致目标不明确、思路不清晰、沟通效率低下，甚至在一个完全错误的方向上浪费大量的资源、时间和精力。无论是在寻求帮助的人身上，还是在提供帮助的人身上，都有所体现。</p><p>在面对一个问题时，要理解这句话的意图、事实、情绪、期待。学会提问，学会答疑，都是一种智慧。参考<a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/main/README-zh_CN.md">提问的智慧</a> 。</p><p>3、全流程跟进，持续交付，创造业务价值。</p><p>4、前端的本质是链接商业、设计、计算能力，为用户提供专业的人机交互体验。</p><p>5、产品能力和技术能力是：判断信息，抓住要点，整合有限的资源，把自己的价值打包成一个产品进行交付，并获得回报。</p><p>6、部门体系的角色有很多：运营、产品、视觉、开发、测试、架构师、leader、行销、数据分析、运维等。有些工作不是“做或者不做”的问题，而是程度的问题。在注意边界的前提下，主动承担、全盘思考、多一份同理心，这是能力和责任逐渐增强的体现。</p><p>7、谦逊、尊重和信任，是协同作战和良性合作的基础。</p><p>8、组织内，人与人的关系应该是怎样的？有人认为是管理与被管理的关系，有人认为是合作关系。而我认为，<strong>组织内的关系是奉献关系</strong>。没有奉献作为基础，组织关系是不成立的。组织内的人与人之间是相互付出的关系，部门与部门是相互付出的关系，上级与下级之间是相互付出的关系，在这样的相互奉献关系中，组织才会真正地存在并发挥作用。</p><p>奉献关系所产生的基本现象是：每个处于流程上的人更关心他能够为下一个工序做什么样的贡献；每个部门都关心自己如何调整才能够与其他部门有和谐的接口；下级会关注自己怎样配合才能够为上级提供支持，而上级会要求自己为下级解决问题并提供帮助。</p><p>能力很重要，而付出更重要。</p><p>9、优秀的人有几个特性：敏感、不能忍、有动手优化的能力。</p><p>10、前端侧重于人机交互和用户体验，后端侧重于业务逻辑和大规模数据处理。理论上，面向用户的产品里，所有问题（包括产品、设计、后端、甚至看不见的问题）的表现形式，都会暴露在前端，而只有部分问题（数据问题、计算问题、安全问题等）暴露在后端，这就意味着前端起到了至关重要的<strong>承载和连接</strong>作用。</p><p>11、前端技术的更新日新月异；前端框架的技术选型层出不穷；视觉审美的潮流不断更替；可视化效果酷炫无比；用户的运营体系逐渐精细化；适老化、无障碍化、青少年人群的诉求浮出水面；智能设备的升级和适配无穷无尽。所有的这一切，对前端领域和前端同学就一个要求：要折腾，爱折腾，反复折腾。</p>]]></content>
      
      
      <categories>
          
          <category> tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端性能分析工具和指标</title>
      <link href="/2022/06/2134762.html"/>
      <url>/2022/06/2134762.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="性能指标和优化目标之：加载"><a href="#性能指标和优化目标之：加载" class="headerlink" title="性能指标和优化目标之：加载"></a>性能指标和优化目标之：加载</h2><p>性能指标：我们在性能优化过程中可以参考的标准。这些标准都是业界或者前人总结出来的指导性经验。我们可以参考这些指标，去指导我们自己的优化。</p><h3 id="打开网站的初体验"><a href="#打开网站的初体验" class="headerlink" title="打开网站的初体验"></a>打开网站的初体验</h3><p>我们以淘宝网站为例，按下F12打开浏览器的调试模式。</p><p><img src="http://img.smyhvae.com/20210115_1601.png"></p><p>上图中，鼠标右键点击“刷新”图标（或者鼠标长按刷新图标，松开鼠标后），会弹出三个选项，我们选择最后一个选项“清空缓存并硬性重新加载”。</p><p>补充：这三个选项都是在调试模式下（按下F12弹出调试面板）才会出现的。</p><p>浏览器的DevTools初印象：</p><p><img src="https://img.smyhvae.com/20210115_1617.png"></p><p>上图中，打开 chrome 调试工具，点开「设置」icon，下面的四个选项中，除了“Group by frame”之外，其他的三个选项都可以勾选上。</p><p>我们可以看到淘宝网站的一些指标：</p><ul><li>总资源量是 1.3M。</li><li>DOM加载完成时间（DOMContentLoaded）：511ms。这是一个很关键的指标。</li><li>其他资源的总加载时间是 1.05秒。</li></ul><p>我们再来对比一下京东的：</p><p><img src="http://img.smyhvae.com/20210116-1357.png"></p><h3 id="保存快照"><a href="#保存快照" class="headerlink" title="保存快照"></a>保存快照</h3><p>network里的信息挺多，我们可以将其保存下来，留着以后做分析、做对照。</p><p><img src="http://img.smyhvae.com/20210115-1723.png"></p><p>如上图所示，我们可以在 network 的空白处右键，选择“Save all as HAR with content”，将 network 信息保存为 <strong>HAR</strong>文件格式。</p><p><strong>HAR是一种标准的Web格式，用户保存性能测试的结果。里面的数据是json格式。</strong></p><p>我们可以使用第三方的 HAR 分析软件来打开 HAR 文件，比如：</p><ul><li><a href="https://toolbox.googleapps.com/apps/har_analyzer/?lang=zh-CN">Google 提供的 HAR 分析器</a></li><li>Fiddler 抓包工具</li></ul><p>注意，HAR 文件包含了一些敏感信息：</p><p><img src="http://img.smyhvae.com/20210115-1733.png"></p><h3 id="瀑布图-Waterfall"><a href="#瀑布图-Waterfall" class="headerlink" title="瀑布图 Waterfall"></a>瀑布图 Waterfall</h3><p><img src="http://img.smyhvae.com/20210115_1618.png"></p><p>瀑布图可以非常直观地把网站的加载过程，用自上而下的方式表达出来，就像瀑布一样。</p><p>瀑布图有两中解读方式：一种是横向看，一种是纵向看。</p><p><strong>1、横向看</strong>：</p><p>横向看的是具体的资源，每一行代表某个资源的加载信息。里面有一些色块来表达加载的过程，每个块的颜色不同。也就是说资源的下载不是单一的过程，而是经历了很多环节。</p><p>为了了解资源的具体加载过程，我们把鼠标悬浮在第一个资源的色块上，可以看见一个详情列表：</p><p><img src="http://img.smyhvae.com/20210115_1632.png"></p><p>（1）等待：</p><ul><li>Queueing：排队。浏览器会对资源的请求做优先级排序。</li></ul><p>（2）连接：</p><ul><li>DNS Lookup：DNS域名解析。每个资源都有域名，对域名做DNS解析，然后找到对应服务器的IP地址。</li><li>initial connection：客户端和服务器之间建立TCP连接。</li><li>SSL证书：该网站为了保证安全性，使用了 https 协议，启用了SSL证书。启用之后，需要做安全认证（SSL协商），这个过程也会耗时。到这里位置，我们可以看到，在请求资源之前，有很多的前置步骤。</li></ul><p>（3）请求和响应：</p><ul><li>Request sent：到这一步，真正开始请求资源。</li><li>Waiting（<strong>TTFB</strong>）：资源从请求到响应，有一个等待的时间。</li><li>Content Download：收到响应后，资源的下载时间。如果值越大，表明下载时间越长。有些同步加载的资源会造成阻塞，导致网页的整体加载时间过长，让用户等待太久。</li></ul><p><strong>TTFB</strong> 是一个很重要的指标，它表示的是：请求发出到响应，到底要经历多久。TTFB 可以给我们一个很直观的感受，我们网站的请求和响应到底是快还是慢，很大程度上是由 TTFB 决定。</p><p>影响 TTFB 的因素是什么呢？比如：</p><ul><li>后台的处理能力的响应速度。</li><li>网络状况：是否有网络延迟。</li></ul><p><strong>2、纵向看</strong>：（主要看两点）</p><p>（1）看资源与资源之间的联系：如果发生阻塞，说明资源可能是串行地按顺序加载。可以<strong>按需要适当调整为并行</strong>。</p><p>（2）看关键的时间节点。Waterfall 中有<strong>两根时间线</strong>：蓝色的线是 DOM 加载完成的时间，红色的线是所有资源加载完成的时间。</p><h2 id="性能指标和优化目标之：交互"><a href="#性能指标和优化目标之：交互" class="headerlink" title="性能指标和优化目标之：交互"></a>性能指标和优化目标之：交互</h2><p>上面的内容讲的是<strong>加载</strong>的性能，还有一个需要关注的性能指标是<strong>交互</strong>。也就是网站加载完成后，用户真正开始使用这个网站过程中的的交互体验。</p><p>关于交互体验的性能，我们需要关注的是：</p><ul><li>交互动作的<strong>响应时间</strong>要短：比如点击按钮后的弹窗、在搜索框里输入关键字后的搜索结果。</li><li>页面滚动要流畅：可以查看 FPS 帧率。</li><li>异步请求接口的完成时间要短：比如关注/取关主播的响应、领取红包的操作。</li></ul><h3 id="FPS帧率、FRS"><a href="#FPS帧率、FRS" class="headerlink" title="FPS帧率、FRS"></a>FPS帧率、FRS</h3><p>这里首先科普两个概念：</p><ul><li>刷新率：显示器每秒有多少帧画面。大多数显示器的刷新率是60帧/秒（即60hz）。</li><li>帧率（FPS：frames per second）：视频或者动画的内容本身，每秒有多少帧。由显卡输出帧率。</li></ul><p>上面的两个参数中，不要把「刷新率」和「帧率」弄混了。「刷新率」是屏幕的参数，「帧率」是图像、视频等内容的参数。人眼最终看到的效果，是以最低的参数为准的。</p><p>目前，市场主流手机和电脑屏幕的刷新率基本都是60Hz，即每秒显示60帧画面。也就是说，当我们在使用手机的时候，本质上是手机在连续播放一张张静态图片，每秒播放60张，让肉眼误认为眼前的画面在动。</p><p><img src="http://img.smyhvae.com/20210107_2115.gif"></p><p>持续滑动的过程中，如果页面输出到显示器的帧率低于60帧/秒，则人眼会感觉卡顿。</p><p>那么，在浏览器中如何实时显示内容的 FPS 参数呢？打开浏览器的控制台后，按住快捷键「Cmd + Shift + P」，然后输入 <code>fps</code>，选择<code>显示每秒帧数(FPS)计量器</code>。如下：</p><p><img src="https://tvax1.sinaimg.cn/large/0066jXzmgy1h4luvdfl6pj30gd06sgls.jpg"></p><p><img src="http://img.smyhvae.com/20210115-2146.png"></p><p><img src="http://img.smyhvae.com/20210115-2010.png"></p><p>Chrome官方给我们提供了下面这个网站，用于观察 FPS 效果：</p><ul><li><a href="http://googlesamples.github.io/web-fundamentals/tools/chrome-devtools/rendering-tools/forcedsync.html">http://googlesamples.github.io/web-fundamentals/tools/chrome-devtools/rendering-tools/forcedsync.html</a></li></ul><p>如果实在想要看fps，我们可以借助第三方的 <a href="https://chrome.google.com/webstore/detail/fps-extension/gdkkmimldhefhmmmlalioafomdlahcog">chrome 插件</a>来查看 fps参数。</p><h2 id="用-RAIL-模型测量性能"><a href="#用-RAIL-模型测量性能" class="headerlink" title="用 RAIL 模型测量性能"></a>用 RAIL 模型测量性能</h2><p>RAIL 模型是Google提出的可以量化性能的测量<strong>标准</strong>。我们做性能优化时，要尽可能到这个标准。</p><p>在做性能优化的时候，我们需要有人告诉我们：做到多好才算好？有没有一些通用的标准？而 RAIL 模型 可以给我们带来量化的指标。</p><p><strong>RAIL 模型包括四个方面</strong>：</p><p><img src="http://img.smyhvae.com/20210115-2027.png"></p><ul><li>Response：响应</li><li>Animation：动画</li><li>Idle：空闲时间</li><li>load：加载</li></ul><p>参考链接：</p><ul><li><a href="https://juejin.cn/post/6872474167543857165">[Web翻译]用RAIL模型测量性能</a></li><li><a href="https://web.dev/rail/">https://web.dev/rail/</a></li></ul><p><strong>RAIL 的目标</strong>：</p><ul><li>让良好的用户体验成为性能优化的目标</li></ul><p>接下来，我们再看看看 RAIL 的评估标准。</p><h3 id="1、响应"><a href="#1、响应" class="headerlink" title="1、响应"></a>1、响应</h3><p><strong>目标</strong>：处理用户发起的响应，应该在 50ms 内完成。</p><p><strong>准则</strong>：</p><ul><li>在50毫秒内处理用户输入事件。这适用于大多数输入，如点击按钮、切换表单控件或启动动画。这不适用于触摸拖动或滚动。</li><li>对于需要超过50毫秒才能完成的操作，需要提供反馈。</li></ul><p><img src="http://img.smyhvae.com/20210115-2039.png"></p><p>如上图所示，Google经过大量研究发现，用户能够接受的最高延时是100ms。所以，从用户发起交互请求（输入任务）后，前端最好能在100ms内给出反馈。</p><p><strong>但是我们的预算只有50毫秒</strong>。因为应用程序在接收到输入任务的时候，不一定会马上着手处理，它可能还有其他工作正在进行，这意味着当前的输入任务可能需要排队50ms左右。所以我们真正能处理这个请求的时间，并没有100ms。</p><h3 id="2、动画"><a href="#2、动画" class="headerlink" title="2、动画"></a>2、动画</h3><p><strong>目标</strong>：在10毫秒或更短的时间内制作出动画中的每一帧。（即：100帧/秒。）</p><p>我们知道，当动画的帧率是 &gt;= 60帧/秒 的时候，人眼才不会觉得卡顿。此时的理论值为 1000毫秒/60帧 = 16.6 毫秒/帧。</p><p>10毫秒和16毫秒之间，隔了6秒。这6秒是什么呢？因为浏览器需要大约6毫秒的时间来渲染每一帧，所以，每一帧的准则建议是10毫秒，而不是 16.6毫秒。</p><p>假设动画本身是60帧/秒，那么，最终渲染出来的效果可能只有 45帧/秒。</p><p><strong>广义的动画</strong>：</p><p>动画不仅仅是花哨的UI效果。每一种交互都被认为是动画。比如：</p><ul><li>视觉动画</li><li>滚动</li><li>拖动、平移元素、放大图片等。</li></ul><h3 id="3、空闲时间"><a href="#3、空闲时间" class="headerlink" title="3、空闲时间"></a>3、空闲时间</h3><p><strong>目标</strong>：最大化闲置时间，增加页面在50毫秒内响应用户输入的几率。</p><p>这个空闲时间，是和上面的第一点“响应”是结合在一起的。只有空闲足够多，当用户的交互来的时候，我们才能有足够的时间进行处理。</p><p><strong>准则</strong>：</p><ul><li>利用空闲时间做延迟加载。例如，页面在初始化的时候，尽可能少的加载数据，然后利用空闲时间加载其余部分。</li><li>在空闲时间内处理任务，时间不能超过50毫秒。否则，就阻塞了用户做其他的输入请求，导致卡顿。</li><li>如果用户在闲置时间工作期间与页面进行交互，那么这个交互应始终处于最高优先级，并中断闲置时间工作。</li></ul><h3 id="4、加载"><a href="#4、加载" class="headerlink" title="4、加载"></a>4、加载</h3><p><strong>目标</strong>：在5秒或更短的时间内加载页面并可以交互。</p><p><strong>准则</strong>：</p><ul><li>这里的5秒包括：加载、解析、渲染，并确保用户可以交互。</li><li>加载的过程中，可以使用loading框、进度条、骨架屏等方式缓解用户焦虑。</li></ul><h2 id="使用Chrome-DevTools-分析性能"><a href="#使用Chrome-DevTools-分析性能" class="headerlink" title="使用Chrome DevTools 分析性能"></a>使用Chrome DevTools 分析性能</h2><p>现在主流的性能测量工具：</p><ul><li>Chrome DevTools：开发调试、分析性能。</li><li>Lighthouse 网站整体质量评估。</li><li>WebPageTest：给网站提供多个地点的测试，以及全面的性能报告。</li></ul><p>这一段，我们先来讲一讲 Chrome DevTools 。</p><p>大家平时在用 Chrome DevTools 的时候，一般使用来开发调试、查看 DOM、css、接口请求等，但其实，这个工具非常强大。</p><h3 id="size：文件大小分析"><a href="#size：文件大小分析" class="headerlink" title="size：文件大小分析"></a>size：文件大小分析</h3><p><img src="http://img.smyhvae.com/20210116-0946.png"></p><p>可以把size从到小排序，看看哪个资源的文件较大。</p><p>另外，上图中的横线处说明：该文件在网络传输的时候会做压缩（125kb），拿到资源之后再解压还原（526kb）。</p><h3 id="performance：性能表现"><a href="#performance：性能表现" class="headerlink" title="performance：性能表现"></a>performance：性能表现</h3><p><img src="http://img.smyhvae.com/20210116-0959.png"></p><p>preformance的两个作用：</p><ul><li>Record button：记录页面加载、用户交互等全过程，直到我们手动点击停止按钮。</li><li>Reload button：记录页面从刷新到资源加载完成的过程。会自动停止记录。</li></ul><p>参数解读：</p><ul><li>Timing：关键的时间节点。</li><li>Main：主线程做了哪些任务，以及调用关系。</li></ul><p>Timing参数中，尤其注意看<code>DCL</code>（DOMContentLoaded），即DOM加载完成的时间节点。我们可以通过<code>Main</code>参数看看DOM在加载完成之前，都做了些什么事情。很有可能就是这些事情导致 <code>DCL</code>的时间过晚。</p><p>我们可以翻到<code>Main</code>里的最后一行（即最终调用的位置），往往这个位置就是我们自己写的代码。</p><h3 id="Diable-cache"><a href="#Diable-cache" class="headerlink" title="Diable cache"></a>Diable cache</h3><p><img src="http://img.smyhvae.com/20210116-1014.png"></p><p>上图中的<code>Diable cache</code>是一个很重要的设置选项。</p><p>勾选<code>Diable cache</code>：</p><ul><li>不走缓存，相当于页面初次访问。</li><li>如果你希望改的代码立即生效，就一定要勾选上。</li></ul><p>不勾选<code>Diable cache</code>：</p><ul><li>走缓存，相当于页面二次、三次访问。</li><li>很多时候，我们需要关心用户在第二次、第三次访问时候，他的访问速度如何、性能如何、我们设置的缓存有没有生效。此时就不要勾选上。</li></ul><h3 id="模拟网络情况"><a href="#模拟网络情况" class="headerlink" title="模拟网络情况"></a>模拟网络情况</h3><p><img src="http://img.smyhvae.com/20210116-1023.png"></p><p>模拟网络状况（自定义参数）：</p><p><img src="http://img.smyhvae.com/20210116-1026.png"></p><h3 id="Performance-monitor"><a href="#Performance-monitor" class="headerlink" title="Performance monitor"></a>Performance monitor</h3><p><img src="http://img.smyhvae.com/20210116-1032.png"></p><h3 id="快捷键ESC"><a href="#快捷键ESC" class="headerlink" title="快捷键ESC"></a>快捷键ESC</h3><p>按住快捷键ESC，会列出其他常用的功能菜单：</p><p><img src="http://img.smyhvae.com/20210116-1028.png"></p><h2 id="使用LightHouse分析性能"><a href="#使用LightHouse分析性能" class="headerlink" title="使用LightHouse分析性能"></a>使用LightHouse分析性能</h2><p>我们之所以使用不同的性能测量工具，是因为他们都有不同的特点。这一段要讲的 lighthouse 既可以帮我们生成简易的测试报告，还可以给出一些针对性的优化建议。后面要讲的 WebPageTest 可以帮我们生成详细的性能测试报告。</p><p>我们先来看看 Lighthouse。</p><h3 id="Lighthouse-介绍"><a href="#Lighthouse-介绍" class="headerlink" title="Lighthouse 介绍"></a>Lighthouse 介绍</h3><p><img src="http://img.smyhvae.com/20210115-1739.png"></p><p>lighthouse 是 chrome 浏览器的一个性能测量工具。我们先来看看它的性能指标，至于它具体使用，后续的内容再详细介绍。</p><p>淘宝跑分举例：</p><p><img src="http://img.smyhvae.com/20210115-1758.png"></p><p>京东跑分举例：</p><p><img src="http://img.smyhvae.com/20210115-1759.png"></p><p>Lighthouse 跑分里，最重要的两个指标如下：</p><ul><li><strong>First Contentful Paint（白屏时间）</strong>：<strong>从白屏到第一次出现内容的时间。</strong>我们可以看到，上面提供了一些加载过程的截图，10屏里如果只有1到2屏是白屏，说明体验还是可以的。</li><li><strong>Speed Index</strong>：速度指数。</li></ul><p>我们不需要关心这个指数是怎么来的，因为背后涉及一套很复杂的公式，我们暂时只需关注这个数值。</p><p>Speed Index 标准为4秒（超过4秒算比较慢的），我们测的淘宝的 speed index 是0.5s，很快了。但我们要结合网站本身的业务来<strong>权衡</strong>。并不是分数越高性能越高，比如百度这样的网站，页面上的内容很少，测出来的分数肯定很完美。而淘宝需要展示很多内容给用户看。所以，这个指标只是一个指导作用，并不一定能够达到最优的数值。</p><p>Lighthouse 的分析结果里，也给出了颜色标注：</p><ul><li>红色：比较严重的性能问题</li><li>黄色：需要做适当优化</li><li>绿色：说明性能表现很好。</li></ul><p>另外，Lighthouse  还会给出一些优化建议：</p><ul><li>Opportunities:优化建议。</li><li>Diagnostics：问题诊断。</li><li>Passed audits：表示这部分没有问题。</li></ul><h3 id="举例：确认某个JS-是否必须在首屏加载"><a href="#举例：确认某个JS-是否必须在首屏加载" class="headerlink" title="举例：确认某个JS 是否必须在首屏加载"></a>举例：确认某个JS 是否必须在首屏加载</h3><p>就拿B站来举例，来看看它的lighthouse报告：</p><p><img src="http://img.smyhvae.com/20210116_0107.png"></p><p>上图中给出了一个优化建议：有些JS文件不是首屏加载必须的。</p><p><img src="http://img.smyhvae.com/20210116_0108.png"></p><p>我们随便拿一个JS文件来测试（比如上图中，Header标签里的JS文件）。做法如下：</p><p><img src="http://img.smyhvae.com/20210116-0901.png"></p><p>如上图所示，在 chrome 控制台输入快捷键「Cmd + Shift + P」，然后输入文本<code>block</code>，选择<code>Show Network request blocking</code>：</p><p><img src="http://img.smyhvae.com/20210116-0903.png"></p><p>按照上面的步骤添加规则，点击add后，效果如下：</p><p><img src="http://img.smyhvae.com/20210116-0904.png"></p><p>然后，我们切换到控制台的 network面板，并刷新页面：</p><p><img src="http://img.smyhvae.com/20210116-0905.png"></p><p>然后观察这个js资源是不是首屏加载所必须的。但我们也不能就此定论说这个资源一定可以延迟加载，也许它就是想让页面在一开始loading的时候就捕获日志。</p><p>对于我们自己的网站，这个资源是首屏加载必须的吗？一定要在第一时间加载吗？需要根据特定的业务做衡量。</p><h3 id="通过npm运行-Lighthouse工具"><a href="#通过npm运行-Lighthouse工具" class="headerlink" title="通过npm运行 Lighthouse工具"></a>通过npm运行 Lighthouse工具</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装</span><span class="token function">npm</span> <span class="token function">install</span> -g lighthouse<span class="token comment"># 执行</span>lighthouse https://www.jd.com<span class="token comment"># 输出性能检测报告</span>Generating results<span class="token punctuation">..</span>.html output witten to /Users/smyh/Documents/wpt-mac-agent/www.jd.com._2021-01-16_09-00-00.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用-WebPageTest-评估网站性能"><a href="#使用-WebPageTest-评估网站性能" class="headerlink" title="使用 WebPageTest 评估网站性能"></a>使用 WebPageTest 评估网站性能</h2><p>程序员经常说的有句话是：“我这儿能打开啊。我这儿不报错呀。”大家应该都懂这个梗，这就是为什么，我们要借助第三方的测试工具，而不仅仅只是自己电脑上访问正常就ok了。</p><p>我们需要借助 WebPageTest 这样的第三方测试工具，去模拟各种用户的真实场景。</p><h3 id="WebPageTest-使用"><a href="#WebPageTest-使用" class="headerlink" title="WebPageTest 使用"></a>WebPageTest 使用</h3><p>网址：<a href="https://www.webpagetest.org/">https://www.webpagetest.org</a></p><p><img src="http://img.smyhvae.com/20210115-2203.png"></p><p>WebPageTest 在世界各地提供了非常多的服务器，在每个服务器上部署了不同的浏览器，可以让我们有针对性的做测试。如果你做的是一款国际化网站，那更有必要使用一下了。</p><p>我们以JD网站举例：</p><p><img src="http://img.smyhvae.com/20210115-2225.png"></p><p>按照上面的选项配置完成后，点击右侧的「Start Test」即可开始测试。然后等待：</p><p><img src="http://img.smyhvae.com/20210115-2226.png"></p><h3 id="WebPageTest-报告分析"><a href="#WebPageTest-报告分析" class="headerlink" title="WebPageTest 报告分析"></a>WebPageTest 报告分析</h3><p>淘宝网站性能测试报告：</p><ul><li>2020年6月：<a href="https://webpagetest.org/result/200616_JK_78eebda338285ffe0c2e154ca5032839/">https://webpagetest.org/result/200616_JK_78eebda338285ffe0c2e154ca5032839/</a></li><li>2021年1月：<a href="https://www.webpagetest.org/result/210115_DiCB_f1344d732760365151755e89765b2d37/">https://www.webpagetest.org/result/210115_DiCB_f1344d732760365151755e89765b2d37/</a></li></ul><p>JD网站性能测试报告：</p><ul><li>2021年1月：<a href="https://www.webpagetest.org/result/210115_DiGT_8d7370e91230b7d077e40b7aafb485a5/">https://www.webpagetest.org/result/210115_DiGT_8d7370e91230b7d077e40b7aafb485a5/</a></li></ul><p>拿到 WebPageTest 报告之后，我们来看看报告里的几个重点指标。</p><p><img src="http://img.smyhvae.com/20210116_1314.png"></p><p>1、摘要里的参数：（如上图）</p><ul><li>First Byte：第一个请求的响应时间。可以反映后台的处理能力，以及网络回路的情况。</li><li>Start Render：从白屏到首次渲染的时间。</li><li>Speed Index：速度指数。</li><li><strong>Total Blocking Time</strong>：页面被阻塞，导致用户不能交互的累计时间。</li></ul><p><img src="http://img.smyhvae.com/20210116_1315.png"></p><p>2、详情里的参数：<strong>First View</strong>。</p><p>First View展示的是：首次访问时，总的加载时间。这里面提供的瀑布图，比 chrome DevTools里提供的更为详细。</p><p>点击进入 First View 的详情之后，可以看到：所有的资源请求，都会在这里列出来。如下：</p><p><img src="http://img.smyhvae.com/20210116_1316.png"></p><ul><li>page is Interactive：页面在加载的过程中，大部分时间段，用户都是可以交互的。这是非常有用的一个指标。</li><li>Brower Main thread：浏览器主线程的占用情况。可以看看空闲的时间多不多。</li><li>CPU Utilization：CPU的使用情况。</li><li>多张图片的资源请求。</li></ul><p><img src="http://img.smyhvae.com/20210116_1317.png"></p><p>上图中，我们可以看到：多张图片的开始请求时间都是相同的。也就是说，如果让资源做<strong>并行加载</strong>，我们就可以加大地减少加载时间，<strong>最终所消耗的时间就由最大的图片来决定</strong>。这是一个很好的优化技巧，至于具体是怎么实现的，可以自行了解。</p><p>另外，我们看到，有一部分的请求，被高亮出来了：</p><p><img src="http://img.smyhvae.com/20210115-2250.png"></p><p>上面这张图的意思是：302表示重定向，也就是说，这个资源已经不在原来请求的位置了，需要重定向才能找到真实的位置。这个地方其实可以做一个优化：</p><blockquote><p>不需要去访问之前的无效的资源，可以直接去访问重定向后的那个资源。</p></blockquote><h3 id="局域网部署-WebPageTest-工具"><a href="#局域网部署-WebPageTest-工具" class="headerlink" title="局域网部署 WebPageTest 工具"></a>局域网部署 WebPageTest 工具</h3><p>如果我们开发的页面，还没有上线，公网则无法访问。这个时候我们也想通过WebPageTest看看网站的性能，那要怎么办呢？</p><p>我们可以在局域网部署 WebPageTest 工具，具体方法可自行研究。</p><h2 id="chrome插件：PageSpeed-Insights"><a href="#chrome插件：PageSpeed-Insights" class="headerlink" title="chrome插件：PageSpeed Insights"></a>chrome插件：PageSpeed Insights</h2><p>另外，google官方也有一个网址：<a href="https://developers.google.com/speed/pagespeed/insights/?hl=zh-cn">https://developers.google.com/speed/pagespeed/insights/?hl=zh-cn</a></p><p>但是这个网站在使用时，经常挂掉。</p><p>这个插件是2018年的，已经好几年没更新了。大家参考即可。</p><h2 id="实时动态测量性能的API"><a href="#实时动态测量性能的API" class="headerlink" title="实时动态测量性能的API"></a>实时动态测量性能的API</h2><p>Chrome DevTools能够检测各种性能参数，其实也是调用了一些性能相关的标准API。我们自己也可以直接在代码里调用这些api。</p><p>通过 <code>performance</code>对象提供的API，我们可以实时的、精细化、自定义测量性能，获取相应的参数。也可以把这些性能参数，打印到控制台，或者实时上报给后台监控系统。</p><h3 id="performance：获取常见性能参数"><a href="#performance：获取常见性能参数" class="headerlink" title="performance：获取常见性能参数"></a>performance：获取常见性能参数</h3><p>常见性能参数，计算公式如下：</p><blockquote><p>时间戳1减去时间戳2，得到的差值，就是我们想要看到的耗时。</p></blockquote><ul><li>DNS 解析耗时: domainLookupEnd - domainLookupStart</li><li>TCP 连接耗时: connectEnd - connectStart</li><li>SSL 安全连接耗时: connectEnd - secureConnectionStart</li><li>网络请求耗时 (TTFB): responseStart - requestStart</li><li>数据传输耗时: responseEnd - responseStart</li><li>DOM 解析耗时: domInteractive - responseEnd</li><li>资源加载耗时: loadEventStart - domContentLoadedEventEnd</li><li>First Byte时间: responseStart - domainLookupStart</li><li>白屏时间: responseEnd - fetchStart</li><li>首次可交互时间（<strong>TTI</strong>）: domInteractive - fetchStart</li><li>DOM Ready 时间: domContentLoadEventEnd - fetchStart</li><li>页面完全加载时间: loadEventStart - fetchStart</li><li>http 头部大小： transferSize - encodedBodySize</li><li>重定向次数：performance.navigation.redirectCount</li><li>重定向耗时: redirectEnd - redirectStart</li></ul><p>比如说，如果我们想要获取 TTI参数，代码可以这样写：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 计算一些关键的性能指标</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// Time to Interactive</span>    <span class="token keyword">let</span> timing <span class="token operator">=</span> performance<span class="token punctuation">.</span><span class="token function">getEntriesByType</span><span class="token punctuation">(</span><span class="token string">'navigation'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>timing<span class="token punctuation">.</span>domInteractive<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>timing<span class="token punctuation">.</span>fetchStart<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> diff <span class="token operator">=</span> timing<span class="token punctuation">.</span>domInteractive <span class="token operator">-</span> timing<span class="token punctuation">.</span>fetchStart<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"TTI: "</span> <span class="token operator">+</span> diff<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打印 TTI 参数</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="观察长任务"><a href="#观察长任务" class="headerlink" title="观察长任务"></a>观察长任务</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PerformanceObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">list</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> entry <span class="token keyword">of</span> list<span class="token punctuation">.</span><span class="token function">getEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token punctuation">{</span>entryTypes<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'longtask'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="页面可见性的状态监听"><a href="#页面可见性的状态监听" class="headerlink" title="页面可见性的状态监听"></a>页面可见性的状态监听</h3><p>使用场景举例：</p><ul><li>比如说，我们正在做一个视频网站（或者游戏页面）。如果用户当前没有在看这个视频，而是切换别的页面了。此时，我们可以对视频做节流等处理，避免造成性能的浪费。等用户再回到当前页面之后，再恢复之前的状态。</li><li>当设备进入待机模式时（用户按下电源键关闭屏幕），网站想要关闭设备声音。</li></ul><p>针对这种场景，我们可以使用<code>visibilitychange</code>进行监听：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 见面可见性的状态监听</span><span class="token keyword">let</span> vEvent <span class="token operator">=</span> <span class="token string">'visibilitychange'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>webkitHidden <span class="token operator">!=</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// webkit prefix detected</span>    vEvent <span class="token operator">=</span> <span class="token string">'webkitvisibilitychange'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">visibilityChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>hidden <span class="token operator">||</span> document<span class="token punctuation">.</span>webkitHidden<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Web page is hidden."</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Web page is visible."</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>vEvent<span class="token punctuation">,</span> visibilityChanged<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="网络状况监听"><a href="#网络状况监听" class="headerlink" title="网络状况监听"></a>网络状况监听</h3><p>使用场景举例：</p><ul><li>高清图片按需加载：如果用户的网络条件较好，就加载高清图片资源；如果网络条件不好，就加载文件较小的图片资源。</li></ul><p>代码举例：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> connection <span class="token operator">=</span> navigator<span class="token punctuation">.</span>connection <span class="token operator">||</span> navigator<span class="token punctuation">.</span>mozConnection <span class="token operator">||</span> navigator<span class="token punctuation">.</span>webkitConnection<span class="token punctuation">;</span><span class="token keyword">var</span> type <span class="token operator">=</span> connection<span class="token punctuation">.</span>effectiveType<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">updateConnectionStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// type是之前的网络状态，connection.effectiveType是当前最新的网络状态</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Connection type changed from "</span> <span class="token operator">+</span> type <span class="token operator">+</span> <span class="token string">" to "</span> <span class="token operator">+</span> connection<span class="token punctuation">.</span>effectiveType<span class="token punctuation">)</span><span class="token punctuation">;</span>  type <span class="token operator">=</span> connection<span class="token punctuation">.</span>effectiveType<span class="token punctuation">;</span><span class="token punctuation">}</span>connection<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">,</span> updateConnectionStatus<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印结果举例：</p><pre class="line-numbers language-none"><code class="language-none">Connection type changed from 4g to 3g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="检测元素的可见状态，做曝光埋点"><a href="#检测元素的可见状态，做曝光埋点" class="headerlink" title="检测元素的可见状态，做曝光埋点"></a>检测元素的可见状态，做曝光埋点</h3><p>我们可以通过<code>IntersectionObserver：</code>这个API来检测元素的可见状态：</p><p><img src="http://img.smyhvae.com/20210117_1635.png"></p><p>做曝光上报的埋点：判断某个DOM（或者某个楼层）是否出现在视窗中，出现了就收集数据上报给服务端。</p><p>本质就是要计算某一元素和另一元素（视窗）的相对位置/相对可视状态，然后进行一些操作（一般是上报给服务端）。</p><p>参考：</p><ul><li><a href="https://cnodejs.org/topic/5e0a0edb0696c446bf650dec">前端埋点之曝光实现</a></li><li><a href="https://github.com/Hugohui/vueTrackSdk">点击埋点和曝光卖点的封装</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能分析和指标 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-装饰器模式</title>
      <link href="/2022/06/2012915.html"/>
      <url>/2022/06/2012915.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Decorator（装饰器模式）"><a href="#Decorator（装饰器模式）" class="headerlink" title="Decorator（装饰器模式）"></a>Decorator（装饰器模式）</h1><p>Decorator（装饰器模式）属于结构型模式，是一种拓展对象额外功能的设计模式，别名 <code>wrapper</code>。</p><p><strong>意图：动态地给一个对象添加一些额外的职责。就增加功能来说，Decorator 模式相比生成子类更为灵活。</strong></p><h2 id="举例子"><a href="#举例子" class="headerlink" title="举例子"></a>举例子</h2><p>如果看不懂上面的意图介绍，没有关系，设计模式需要在日常工作里用起来，结合例子可以加深你的理解，下面我准备了三个例子，让你体会什么场景下会用到这种设计模式。</p><h3 id="相框"><a href="#相框" class="headerlink" title="相框"></a>相框</h3><p>照片 + 相框 = 带相框的照片，这背后就是一种装饰器模式：照片具有看的功能，相框具有装饰功能，在你看照片的基础上，还能看到精心设计的相框，增加了美感，同时相框还可以增加照片的保存时间与安全性。</p><p>相框与照片是一种组合关系，任何照片都可以放到相框中，而不是每个照片生成一个特定的相框，显然，组合的方式更加灵活。</p><h3 id="带有缓存的文件读写"><a href="#带有缓存的文件读写" class="headerlink" title="带有缓存的文件读写"></a>带有缓存的文件读写</h3><p>假设我们有一个类 <code>FileIO</code> 用来读写文件，但是没有缓存能力，此时是新建一个 <code>CachedFileIO</code> 子类好，还是创建一个 <code>CachedIO</code>?</p><p>一眼看上去好像 <code>CachedFileIO</code> 用起来更方便，而 <code>CachedIO</code> 的用法是 <code>new CachedIO(new FileIO())</code> 稍微麻烦一些，但如果我们增加一个网络读写类 <code>NetworkIO</code>，一个数据库读写类 <code>DBIO</code> 呢？</p><p>显然，继承的方式会使子类数量极速膨胀，而组合的方式则非常灵活，生成一个支持缓存的网络读写器，只需要 <code>new CachedIO(new NetworkIO())</code> 即可，这就是组合灵活的地方。</p><p>当然，为了实现这个能力，<code>CachedIO</code> 需要与 <code>FileIO</code>、<code>CachedFileIO</code>、<code>CachedIO</code> 继承自同一个类，具备相同的接口。</p><h3 id="搭建平台的组件-wrapper"><a href="#搭建平台的组件-wrapper" class="headerlink" title="搭建平台的组件 wrapper"></a>搭建平台的组件 wrapper</h3><p>装饰器模式别名也叫 <code>wrapper</code>，<code>wrapper</code> 也经常在前端搭建场景中遇到，当搭建平台加载一个组件时，希望拓展其基础能力，一般会使用 <code>wrapper</code> 层对组件进行嵌套，<code>wrapper</code> 层就是在不改变 API 的基础上，对第三方组件进行增强。</p><h2 id="意图解释"><a href="#意图解释" class="headerlink" title="意图解释"></a>意图解释</h2><p><strong>意图：动态地给一个对象添加一些额外的职责。就增加功能来说，Decorator 模式相比生成子类更为灵活。</strong></p><p>不同于继承，组合可以在运行时进行，所以称之为 “动态添加”，这里的 “额外职责” 泛指一切功能，比如在按钮点击时进行一些 log 日志的打印，在绘制 text 文本框时，额外绘制一个滚动条和边框等等。</p><p>“就增加功能来说，Decorator 模式相比生成子类更为灵活” 这句话的含义是，组合比继承更灵活，当可拓展的功能很多时，继承方案会产生大量的子类，而组合可以提前写好处理函数，在需要时动态构造，显然是更灵活的。</p><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><img width="600" src="https://img.alicdn.com/tfs/TB1cmhe3FY7gK0jSZKzXXaikpXa-1624-688.png"><p><code>ConcreteComponent</code> 指的是需要被装饰的组件，可以看到，装饰器 <code>Decorator</code> 与他都继承同一个类，这样能保证 API 的一致，才保证无论装饰多少层，始终符合 <code>Component</code> 类型。</p><p>装饰器如果有多种，就要将 <code>Decorator</code> 申明为抽象类，<code>ConcreteDecoratorA</code>、<code>ConcreteDecoratorB</code> 分别实现它们，如果只有一种装饰器，可以退化到 <code>Decorator</code> 自身就是一种实现。</p><h2 id="代码例子"><a href="#代码例子" class="headerlink" title="代码例子"></a>代码例子</h2><p>下面例子使用 typescript 编写。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token comment">// 具有点击事件</span>  <span class="token keyword">public</span> <span class="token function-variable function">onClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Decorator</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> _component  <span class="token function">constructor</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_component <span class="token operator">=</span> component  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function-variable function">onClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'打点'</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_component<span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Component</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 一个普通的点击</span>component<span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> wrapperComponent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Decorator</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token comment">// 一个具有打点功能的点击</span>wrapperComponent<span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实方法很简单，通过组合，我们得到了一个能力更强的组件，而实现的方式就是利用构造函数保存组件实例，并在复写函数时，增加一些增强实现。</p><h2 id="弊端"><a href="#弊端" class="headerlink" title="弊端"></a>弊端</h2><p>装饰器的问题也是组合的问题，过多的组合会导致：</p><ul><li>组合过程的复杂，要生成过多的对象。</li><li>包装器层次增多，会增加调试成本，我们比较难追溯到一个 bug 是在哪一层包装导致的。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>装饰器模式是非常常用的模式，Decorator 是一个透明的包装，只要保证包装的透明性，就可以最大限度发挥装饰器模式的优势。</p><p>最后总结一个装饰器应用图：</p><img width="500" src="https://img.alicdn.com/tfs/TB1wlpgqPMZ7e4jSZFOXXX7epXa-1232-478.png"><blockquote><p>讨论地址是：<a href="https://github.com/dt-fe/weekly/issues/286">精读《设计模式 - Decorator 装饰器模式》· Issue #286 · dt-fe/weekly</a></p></blockquote><p><strong>如果你想参与讨论，请 <a href="https://github.com/dt-fe/weekly">点击这里</a>，每周都有新的主题，周末或周一发布。前端精读 - 帮你筛选靠谱的内容。</strong></p><blockquote><p>版权声明：自由转载-非商用-非衍生-保持署名（<a href="https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">创意共享 3.0 许可证</a>）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 装饰器模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-解释器模式</title>
      <link href="/2022/06/1663360.html"/>
      <url>/2022/06/1663360.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Interpreter（解释器模式）"><a href="#Interpreter（解释器模式）" class="headerlink" title="Interpreter（解释器模式）"></a>Interpreter（解释器模式）</h1><p>Interpreter（解释器模式）属于行为型模式。</p><p><strong>意图：给定一个语言，定义它的文法的一种表示，并定义一个解释器。这个解释器使用该表示来解释语言中的句子。</strong></p><p>任何一门语言，无论是日常语言还是编程语言都有明确的语法，只要有语法就可以用文法描述，并通过语法解释器将字符串的语言结构化。</p><h2 id="举例子"><a href="#举例子" class="headerlink" title="举例子"></a>举例子</h2><p>如果看不懂上面的意图介绍，没有关系，设计模式需要在日常工作里用起来，结合例子可以加深你的理解，下面我准备了三个例子，让你体会什么场景下会用到这种设计模式。</p><h3 id="SQL-解释器"><a href="#SQL-解释器" class="headerlink" title="SQL 解释器"></a>SQL 解释器</h3><p>SQL 是一种描述语言，所以也适用于解释器模式。不同的 SQL 方言有不同的语法，我们可以根据某种特定的 SQL 方言定制一套适配它的文法表达式，再利用 antlr 解析为一颗语法书。在这个例子中，antlr 就是解释器。</p><h3 id="代码编译器"><a href="#代码编译器" class="headerlink" title="代码编译器"></a>代码编译器</h3><p>程序语言也因为其天然是字符串的原因，和 SQL、日常语言都类似，需要一种模式解析后才能工作。不同的语言有不同的文法表示，我们只需要一个类似 antlr 的通用解释器，通过传入不同的文法表示，返回不同的对象结构。</p><h3 id="自然语言处理"><a href="#自然语言处理" class="headerlink" title="自然语言处理"></a>自然语言处理</h3><p>自然语言处理也是解释器的一种，首先自然语言处理一般只能处理日常语言的子集，因此先定义好支持的范围，再定义一套分词系统与文法表达式，并将分词后的结果传入灌入了此文法表达式的解释器，这样解释器可以返回结构化数据，根据结构化数据再进行分析与加工。</p><h2 id="意图解释"><a href="#意图解释" class="headerlink" title="意图解释"></a>意图解释</h2><p><strong>意图：给定一个语言，定义它的文法的一种表示，并定义一个解释器。这个解释器使用该表示来解释语言中的句子。</strong></p><p>对于给定的语言，可以是 SQL、代码或自然语言，“定义它的文法的一种表示” 即文法可以有多种表示，只需定义一种。要注意的是，不同文法执行效率会有差异。</p><p>“并定义一个解释器”，这个解释器就是类似 antlr 的东西，传给它一个文法表达式，就可以解析句子了。即：解释器(语言, 文法) = 抽象语法树。</p><p>我们可以直接把文法定义耦合到解释器里，但这样做会导致语法复杂时，解释器难以维护。比较好的方式是定义一套与解释器解耦的文法表达式，通过预处理器最终生成解释器。</p><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><img width="600" src="https://img.alicdn.com/imgextra/i4/O1CN019y6R201yinq7xjJEK_!!6000000006613-2-tps-1530-776.png"><p>Context 是其他上下文变量，AbstractExpression 是抽象语法表达式。</p><p>可以看到，TerminalExpression（终结符）与 NonterminalExpression(非终结符) 都继承于 AbstractExpression，终结符指的是没有后续展开的符号，非终结符相反，所以非终结符又指向了 AbstractExpression，如此递归。</p><h2 id="代码例子"><a href="#代码例子" class="headerlink" title="代码例子"></a>代码例子</h2><p>下面例子使用 typescript 编写。</p><p>假设我们要实现以下文法：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">sum    ::= number + numbernumber ::= 1 | 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>表达一个最简单的加法文法，其中加法表达式 sum 和 number 都是非终结符，而 +、1、2 是终结符。这个例子只能做到 1 与 2 的加法，通过这个简单例子，了解一下解释器模式的精髓吧：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 抽象表达式</span><span class="token keyword">class</span> <span class="token class-name">AbstractExpression</span> <span class="token punctuation">{</span>  <span class="token function">interpret</span> <span class="token punctuation">(</span>text<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 终结符表达式</span><span class="token keyword">class</span> <span class="token class-name">TerminalExpression</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractExpression</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>values<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>values <span class="token operator">=</span> values  <span class="token punctuation">}</span>  <span class="token function">interpret</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 值必须是其中之一</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>values<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 非终结符表达式</span><span class="token keyword">class</span> <span class="token class-name">NonterminalExpression</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractExpression</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>left<span class="token operator">:</span> TerminalExpression<span class="token punctuation">,</span> right<span class="token operator">:</span> TerminalExpression<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left    <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right  <span class="token punctuation">}</span>  <span class="token function">interpret</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 必须包含 + 号</span>      <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> splitValue <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'+'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">interpret</span><span class="token punctuation">(</span>splitValue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">interpret</span><span class="token punctuation">(</span>splitValue<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 调用</span><span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> terminal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TerminalExpression</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">const</span> add <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AddExpression</span><span class="token punctuation">(</span>terminal<span class="token punctuation">,</span> terminal<span class="token punctuation">)</span>add<span class="token punctuation">.</span><span class="token function">interpreter</span><span class="token punctuation">(</span><span class="token string">"1 + 1"</span><span class="token punctuation">)</span> <span class="token comment">// true</span>add<span class="token punctuation">.</span><span class="token function">interpreter</span><span class="token punctuation">(</span><span class="token string">"1 + 2"</span><span class="token punctuation">)</span> <span class="token comment">// true</span>add<span class="token punctuation">.</span><span class="token function">interpreter</span><span class="token punctuation">(</span><span class="token string">"1 + 3"</span><span class="token punctuation">)</span> <span class="token comment">// false</span>add<span class="token punctuation">.</span><span class="token function">interpreter</span><span class="token punctuation">(</span><span class="token string">"2 - 1"</span><span class="token punctuation">)</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>遇到非终结符则继续调用，只有终结符才能直接判断，原理很简单。</p><h2 id="弊端"><a href="#弊端" class="headerlink" title="弊端"></a>弊端</h2><p>上面的例子是比较低效场景，因为当语法复杂后，类的数目会明显增多，难以维护，此时需要用一个通用语法解析器，了解更多可以看笔者之前的文章：<a href="https://github.com/dt-fe/weekly/blob/v2/066.%E7%B2%BE%E8%AF%BB%E3%80%8A%E6%89%8B%E5%86%99%20SQL%20%E7%BC%96%E8%AF%91%E5%99%A8%20-%20%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E3%80%8B.md">精读《手写 SQL 编译器 - 语法分析》</a> 系列。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>解释器是一种思维，将复杂语法解析抽象为一个个独立的终结符与非终结符各自判断，只要每个文法自己的判断做好了，剩下的工作就是组装文法。</p><p>这种将单个逻辑判断与文法组装解耦的做法，可以使逻辑判断与文法组装独立变换，使复杂语法解析转化为一个个具体的简单问题。</p><blockquote><p>版权声明：自由转载-非商用-非衍生-保持署名（<a href="https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">创意共享 3.0 许可证</a>）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 解释器模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-原型模式</title>
      <link href="/2022/06/1141018.html"/>
      <url>/2022/06/1141018.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Prototype（原型模式）"><a href="#Prototype（原型模式）" class="headerlink" title="Prototype（原型模式）"></a>Prototype（原型模式）</h1><p>Prototype（原型模式）属于创建型模式，既不是工厂也不是直接 New，而是以拷贝的方式创建对象。</p><p><strong>意图：用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</strong></p><h2 id="举例子"><a href="#举例子" class="headerlink" title="举例子"></a>举例子</h2><p>如果看不懂上面的意图介绍，没有关系，设计模式需要在日常工作里用起来，结合例子可以加深你的理解，下面我准备了三个例子，让你体会什么场景下会用到这种设计模式。</p><h3 id="做钥匙"><a href="#做钥匙" class="headerlink" title="做钥匙"></a>做钥匙</h3><p>很显然，为了房屋安全，要尽量做到一把钥匙只能开一扇门，每把钥匙结构都多多少少不一样，却又很相似，做钥匙的人按照你给的钥匙一模一样做一个新的，这属于什么模式呢？</p><h3 id="两种状态表"><a href="#两种状态表" class="headerlink" title="两种状态表"></a>两种状态表</h3><p>当网站做不停机维护时，假设维护内容是给每个高级会员账户多打 100 元现金，现在需要改数据库表。已知：</p><ol><li>数据库表有几千万条数据，其中高级会员有几千位，为了方便调用已经缓存在中间层了，且数据库对应 ID 更新后对应缓存也会更新。</li><li>几千条数据修改语句执行完需要几分钟，这几分钟内无法接受用户数据不同步的问题。</li></ol><p>一种常见的做法是，我们生成一份高级会员列表的拷贝，代替数据库缓存的结果，数据库只要读到对应会员 ID 就从拷贝列表中获取，数据表新增一列状态标志，操作完后这个拷贝移除，更新高级会员缓存。</p><p>但是如何生成高级会员列表拷贝呢？如果直接从几千万条用户数据中重新查询，会有较高的数据库查询成本。</p><h3 id="模版组件"><a href="#模版组件" class="headerlink" title="模版组件"></a>模版组件</h3><p>通用搭建系统中，我们可以将某个拖拽到页面的区块设置为 “模版”，这个模版可以作为一个新组件被重新拖拽到任意位置，实例化任意次。实际上，这是一种分段式复制粘贴，你会如何实现这个功能呢？</p><h2 id="意图解释"><a href="#意图解释" class="headerlink" title="意图解释"></a>意图解释</h2><p>解决上面问题的办法都很简单，就是基于已有对象进行复制即可，效率比 New 一个，或者工厂模式都要高。</p><p><strong>意图：用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</strong></p><p>所谓原型实例，就是被选为拷贝模版的那个对象，比如做钥匙例子中，你给老板的样板钥匙；两种状态表中的已有缓存高级会员列表；模版组件中选中的那个组件。然后，通过拷贝这些原型创建你想要的对象即可。</p><p>我们抽象思考一下，如果每把钥匙都遵循 <code>Prototype</code> 接口，提供了 <code>clone()</code> 方法以复制自己，那就可以快速复制任意一把钥匙。钥匙工厂可无法解决每把钥匙不一样的问题，我们要的就是和某个钥匙一模一样的副本，复制一份钥匙最简单。</p><p>高级会员状态表例子中，查询数据库的成本是高昂的，但如果仅仅复制已经查询好的列表，时间可以忽略不计，因此最经济的方案是直接复制，而不是通过工厂模式重新连接数据库并执行查询。</p><p>模版组件更是如此，我们根本没有定义那么多组件实例的基类，只要每个组件提供一个 <code>clone()</code> 函数，就可以立即复制任意组件实例，这无疑是最经济实惠的方案。</p><p>看到这里，你应该知道了，原型模式的精髓是对象要提供 <code>clone()</code> 方法，而这个 <code>clone()</code> 方法实现难度有高有低。</p><p>一般来说，原型模式的拷贝建议用深拷贝，毕竟新对象最好不要影响到旧对象，<strong>但是在深拷贝性能问题较大的情况下，可以考虑深浅拷贝结合，也就是将在新对象中，不会修改的数据使用浅拷贝，可能被修改的数据使用深拷贝。</strong></p><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><img width="800" src="https://img.alicdn.com/tfs/TB1roQlZWL7gK0jSZFBXXXZZpXa-1328-596.png"><p><code>Client</code> 是发出指令的客户端，<code>Prototype</code> 是一个接口，描述了一个对象如何克隆自身，比如必须拥有 <code>clone()</code> 方法，而 <code>ConcretePrototype</code> 就是克隆具体的实现，不同对象有不同的实现来拷贝自身。</p><h2 id="代码例子"><a href="#代码例子" class="headerlink" title="代码例子"></a>代码例子</h2><p>下面例子使用 typescript 编写。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Component</span> <span class="token keyword">implements</span> <span class="token class-name">Prototype</span> <span class="token punctuation">{</span>  <span class="token comment">/**   * 组件名   */</span>  <span class="token keyword">private</span> name<span class="token operator">:</span> <span class="token builtin">string</span>  <span class="token comment">/**   * 组件版本   */</span>  <span class="token keyword">private</span> version<span class="token operator">:</span> <span class="token builtin">string</span>  <span class="token comment">/**   * 拷贝自身   */</span>  <span class="token keyword">public</span> <span class="token function-variable function">clone</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 构造函数省略了，大概就是传递 name 和 version</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Component</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>version<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以看到，实现了 <code>Prototype</code> 接口的 <code>Component</code> 必须实现 <code>clone</code> 方法，这样任意组件在执行复制时，就可以直接调用 <code>clone</code> 函数，而不用关心每个组件不同的实现方式了。</p><p>从这就能看出，原型模式与 Factory 与 Builder 模式还是有类似之处的，在隐藏创建对象细节这一点上。</p><p>使用的时候，我们就可以这样创建一个新对象：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> newComponent <span class="token operator">=</span> oldComponent<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里有两个注意点：一般来说，<strong>如果要二次修改生成的对象，不建议给 <code>clone</code> 函数加参数，因为这样会导致接口的不一致。</strong> 我们可以为对象实例提供一些 <code>set</code> 函数进行二次修改。另外，<code>clone</code> 函数要考虑性能，就像前面说过的，可以考虑深浅拷贝结合的方式，同时要注意当对象存在引用关系甚至循环引用时，甚至不一定能实现拷贝函数。</p><h2 id="弊端"><a href="#弊端" class="headerlink" title="弊端"></a>弊端</h2><p>每个设计模式必有弊端，但就像每一期都说的，有弊端不代表设计模式不好用，而是指在某种场景喜爱存在问题，我们只要规避这些场景，在合理的场景使用对应设计模式即可。</p><p>原型模式的弊端：</p><ol><li>每个类都要实现 <code>clone</code> 方法，对类的实现是有一定入侵的，要修改已有类时，违背了开闭原则。</li><li>当类又调用了其他对象时，如果要实现深拷贝，需要对应对象也实现 <code>clone</code> 方法，整体链路可能会特别长，实现起来比较麻烦。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>原型模式一般与工厂模式搭配使用，一般工厂方法接收一个符合原型模式的实例，就可以调用它的 <code>clone</code> 函数创建返回新对象啦。</strong> 代码大概是这样：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// buildComponentFactory 内部通过 targetComponent.clone() 创建对象，而不是 New 或者调用其他工厂函数。</span><span class="token keyword">const</span> newComponent <span class="token operator">=</span> <span class="token function">buildComponentFactory</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Component</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最后来一张图快速理解原型模式：</p><img width="600" src="https://img.alicdn.com/tfs/TB1hBIdm6MZ7e4jSZFOXXX7epXa-982-486.png"><blockquote><p>讨论地址是：<a href="https://github.com/dt-fe/weekly/issues/277">精读《设计模式 - Prototype 原型模式》· Issue #277 · dt-fe/weekly</a></p></blockquote><p><strong>如果你想参与讨论，请 <a href="https://github.com/dt-fe/weekly">点击这里</a>，每周都有新的主题，周末或周一发布。前端精读 - 帮你筛选靠谱的内容。</strong></p><blockquote><p>版权声明：自由转载-非商用-非衍生-保持署名（<a href="https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">创意共享 3.0 许可证</a>）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原型模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>纯css文字截断</title>
      <link href="/2022/06/0564159.html"/>
      <url>/2022/06/0564159.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>最近在做响应式系统设计的时候遇到需要对标题进行多行文字截取的效果，如下图：</p><p><img src="https://pic4.zhimg.com/v2-c4a332801c13ba08b58172464485dcdb_r.jpg" alt="img"></p><p>看似十分简单的标题截断效果，但是竟然没有一个统一 CSS 属性实现标准，需要用到一些奇淫妙计来实现，一般来说，在做这样文字截断效果时我们更多是希望：</p><ol><li>兼容性好，对各大主流浏览器有好的支持</li><li>响应式截断，根据不同宽度做出调整</li><li>文本超出范围才显示省略号，否则不显示省略号</li><li>省略号位置显示刚好</li></ol><p>基于上述的准则，下面我就讲介绍各种技巧实现截断效果，并根据上述的评判标准得出最优解。(<strong>代码我都传到 jsfiddle 平台，可点击 demo 地址查看</strong>)</p><h2 id="单行文本截断-text-overflow"><a href="#单行文本截断-text-overflow" class="headerlink" title="单行文本截断 text-overflow"></a><strong>单行文本截断 text-overflow</strong></h2><p>文本溢出我们经常用到的应该就是 text-overflow: ellipsis 了，相信大家也很熟悉，只需轻松几行代码就可以实现单行文本截断。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">{</span>  <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现效果：<a href="https://link.zhihu.com/?target=https://jsfiddle.net/lindz/0yap1p2b/1/">demo 地址</a></p><p>属性浏览器原生支持，各大浏览器兼容性好，缺点就是只支持单行文本截断，并不支持多行文本截取。</p><p>适用场景：单行文字截断最简单实现，效果最好，放心使用。</p><p>如果是多行文字截取效果，实现起来就没有那么轻松。</p><h2 id="webkit-line-clamp-实现"><a href="#webkit-line-clamp-实现" class="headerlink" title="-webkit-line-clamp 实现"></a><strong>-webkit-line-clamp 实现</strong></h2><p>先介绍第一种方式，就是通过 -webkit-line-clamp 属性实现。具体的方式如下：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span>  <span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span> vertical<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它需要和 display、-webkit-box-orient 和 overflow 结合使用：</p><ul><li>display: -webkit-box; 必须结合的属性，将对象作为弹性伸缩盒子模型显示。</li><li>-webkit-box-orient; 必须结合的属性，设置或检索伸缩盒对象的子元素的排列方式</li><li>text-overflow: ellipsis; 可选属性，可以用来多行文本的情况下，用省略号“…”隐藏超出范围的文本。</li></ul><p>实现效果：<a href="https://link.zhihu.com/?target=https://jsfiddle.net/lindz/eodpygu9/7/">demo 地址</a></p><p>从效果上来看，它的优点有：</p><ol><li>响应式截断，根据不同宽度做出调整</li><li>文本超出范围才显示省略号，否则不显示省略号</li><li>浏览器原生实现，所以省略号位置显示刚好</li></ol><p>但是缺点也是很直接，因为 -webkit-line-clamp 是一个不规范的属性，它没有出现在 CSS 规范草案中。也就是说只有 webkit 内核的浏览器才支持这个属性，像 Firefox, IE 浏览器统统都不支持这个属性，浏览器兼容性不好。</p><p>使用场景：多用于移动端页面，因为移动设备浏览器更多是基于 webkit 内核，除了兼容性不好，实现截断的效果不错。</p><h2 id="定位元素实现多行文本截断"><a href="#定位元素实现多行文本截断" class="headerlink" title="定位元素实现多行文本截断"></a><strong>定位元素实现多行文本截断</strong></h2><p>另外还有一种靠谱简单的做法就是设置相对定位的容器高度，用包含省略号(…)的元素模拟实现，实现方式如下：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p</span> <span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 18px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 36px<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">p::after</span> <span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">"..."</span><span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span>bold<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>    <span class="token property">bottom</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span>0 20px 1px 45px<span class="token punctuation">;</span>        <span class="token comment">/* 为了展示效果更好 */</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-webkit-gradient</span><span class="token punctuation">(</span>linear<span class="token punctuation">,</span> left top<span class="token punctuation">,</span> right top<span class="token punctuation">,</span> <span class="token function">from</span><span class="token punctuation">(</span><span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">to</span><span class="token punctuation">(</span>white<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">color-stop</span><span class="token punctuation">(</span>50%<span class="token punctuation">,</span> white<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-moz-linear-gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">,</span> white 50%<span class="token punctuation">,</span> white<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-o-linear-gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">,</span> white 50%<span class="token punctuation">,</span> white<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-ms-linear-gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">,</span> white 50%<span class="token punctuation">,</span> white<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">,</span> white 50%<span class="token punctuation">,</span> white<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现原理很好理解，就是通过伪元素绝对定位到行尾并遮住文字，再通过 overflow: hidden 隐藏多余文字。</p><p>实现效果：<a href="https://link.zhihu.com/?target=https://jsfiddle.net/lindz/6aqnye4u/2/">demo 地址</a></p><p>从实现效果来看，它所具备的优点：</p><ol><li>兼容性好，对各大主流浏览器有好的支持</li><li>响应式截断，根据不同宽度做出调整</li></ol><p>但是它无法识别文字的长短，即文本超出范围才显示省略号，否则不显示省略号。还有因为是我们人为地在文字末尾添加一个省略号效果，就会导致它跟文字其实没有贴合的很紧密，遇到这种情况可以通过添加 word-break: break-all; 使一个单词能够在换行时进行拆分。</p><p>适合场景：文字内容较多，确定文字内容一定会超过容器的，那么选择这种方式不错。</p><h2 id="float-特性实现多行文本截断"><a href="#float-特性实现多行文本截断" class="headerlink" title="float 特性实现多行文本截断"></a><strong>float 特性实现多行文本截断</strong></h2><p>回到一开始我要做的内容是多行标题文字截取效果，显然是无法控制标题的长度的，显然是无法使用上述的方式。回到事情的本质来看：我们希望 CSS 能够有一种属性，能够在文字溢出的情况下显示省略号，不溢出时不显示省略号。(两种形式，两种效果)</p><p>正当我以为 CSS 已经无能为力，只能通过 JS 去实现的时候，后来看到了一个方法非常巧妙，而且能够满足上述提到的所有准则，下面我就介绍如何通过 float 特性实现多行文本截断效果。</p><p>基本原理：</p><p><img src="https://pic4.zhimg.com/80/v2-6c0839e2c8116de6933e6afe7865ddbf_720w.jpg" alt="img"></p><p>有个三个盒子 div，粉色盒子左浮动，浅蓝色盒子和黄色盒子右浮动，</p><ol><li><strong>当浅蓝色盒子的高度低于粉色盒子，黄色盒子仍会处于浅蓝色盒子右下方。</strong></li><li><strong>如果浅蓝色盒子文本过多，高度超过了粉色盒子，则黄色盒子不会停留在右下方，而是掉到了粉色盒子下。</strong></li></ol><p>好了，这样两种状态的两种展示形式已经区分开了，那么我们可以将黄色盒子进行相对定位，将内容溢出的黄色盒子移动到文本内容右下角，而未溢出的则会被移到外太空去了，只要我们使用 overflow: hidden 就可以隐藏掉。</p><p><img src="https://pic2.zhimg.com/v2-7d64e3bcccc01f2a65b2e80f56a39b21_r.jpg" alt="img"></p><p>基本原理就是这样，我们可以将浅蓝色区域想象成标题，黄色区域想象为省略号效果。那么你可能会觉得粉色盒子占了空间，那岂不是标题会整体延后了吗，这里可以通过 margin 的负值来出来，设置浅蓝色盒子的 margin-left 的负值与粉色盒子的宽度相同，标题也能正常显示。</p><p>那么我们将前面的 DOM 结构简化下，变成下面这样：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Dignissimos labore sit vel itaque delectus atque quos magnam assumenda quod architecto perspiciatis animi.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>刚才的粉色盒子和黄色盒子都可以用伪元素来代替。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.wrap</span> <span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.wrap .text</span> <span class="token punctuation">{</span>  <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> -5px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">word-break</span><span class="token punctuation">:</span> break-all<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.wrap::before</span> <span class="token punctuation">{</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.wrap::after</span> <span class="token punctuation">{</span>  <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"..."</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>  <span class="token comment">/* 为三个省略号的宽度 */</span>  <span class="token property">width</span><span class="token punctuation">:</span> 3em<span class="token punctuation">;</span>  <span class="token comment">/* 使盒子不占位置 */</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> -3em<span class="token punctuation">;</span>  <span class="token comment">/* 移动省略号位置 */</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> -20px<span class="token punctuation">;</span>  <span class="token property">padding-right</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现效果：<a href="https://link.zhihu.com/?target=https://jsfiddle.net/lindz/95h0edp6/35/">demo 地址</a></p><p>这里我目前看到最巧妙的方式了。只需要支持 CSS 2.1 的特性就可以了，它的优点有：</p><ol><li>兼容性好，对各大主流浏览器有好的支持</li><li>响应式截断，根据不同宽度做出调整</li><li>文本超出范围才显示省略号，否则不显示省略号</li></ol><p>至于缺点，因为我们是模拟省略号，所以显示位置有时候没办法刚刚好，所以可以考虑：</p><ol><li>加一个渐变效果，贴合文字，就像上述 demo 效果一样</li><li>添加 word-break: break-all; 使一个单词能够在换行时进行拆分，这样文字和省略号贴合效果更佳。</li></ol><p>这个方法应该是我看到最好的用纯 CSS 处理的方式了，如果你有更好的方法，欢迎留言交流！</p><p><a href="https://zhuanlan.zhihu.com/p/34326190">转载</a></p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css文字截断 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-抽象工厂方法</title>
      <link href="/2022/06/016267.html"/>
      <url>/2022/06/016267.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Abstract-Factory（抽象工厂）"><a href="#Abstract-Factory（抽象工厂）" class="headerlink" title="Abstract Factory（抽象工厂）"></a>Abstract Factory（抽象工厂）</h1><p>Abstract Factory（抽象工厂）属于创建型模式，工厂类模式抽象程度从低到高分为：简单工厂模式 -&gt; 工厂模式 -&gt; 抽象工厂模式。</p><p><strong>意图：提供一个接口以创建一系列相关或相互依赖的对象，而无须指定它们具体的类。</strong></p><h2 id="举例子"><a href="#举例子" class="headerlink" title="举例子"></a>举例子</h2><p>如果看不懂上面的意图介绍，没有关系，设计模式需要在日常工作里用起来，结合例子可以加深你的理解，下面我准备了三个例子，让你体会什么场景下会用到这种设计模式。</p><h3 id="汽车工厂"><a href="#汽车工厂" class="headerlink" title="汽车工厂"></a>汽车工厂</h3><p>我们都知道汽车有很多零部件，随着工业革命带来的分工，很多零件都可以被轻松替换。但实际生活中我们消费者不愿意这样，我们希望买来的宝马车所包含的零部件都是同一系列的，以保证最大的匹配度，从而带来更好的性能与舒适度。</p><p>所以消费者不愿意到轮胎工厂、方向盘工厂、车窗工厂去一个个采购，而是将需求提给了宝马工厂这家抽象工厂，由这家工厂负责组装。那你是这家工厂的老板，已知汽车的组成部件是固定的，只是不同配件有不同的型号，分别来自不同的制造厂商，你需要推出几款不同组合的车型来满足不同价位的消费者，你会怎么设计？</p><h3 id="迷宫游戏"><a href="#迷宫游戏" class="headerlink" title="迷宫游戏"></a>迷宫游戏</h3><p>你做一款迷宫游戏，已知元素有房间、门、墙，他们之间的组合关系是固定的，你通过一套算法生成随机迷宫，这套算法调用房间、门、墙的工厂生成对应的实例。但随着新资料片的放出，你需要生成具有新功能的房间（可以回复体力）、新功能的门（需要魔法钥匙才能打开）、新功能的墙（可以被炸弹破坏），但修改已有的迷宫生成算法违背了开闭原则（需要在已有对象进行修改），如果你希望生成迷宫的算法完全不感知新材料的存在，你会怎么设计？</p><h3 id="事件联动"><a href="#事件联动" class="headerlink" title="事件联动"></a>事件联动</h3><p>假设我们做一个前端搭建引擎，现在希望做一套关联机制，以实现点击表格组件单元格，可以弹出一个模态框，内部展示一个折线图。已知业务方存在定制表格组件、模态框组件、折线图组件的需求，但组件之间联动关系是确定的，你会怎么设计？</p><h2 id="意图解释"><a href="#意图解释" class="headerlink" title="意图解释"></a>意图解释</h2><p>在汽车工厂的例子中，我们已知车子的构成部件，<strong>为了组装成一辆车子，需要以一定方式拼装部件，而具体用什么部件是需要可拓展的</strong>。</p><p>在迷宫游戏的例子中，我们已知迷宫的组成部分是房间、门、墙，<strong>为了生成一个迷宫，需要以某种算法生成许多房间、门、墙的实例，而具体用哪种房间、哪种门、哪种墙是这个算法不关心的，是需要可被拓展的</strong>。</p><p>在事件联动的例子中，我们已知这个表格弹出趋势图的交互场景基本组成元素是表格组件、模态框组件、折线图组件，<strong>需要以某种联动机制让这三者间产生联动关系，而具体是什么表格、什么模态框组件、什么折线图组件是这个事件联动所不关心的，是需要可以被拓展的</strong>，表格可以被替换为任意业务方注册的表格，只要满足点击 <code>onClick</code> 机制就可以。</p><blockquote><p><strong>意图：提供一个接口以创建一系列相关或相互依赖的对象，而无须指定它们具体的类。</strong></p></blockquote><p>这三个例子不正是符合上面的意图吗？我们要设计的抽象工厂就是要 <strong>创建一系列相关或相互依赖的对象</strong>，在上面的例子中分别是汽车的组成配件、迷宫游戏的素材、事件联动的组件。<strong>而无须指定它们具体的类</strong>，也就说明了我们不关心车子方向盘用的是什么牌子，迷宫的房间是不是普通房间，联动机制的折线图是不是用 <code>Echarts</code> 画的，我们只要描述好他们之间的关系即可，<strong>这带来的好处是，未来我们拓展新的方向盘、新的房间、新的折线图时，不需要修改抽象工厂。</strong></p><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><img width="800" src="https://img.alicdn.com/tfs/TB1k8DVVkT2gK0jSZFkXXcIQFXa-1472-658.png"><p><code>AbstractFactory</code> 就是我们要的抽象工厂，描述了创建产品的抽象关系，比如描述迷宫如何生成，表格和趋势图怎么联动。</p><p>至于具体用什么方向盘、用什么房间，是由 <code>ConcreteFactory</code> 实现的，所以我们可能有多个 <code>ConcreteFactory</code>，比如 <code>ConcreteFactory1</code> 实例化的墙壁是普通墙壁，<code>ConcreteFactory2</code> 实例化的墙壁是魔法墙壁，但其对 <code>AbstractFactory</code> 的接口是一致的，所以 <code>AbstractFactory</code> 不需要关心具体调用的是哪一个工厂。</p><p><code>AbstractProduct</code> 是产品抽象类，描述了比如方向盘、墙壁、折线图的创建方法，而 <code>ConcreteProduct</code> 是具体实现产品的方法，比如 <code>ConcreteProduct1</code> 创建的表格是用 <code>canvas</code> 画的，折线图是用 <code>G2</code> 画的，而 <code>ConcreteProduct2</code> 创建的表格是用 <code>div</code> 画的，折线图是用 <code>Echarts</code> 画的。</p><p>这样，当我们要拓展一个用 <code>Echarts</code> 画的折线图，用 <code>svg</code> 画的表格，用 <code>div</code> 画的模态框组成的事件机制时，只需要再创建一个 <code>ConcreteFactory3</code> 做相应的实现即可，再将这个 <code>ConcreteFactory3</code> 传递给 <code>AbstractFactory</code>，并不需要修改 <code>AbstractFactory</code> 方法本身。</p><h2 id="代码例子"><a href="#代码例子" class="headerlink" title="代码例子"></a>代码例子</h2><p>下面例子使用 javascript 编写。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">AbstractFactory</span> <span class="token punctuation">{</span>  <span class="token function">createProducts</span><span class="token punctuation">(</span>concreteFactory<span class="token operator">:</span> ConcreteFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> productA <span class="token operator">=</span> concreteFactory<span class="token punctuation">.</span><span class="token function">createProductA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> productB <span class="token operator">=</span> concreteFactory<span class="token punctuation">.</span><span class="token function">createProductB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 建立 A 与 B 固定的关联，即便 A 与 B 实现换成任意实现都不受影响</span>    <span class="token function">productA</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>productB<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>productA.bind(productB)</code> 是一种抽象表示：</p><ul><li>对于汽车工厂的例子，表示组装汽车的过程。</li><li>对于迷宫游戏的例子，表示生成迷宫的过程。</li><li>对于事件联动的例子，表示创建组件间关联的过程。</li></ul><p>假设我们的迷宫有两套素材，分别是普通素材与魔法素材，只要在分别创建普通素材工厂 <code>ConcreteFactoryA</code>，与魔法素材工厂 <code>ConcreteFactoryB</code>，调用 <code>createProducts</code> 时传入的是普通素材，则产出的就是普通素材搭建的迷宫，传入的是魔法素材，则产出的就是用魔法素材搭建的迷宫。</p><p>当我们要创建一套新迷宫材料，比如熔岩迷宫，我们只要创建一套熔岩素材（熔岩房间、熔岩门、熔岩墙壁），再组装一个 <code>ConcreteFactoryC</code> 熔岩素材生成工厂传递给 <code>AbstractFactory.createProducts</code> 即可。</p><p>我们可以发现，使用抽象工厂模式，我们可以轻松拓展新的素材，比如拓展一套新的汽车配件，拓展一套新的迷宫素材，拓展一套新的事件联动组件，<strong>这个过程只需要新建类即可，不需要修改任何类，符合开闭原则</strong>。</p><h2 id="弊端"><a href="#弊端" class="headerlink" title="弊端"></a>弊端</h2><p>任何设计模式都有其适用场景，反过来也说明了在某些场景下不适用。</p><p>还是上面的例子，如果我们的需求不是拓展一个新轮子、新墙壁、新折线图，而是：</p><ul><li>汽车工厂要给汽车加一个新部件：自动驾驶系统。</li><li>迷宫游戏要新增一个功能素材：陷阱。</li><li>事件联动要新增一个联动对象：明细趋势统计表格。</li></ul><p>你看，这种情况不是为已有元素新增一套实现，而是实现一些新元素，就会非常复杂，因为我们不仅要为所有 <code>ConcreteFactory</code> 新增每一个元素，还要修改抽象工厂，以将新元素与旧元素间建立联系，违背了开闭原则。</p><p>因此，对于已有元素固定的系统，适合使用抽象工厂，反之不然。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>抽象工厂对新增已有产品的实现适用，对新增一个产品种类不适用，可以参考结合了例子的下图加深理解：</p><img width="800" src="https://img.alicdn.com/tfs/TB1Fbn7Vlr0gK0jSZFnXXbRRXXa-1416-852.png"><p>拓展一个熔岩素材包是 <strong>增加一种产品风格</strong>，适合使用抽象工厂设计模式；拓展一个陷阱是 <strong>增加一个产品种类</strong>，不适合使用抽象工厂设计模式。为什么呢？看下图：</p><img width="800" src="https://img.alicdn.com/tfs/TB12fL8VeL2gK0jSZFmXXc7iXXa-1696-640.png"><p>创建迷宫这个抽象工厂做的事情，<strong>是把已有的房间、门、墙壁建立关联</strong>，因为操作的是抽象类，所以拓展一套具体实现（熔岩素材包）对这个抽象工厂没有感知，这样做很容易。</p><p>但如果新增一个产品种类 - 陷阱，可以看到，抽象工厂必须将陷阱与前三者重新建立关联，这就要修改抽象工厂，不符合开闭原则。同时，如果我们已有素材包 1 ～素材包 999，就需要同时增加 999 个对应的陷阱实现（普通陷阱、魔法陷阱、熔岩陷阱），其工作量会非常大。</p><p>因此，只有产品种类稳定时，需要频繁拓展产品风格时才适合用抽象工厂设计模式。</p><blockquote><p>讨论地址是：<a href="https://github.com/dt-fe/weekly/issues/271">精读《设计模式 - Abstract Factory 抽象工厂》· Issue #271 · dt-fe/weekly</a></p></blockquote><p><strong>如果你想参与讨论，请 <a href="https://github.com/dt-fe/weekly">点击这里</a>，每周都有新的主题，周末或周一发布。前端精读 - 帮你筛选靠谱的内容。</strong></p><blockquote><p>版权声明：自由转载-非商用-非衍生-保持署名（<a href="https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">创意共享 3.0 许可证</a>）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 抽象工厂方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-工厂方法</title>
      <link href="/2022/05/3045320.html"/>
      <url>/2022/05/3045320.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Factory-Method（工厂方法）"><a href="#Factory-Method（工厂方法）" class="headerlink" title="Factory Method（工厂方法）"></a>Factory Method（工厂方法）</h1><p>Factory Method（工厂方法）属于创建型模式，利用工厂方法创建对象实例而不是直接用 New 关键字实例化。</p><p>理解如何写出工厂方法很简单，但理解为什么要用工厂方法就需要动动脑子了。工厂方法看似简单的将 New 替换为一个函数，其实是体现了面向接口编程的思路，它创建的对象其实是一个符合通用接口的通用对象，这个对象的具体实现可以随意替换，以达到通用性目的。</p><p><strong>意图：定义一个用于创建对象的接口，让子类决定实例化哪一个类。Factory Method 使一个类的实例化延迟到其子类。</strong></p><h2 id="举例子"><a href="#举例子" class="headerlink" title="举例子"></a>举例子</h2><p>如果看不懂上面的意图介绍，没有关系，设计模式需要在日常工作里用起来，结合例子可以加深你的理解，下面我准备了三个例子，让你体会什么场景下会用到这种设计模式。</p><h3 id="换灯泡"><a href="#换灯泡" class="headerlink" title="换灯泡"></a>换灯泡</h3><p>我自己在家换过灯泡，以前我家里灯坏掉的时候，我看着这个奇形怪状的灯管，心里想，这种灯泡和这个灯座应该是一体的，市场上估计很难买到适配我这个灯座的灯泡了。结果等我把灯泡拧下来，跑到门口的五金店去换的时候，店员随便给了我一个灯泡，我回去随便拧了一下居然就能用了。</p><p>我买这个灯泡的过程就用到了工厂模式，而正是得益于这种模式，让我可以方便在家门口就买到可以用的灯泡。</p><h3 id="卡牌对战游戏"><a href="#卡牌对战游戏" class="headerlink" title="卡牌对战游戏"></a>卡牌对战游戏</h3><p>卡牌对战中，卡牌有一些基本属性，比如攻防、生命值，也符合一些通用约定，比如一回合出击一起等等，那么对于战斗系统来说，应该怎样实例化卡牌呢？如何批量操作卡牌，而不是通用功能也要拿到每个卡牌的实例才能调用？另外每个卡牌有特殊能力，这些特殊能力又应该如何拓展呢？</p><h3 id="实现任意图形拖拽系统"><a href="#实现任意图形拖拽系统" class="headerlink" title="实现任意图形拖拽系统"></a>实现任意图形拖拽系统</h3><p>一个可以被交互操作的图形，它可以用鼠标进行拉伸、旋转或者移动，不同图形实现这些操作可能并不相同，要存储的数据也不一样，这些数据应该独立于图形存储，我们的系统如果要对接任意多的图形，具备强大拓展能力，对象关系应该如何设计呢？</p><h2 id="意图解释"><a href="#意图解释" class="headerlink" title="意图解释"></a>意图解释</h2><p>在使用工厂方法之前，我们就要创建一个 <strong>用于创建对象的接口</strong>，这个接口具备通用性，<strong>所以我们可以忽略不同的实现来做一些通用的事情</strong>。</p><p>换灯泡的例子来说，我去门口五金店买灯泡，而不是拿到灯泡材料自己 New 一个出来，就是因为五金店这个 “工厂” 提供给我的灯泡符合国家接口标准，而我家里的灯座也符合这个标准，所以灯座不需要知道对接的灯泡是具体哪个实例，什么颜色，什么形状，这些都无所谓，只要灯泡符合国家标准接口，就可以对接上。</p><p>对卡牌对战的系统来说，<strong>所有卡牌都应该实现同一种接口</strong>，所以卡牌对战系统拿到的卡牌应该就是简单的 Card 类型，这种类型具备基本的卡片操作交互能力，系统就调用这些能力完成基本流程就好了，如果系统直接实例化具体的卡片，那不同的卡片类型会导致系统难以维护，卡片间操作也无法抽象化。</p><p>正是这种模式，使得我们可以在卡牌的具体实现上做一些特殊功能，比如修改卡片攻击时效果，修改卡牌销毁时效果。</p><p>对图形拖拽系统来说，用到了 “连接平行的类层次” 这个特性，所谓连接平行的类层次，就是指一个图形，与其对应的操作类是一个平行抽象类，而一个具体的图形与具体的操作类则是另一个平行关系，系统只要关注最抽象的 “通用图形类” 与 “通用操作类” 即可，操作时，底层可能是某个具体的 “圆类” 与 “圆操作类” 结合使用，具体的类有不同的实现，但都符合同一种接口，因此操作系统才可以把它们一视同仁，统一操作。</p><p><strong>意图：定义一个用于创建对象的接口，让子类决定实例化哪一个类。Factory Method 使一个类的实例化延迟到其子类。</strong></p><p>所以接口是非常重要的，工厂方法第一句话就是 “定义一个用于创建对象的接口”，这个接口就是 <code>Creator</code>，让子类，也就是具体的创建类（<code>ConcreteCreator</code>）决定要实例化哪个类（<code>ConcreteProduct</code>）。</p><p>所谓使一个类的实例化延迟到其子类，是因为抽象类不知道要实例化哪个具体类，所以实例化动作只能由具体的子类去做，这样绕一圈的好处是，我们可以将任意多对象看作是同一类事物，做统一的处理，比如 <strong>无论何种灯泡实例都满足通用的灯座接口</strong>，<strong>所有工厂实例化的卡牌都具备玩一局卡牌游戏的基本功能</strong>，<strong>任何图形与交互类都满足特定功能关系</strong>，这种思想让生活和设计得到了大幅简化。</p><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><img width="800" src="https://img.alicdn.com/tfs/TB1VjyZmsVl614jSZKPXXaGjpXa-1434-476.png"><p><code>Creator</code> 就是工厂方法，<code>ConcreteCreator</code> 是实现了 <code>Creator</code> 的具体工厂方法，每一个具体工厂方法生产一个具体的产品 <code>ConcreteProduct</code>，每个具体的产品都实现通用产品的特性 <code>Product</code>。</p><h2 id="代码例子"><a href="#代码例子" class="headerlink" title="代码例子"></a>代码例子</h2><p>下面例子使用 typescript 编写。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 产品接口</span><span class="token keyword">interface</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>  <span class="token function-variable function">save</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 工厂接口</span><span class="token keyword">interface</span> <span class="token class-name">Creator</span> <span class="token punctuation">{</span>  <span class="token function-variable function">createProduct</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Product<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 具体产品</span><span class="token keyword">class</span> <span class="token class-name">ConcreteProduct</span> <span class="token keyword">implements</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>  <span class="token function-variable function">save</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 具体工厂</span><span class="token keyword">class</span> <span class="token class-name">ConcreteCreator</span> <span class="token keyword">implements</span> <span class="token class-name">Creator</span> <span class="token punctuation">{</span>  <span class="token function-variable function">createProduct</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建一个 <code>Product</code> 的子类 <code>ConcreteCreator</code>，并返回一个实现了 <code>Product</code> 的具体实例 <code>ConcreteProduct</code>，这样我们就可以方便使用这个工厂了。</p><p>工厂方法并不是直接调用 <code>new ConcreteCreator().createProduct</code> 那么简单，这样体现不出任何抽象性，真正的场景是，在一个创建产品的流程中，我们只知道拿到的工厂是 <code>Creator</code>：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span>anyCreator<span class="token operator">:</span> Creator<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> product <span class="token operator">=</span> anyCreator<span class="token punctuation">.</span><span class="token function">createProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在外面调用 <code>main</code> 函数时，实际传进去的是一个具体工厂，比如 <code>myCreator</code>，但关键是 <code>main</code> 函数不用关心到底是哪一个具体工厂，只要知道是个工厂就行了，具体对象创建过程交给了其子类。</p><p><strong>你也许也发现了，这就是抽象工厂中其中的一步，所以抽象工厂使用了工厂方法。</strong></p><h2 id="弊端"><a href="#弊端" class="headerlink" title="弊端"></a>弊端</h2><p>工厂方法中，每创建一种具体的子类，就要写一个对应的 <code>ConcreteCreate</code>，这相对比较笨重，但有意思的是，如果将创建多个对象放到一个 <code>ConcreteCreate</code> 中，就变成了 <strong>简单工厂模式</strong>，新增产品要修改已有类不符合开闭模式，反而推荐写成本文说的这种模式。</p><p>彼之毒药吾之蜜糖，要知道没有一种设计模式解决所有问题，没有一种设计模式没有弊端，<strong>而这个弊端不代表这个设计模式不好，一个弊端的出现可能是为了解决另一个痛点。</strong> 要接受不完美的存在，这么多种设计模式就是对应了不同的业务场景，<strong>为合适的场景选择一种能将优势发扬光大，以至于能掩盖弊端，就算进行了合理的架构设计</strong>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>工厂方法并不是简单把 New 的过程换成了函数，而是抽象出一套面向接口的设计模式：</p><img width="800" src="https://img.alicdn.com/tfs/TB1WKH.Zoz1gK0jSZLeXXb9kVXa-1480-786.png"><p>你看，我要做灯泡，可以直接做具体的灯泡，也可以定一个灯泡接口，通过灯泡工厂拿到具体灯泡，灯泡工厂对待所有灯泡的只做流程都是一样的，不管是中世纪风灯泡，还是复古灯泡，还是普通白织灯，都是一模一样的制作流程，具体怎么做由具体的子类去实现，这样我们可以统一管理 “灯泡” 这一个通用概念，而忽略不同灯泡之间不太重要的差别，程序的可维护性得到了大幅提升。</p><blockquote><p>讨论地址是：<a href="https://github.com/dt-fe/weekly/issues/274">精读《设计模式 - Factory Method 工厂方法》· Issue #274 · dt-fe/weekly</a></p></blockquote><p><strong>如果你想参与讨论，请 <a href="https://github.com/dt-fe/weekly">点击这里</a>，每周都有新的主题，周末或周一发布。前端精读 - 帮你筛选靠谱的内容。</strong></p><blockquote><p>版权声明：自由转载-非商用-非衍生-保持署名（<a href="https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">创意共享 3.0 许可证</a>）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工厂方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS内存管理</title>
      <link href="/2022/05/2433540.html"/>
      <url>/2022/05/2433540.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本期精读的文章是：</p><p><a href="https://blog.sessionstack.com/how-javascript-works-memory-management-how-to-handle-4-common-memory-leaks-3f28b94cfbec">How JavaScript works: memory management + how to handle 4 common memory leaks</a></p><h1 id="1-引言"><a href="#1-引言" class="headerlink" title="1 引言"></a>1 引言</h1><p>我为什么要选这篇文章呢？</p><p>sessionstack 最近接连发了好几篇文章, 深入探讨 JS, 以及  JS 中一些内部原理. 文中也讲到了, 伴随深入了解 JS 中的一些工作原理, 才有可能写出更好的代码和程序.</p><p>而 JS 中的内存管理, 我的感觉就像 JS 中的一门副科, 我们平时不会太重视, 但是一旦出问题又很棘手. 所以可以通过平时多了解一些 JS 中内存管理问题, 在写代码中通过一些习惯, 避免内存泄露的问题.</p><h1 id="2-内容概要"><a href="#2-内容概要" class="headerlink" title="2 内容概要"></a>2 内容概要</h1><h3 id="内存生命周期"><a href="#内存生命周期" class="headerlink" title="内存生命周期"></a>内存生命周期</h3><p><img src="https://raw.githubusercontent.com/dt-fe/weekly/master/assets/29/1.jpg"></p><p>不管什么程序语言，内存生命周期基本是一致的：</p><ol><li>分配你所需要的内存</li><li>使用分配到的内存（读, 写）</li><li>不需要时将其释放/归还</li></ol><p>在 C 语言中, 有专门的内存管理接口, 像<code>malloc()</code> 和 <code>free()</code>. 而在 JS 中, 没有专门的内存管理接口, 所有的内存管理都是”自动”的. JS 在创建变量时, 自动分配内存, 并在不使用的时候, 自动释放. 这种”自动”的内存回收, 造成了很多 JS 开发并不关心内存回收, 实际上, 这是错误的.</p><h2 id="JS-中的内存回收"><a href="#JS-中的内存回收" class="headerlink" title="JS 中的内存回收"></a>JS 中的内存回收</h2><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>垃圾回收算法主要依赖于引用的概念. 在内存管理的环境中, 一个对象如果有访问另一个对象的权限（隐式或者显式）, 叫做一个对象引用另一个对象. 例如: 一个 Javascript 对象具有对它原型的引用（隐式引用）和对它属性的引用（显式引用）.</p><h3 id="引用计数垃圾收集"><a href="#引用计数垃圾收集" class="headerlink" title="引用计数垃圾收集"></a>引用计数垃圾收集</h3><p>这是最简单的垃圾收集算法.此算法把“对象是否不再需要”简化定义为“对象有没有其他对象引用到它”. 如果没有引用指向该对象（零引用, 对象将被垃圾回收机制回收.<br>示例:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// [1,2,3,4]这时没有被引用, 会被自动回收</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="限制-循环引用"><a href="#限制-循环引用" class="headerlink" title="限制: 循环引用"></a>限制: 循环引用</h3><p>在下面的例子中, 两个对象对象被创建并互相引用, 就造成了循环引用. 它们被调用之后不会离开函数作用域, 所以它们已经没有用了, 可以被回收了. 然而, 引用计数算法考虑到它们互相都有至少一次引用, 所以它们不会被回收.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> o1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> o2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  o1<span class="token punctuation">.</span>p <span class="token operator">=</span> o2<span class="token punctuation">;</span> <span class="token comment">// o1 引用 o2</span>  o2<span class="token punctuation">.</span>p <span class="token operator">=</span> o1<span class="token punctuation">;</span> <span class="token comment">// o2 引用 o1. 这里会形成一个循环引用</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/dt-fe/weekly/master/assets/29/2.jpg"></p><p>实际例子:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> div<span class="token punctuation">;</span>window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myDivElement"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  div<span class="token punctuation">.</span>circularReference <span class="token operator">=</span> div<span class="token punctuation">;</span>  div<span class="token punctuation">.</span>lotsOfData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的例子里, myDivElement 这个 DOM 元素里的 circularReference 属性引用了 myDivElement, 造成了循环引用. IE 6, 7 使用引用计数方式对 DOM 对象进行垃圾回收. 该方式常常造成对象被循环引用时内存发生泄漏.  现代浏览器通过使用标记-清除内存回收算法, 来解决这一问题.</p><h3 id="标记-清除算法"><a href="#标记-清除算法" class="headerlink" title="标记-清除算法"></a>标记-清除算法</h3><p>这个算法把“对象是否不再需要”简化定义为“对象是否可以获得”.</p><p>这个算法假定设置一个叫做根<code>root</code>的对象(在 Javascript 里，根是全局对象). 定期的, 垃圾回收器将从根开始, 找所有从根开始引用的对象, 然后找这些对象引用的对象, 从根开始,垃圾回收器将找到所有可以获得的对象和所有不能获得的对象.</p><p>从 2012 年起, 所有现代浏览器都使用了标记-清除内存回收算法。所有对 JavaScript 垃圾回收算法的改进都是基于标记-清除算法的改进.<br><img src="https://raw.githubusercontent.com/dt-fe/weekly/master/assets/29/3.gif"></p><h3 id="自动-GC-的问题"><a href="#自动-GC-的问题" class="headerlink" title="自动 GC 的问题"></a>自动 GC 的问题</h3><p>尽管自动 GC 很方便, 但是我们不知道 GC 什么时候会进行. 这意味着如果我们在使用过程中使用了大量的内存, 而 GC 没有运行的情况下, 或者 GC 无法回收这些内存的情况下, 程序就有可能假死, 这个就需要我们在程序中手动做一些操作来触发内存回收.</p><h3 id="什么是内存泄露"><a href="#什么是内存泄露" class="headerlink" title="什么是内存泄露?"></a>什么是内存泄露?</h3><p>本质上讲, 内存泄露就是不再被需要的内存, 由于某种原因, 无法被释放.</p><p><img src="https://raw.githubusercontent.com/dt-fe/weekly/master/assets/29/4.jpg"></p><h2 id="常见的内存泄露案例"><a href="#常见的内存泄露案例" class="headerlink" title="常见的内存泄露案例"></a>常见的内存泄露案例</h2><h4 id="1-全局变量"><a href="#1-全局变量" class="headerlink" title="1. 全局变量"></a>1. 全局变量</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    bar <span class="token operator">=</span> <span class="token string">"some text"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在 JS 中处理未被声明的变量, 上述范例中的 <code>bar</code>时, 会把<code>bar</code>, 定义到全局对象中, 在浏览器中就是 <code>window</code> 上. 在页面中的全局变量, 只有当页面被关闭后才会被销毁. 所以这种写法就会造成内存泄露, 当然在这个例子中泄露的只是一个简单的字符串, 但是在实际的代码中, 往往情况会更加糟糕.</p><p>另外一种意外创建全局变量的情况.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>var1 <span class="token operator">=</span> <span class="token string">"potential accidental global"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// Foo 被调用时, this 指向全局变量(window)</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这种情况下调用<code>foo</code>,  this 被指向了全局变量<code>window</code>, 意外的创建了全局变量.</p><p>我们谈到了一些意外情况下定义的全局变量, 代码中也有一些我们明确定义的全局变量. 如果使用这些全局变量用来暂存大量的数据, 记得在使用后, 对其重新赋值为 null.</p><h4 id="2-未销毁的定时器和回调函数"><a href="#2-未销毁的定时器和回调函数" class="headerlink" title="2. 未销毁的定时器和回调函数"></a>2. 未销毁的定时器和回调函数</h4><p>在很多库中, 如果使用了观察者模式, 都会提供回调方法, 来调用一些回调函数. 要记得回收这些回调函数. 举一个 setInterval 的例子.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> serverData <span class="token operator">=</span> <span class="token function">loadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> renderer <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'renderer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>renderer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        renderer<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>serverData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 每 5 秒调用一次</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果后续 <code>renderer</code> 元素被移除, 整个定时器实际上没有任何作用. 但如果你没有回收定时器, 整个定时器依然有效, 不但定时器无法被内存回收, 定时器函数中的依赖也无法回收. 在这个案例中的 <code>serverData</code> 也无法被回收.</p><h4 id="3-闭包"><a href="#3-闭包" class="headerlink" title="3. 闭包"></a>3. 闭包</h4><p>在 JS 开发中, 我们会经常用到闭包, 一个内部函数, 有权访问包含其的外部函数中的变量. 下面这种情况下, 闭包也会造成内存泄露.</p><pre class="line-numbers language-Javascript" data-language="Javascript"><code class="language-Javascript">var theThing = null;var replaceThing = function () {  var originalThing = theThing;  var unused = function () {    if (originalThing) // 对于 'originalThing'的引用      console.log("hi");  };  theThing = {    longStr: new Array(1000000).join('*'),    someMethod: function () {      console.log("message");    }  };};setInterval(replaceThing, 1000);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码, 每次调用<code>replaceThing</code>时, <code>theThing</code> 获得了包含一个巨大的数组和一个对于新闭包<code>someMethod</code>的对象.  同时 <code>unused</code> 是一个引用了<code>originalThing</code>的闭包.</p><p>这个范例的关键在于, 闭包之间是共享作用域的, 尽管<code>unused</code>可能一直没有被调用, 但是<code>someMethod</code> 可能会被调用, 就会导致内存无法对其进行回收. 当这段代码被反复执行时, 内存会持续增长.</p><p>该问题的更多描述可见<a href="https://blog.meteor.com/an-interesting-kind-of-javascript-memory-leak-8b47d2e7f156">Meteor 团队的这篇文章</a>.</p><h4 id="4-DOM-引用"><a href="#4-DOM-引用" class="headerlink" title="4. DOM 引用"></a>4. DOM 引用</h4><p>很多时候, 我们对 Dom 的操作, 会把 Dom 的引用保存在一个数组或者 Map 中.</p><pre class="line-numbers language-Javascript" data-language="Javascript"><code class="language-Javascript">var elements = {    image: document.getElementById('image')};function doStuff() {    elements.image.src = 'http://example.com/image_name.png';}function removeImage() {    document.body.removeChild(document.getElementById('image'));    // 这个时候我们对于 #image 仍然有一个引用, Image 元素, 仍然无法被内存回收.}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述案例中, 即使我们对于 image 元素进行了移除, 但是仍然有对 image 元素的引用, 依然无法对齐进行内存回收.</p><p>另外需要注意的一个点是, 对于一个 Dom 树的叶子节点的引用. 举个例子: 如果我们引用了一个表格中的<code>td</code>元素, 一旦在 Dom 中删除了整个表格, 我们直观的觉得内存回收应该回收除了被引用的 <code>td</code>外的其他元素. 但是事实上, 这个<code>td</code> 元素是整个表格的一个子元素, 并保留对于其父元素的引用. 这就会导致对于整个表格, 都无法进行内存回收. 所以我们要小心处理对于 Dom 元素的引用.</p><h1 id="3-精读"><a href="#3-精读" class="headerlink" title="3 精读"></a>3 精读</h1><p>ES6 中引入<code>WeakSet</code> 和 <code>WeakMap</code>两个新的概念, 来解决引用造成的内存回收问题. <code>WeakSet</code> 和 <code>WeakMap</code>对于值的引用可以忽略不计, 他们对于值的引用是弱引用,内存回收机制, 不会考虑这种引用. 当其他引用被消除后, 引用就会从内存中被释放.</p><p>JS 这类高级语言，隐藏了内存管理功能。但无论开发人员是否注意，内存管理都在那，所有编程语言最终要与操作系统打交道，在内存大小固定的硬件上工作。不幸的是，即使不考虑垃圾回收对性能的影响，2017 年最新的垃圾回收算法，也无法智能回收所有极端的情况。</p><p>唯有程序员自己才知道何时进行垃圾回收，而 JS 由于没有暴露显示内存管理接口，导致触发垃圾回收的代码看起来像“垃圾”，或者优化垃圾回收的代码段看起来不优雅、甚至不可读。</p><p>所以在 JS 这类高级语言中，有必要掌握基础内存分配原理，在对内存敏感的场景，比如 nodejs 代码做严格检查与优化。谨慎使用 dom 操作、主动删除没有业务意义的变量、避免提前优化、过度优化，在保证代码可读性的前提下，利用性能监控工具，通过调用栈定位问题代码。</p><p>同时对于如何利用 chrome 调试工具, 分析内存泄露的方法和技巧. 可以参考上期精读<a href="https://zhuanlan.zhihu.com/p/30349982">精读《2017 前端性能优化备忘录》</a></p><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h1><p>即便在 JS 中, 我们很少去直接去做内存管理. 但是我们在写代码的时候, 也要有内存管理的意识, 谨慎的处理可能会造成内存泄露的场景.</p><blockquote><p>讨论地址是：<a href="https://github.com/dt-fe/weekly/issues/40">精读《JS 中的内存管理》 · Issue #40 · dt-fe/weekly</a></p></blockquote><blockquote><p>如果你想参与讨论，请<a href="https://github.com/dt-fe/weekly">点击这里</a>，每周都有新的主题，每周五发布。</p></blockquote><p>参考文章: <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Memory_Management">MDN 的内存管理介绍</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内存管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Async/Await是把双刃剑</title>
      <link href="/2022/05/1965303.html"/>
      <url>/2022/05/1965303.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本周精读内容是 <a href="https://medium.freecodecamp.org/avoiding-the-async-await-hell-c77a0fb71c4c">《async/await 是把双刃剑》</a>。</p><h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1 引言"></a>1 引言</h2><p>终于，async/await 也被吐槽了。Aditya Agarwal 认为 async/await 语法让我们陷入了新的麻烦之中。</p><p>其实，笔者也早就觉得哪儿不对劲了，终于有个人把实话说了出来，async/await 可能会带来麻烦。</p><h2 id="2-概述"><a href="#2-概述" class="headerlink" title="2 概述"></a>2 概述</h2><p>下面是随处可见的现代化前端代码：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> pizzaData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getPizzaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// async call</span>  <span class="token keyword">const</span> drinkData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getDrinkData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// async call</span>  <span class="token keyword">const</span> chosenPizza <span class="token operator">=</span> <span class="token function">choosePizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// sync call</span>  <span class="token keyword">const</span> chosenDrink <span class="token operator">=</span> <span class="token function">chooseDrink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// sync call</span>  <span class="token keyword">await</span> <span class="token function">addPizzaToCart</span><span class="token punctuation">(</span>chosenPizza<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// async call</span>  <span class="token keyword">await</span> <span class="token function">addDrinkToCart</span><span class="token punctuation">(</span>chosenDrink<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// async call</span>  <span class="token function">orderItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// async call</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>await 语法本身没有问题，有时候可能是使用者用错了。当 <code>pizzaData</code> 与 <code>drinkData</code> 之间没有依赖时，顺序的 await 会最多让执行时间增加一倍的 <code>getPizzaData</code> 函数时间，因为 <code>getPizzaData</code> 与 <code>getDrinkData</code> 应该并行执行。</p><p>回到我们吐槽的回调地狱，虽然代码比较丑，带起码两行回调代码并不会带来阻塞。</p><p>看来语法的简化，带来了性能问题，而且直接影响到用户体验，是不是值得我们反思一下？</p><p>正确的做法应该是先同时执行函数，再 await 返回值，这样可以并行执行异步函数：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> pizzaPromise <span class="token operator">=</span> <span class="token function">selectPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> drinkPromise <span class="token operator">=</span> <span class="token function">selectDrink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> pizzaPromise<span class="token punctuation">;</span>  <span class="token keyword">await</span> drinkPromise<span class="token punctuation">;</span>  <span class="token function">orderItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// async call</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者使用 <code>Promise.all</code> 可以让代码更可读：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">selectPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">selectDrink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>orderItems<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// async call</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>看来不要随意的 await，它很可能让你代码性能降低。</p><h2 id="3-精读"><a href="#3-精读" class="headerlink" title="3 精读"></a>3 精读</h2><p>仔细思考为什么 async/await 会被滥用，笔者认为是它的功能比较反直觉导致的。</p><p>首先 async/await 真的是语法糖，功能也仅是让代码写的舒服一些。先不看它的语法或者特性，仅从语法糖三个字，就能看出它一定是局限了某些能力。</p><p>举个例子，我们利用 html 标签封装了一个组件，带来了便利性的同时，其功能一定是 html 的子集。又比如，某个轮子哥觉得某个组件 api 太复杂，于是基于它封装了一个语法糖，我们多半可以认为这个便捷性是牺牲了部分功能换来的。</p><p>功能完整度与使用便利度一直是相互博弈的，很多框架思想的不同开源版本，几乎都是把功能完整度与便利度按照不同比例混合的结果。</p><p>那么回到 async/await 它的解决的问题是回调地狱带来的灾难：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了减少嵌套结构太多对大脑造成的冲击，async/await 决定这么写：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">await</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">await</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">await</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>虽然层级上一致了，但逻辑上还是嵌套关系，这不是另一个程度上增加了大脑负担吗？而且这个转换还是隐形的，所以许多时候，我们倾向于忽略它，所以造成了语法糖的滥用。</p><h3 id="理解语法糖"><a href="#理解语法糖" class="headerlink" title="理解语法糖"></a>理解语法糖</h3><p>虽然要正确理解 async/await 的真实效果比较反人类，但为了清爽的代码结构，以及防止写出低性能的代码，还是挺有必要认真理解 async/await 带来的改变。</p><p>首先 async/await 只能实现一部分回调支持的功能，也就是仅能方便应对层层嵌套的场景。其他场景，就要动一些脑子了。</p><p>比如两对回调：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果写成下面的方式，虽然一定能保证功能一致，但变成了最低效的执行方式：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">await</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">await</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">await</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">await</span> <span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>因为翻译成回调，就变成了：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然而我们发现，原始代码中，函数 <code>c</code> 可以与 <code>a</code> 同时执行，但 async/await 语法会让我们倾向于在 <code>b</code> 执行完后，再执行 <code>c</code>。</p><p>所以当我们意识到这一点，可以优化一下性能：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> resA <span class="token operator">=</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> resC <span class="token operator">=</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">await</span> resA<span class="token punctuation">;</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">await</span> resC<span class="token punctuation">;</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但其实这个逻辑也无法达到回调的效果，虽然 <code>a</code> 与 <code>c</code> 同时执行了，但 <code>d</code> 原本只要等待 <code>c</code> 执行完，现在如果 <code>a</code> 执行时间比 <code>c</code> 长，就变成了:</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>看来只有完全隔离成两个函数：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者利用 <code>Promise.all</code>:</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">ab</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">cd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">ab</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这就是我想表达的可怕之处。回调方式这么简单的过程式代码，换成 async/await 居然写完还要反思一下，再反推着去优化性能，这简直比回调地狱还要可怕。</p><p>而且大部分场景代码是非常复杂的，同步与 await 混杂在一起，想捋清楚其中的脉络，并正确优化性能往往是很困难的。但是我们为什么要自己挖坑再填坑呢？很多时候还会导致忘了填。</p><p>原文作者给出了 <code>Promise.all</code> 的方式简化逻辑，但笔者认为，不要一昧追求 async/await 语法，在必要情况下适当使用回调，是可以增加代码可读性的。</p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h2><p>async/await 回调地狱提醒着我们，不要过度依赖新特性，否则可能带来的代码执行效率的下降，进而影响到用户体验。同时，笔者认为，也不要过度利用新特性修复新特性带来的问题，这样反而导致代码可读性下降。</p><p>当我翻开 redux 刚火起来那段时期的老代码，看到了许多过度抽象、为了用而用的代码，硬是把两行代码能写完的逻辑，拆到了 3 个文件，分散在 6 行不同位置，我只好用字符串搜索的方式查找线索，最后发现这个抽象代码整个项目仅用了一次。</p><p>写出这种代码的可能性只有一个，就是在精神麻木的情况下，一口气喝完了 redux 提供的全部鸡汤。</p><p>就像 async/await 地狱一样，看到这种 redux 代码，我觉得远不如所谓没跟上时代的老前端写出的 jquery 代码。</p><p>决定代码质量的是思维，而非框架或语法，async/await 虽好，但也要适度哦。</p><blockquote><p>PS: 经过讨论，笔者把原文 async/await 地狱标题改成了 async/await 是把双刃剑。因为 async/await 并没有回调地狱那么可怕，称它为地狱有误导的可能性。</p></blockquote><h2 id="5-更多讨论"><a href="#5-更多讨论" class="headerlink" title="5 更多讨论"></a>5 更多讨论</h2><blockquote><p>讨论地址是：<a href="https://github.com/dt-fe/weekly/issues/82">精读《async/await 是把双刃剑》 · Issue #82 · dt-fe/weekly</a></p></blockquote><p><strong>如果你想参与讨论，请<a href="https://github.com/dt-fe/weekly">点击这里</a>，每周都有新的主题，周末或周一发布。</strong></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> async await </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用css属性选择器</title>
      <link href="/2022/05/1559170.html"/>
      <url>/2022/05/1559170.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-引言"><a href="#1-引言" class="headerlink" title="1 引言"></a>1 引言</h1><p>虽然现在 css Module 与 css-in-js 更流行，但使用它们会导致过分依赖 <strong>滥用 class 做唯一定位</strong>，违背了css 选择器的初衷。</p><p>本期精读的文章是：<a href="https://www.smashingmagazine.com/2018/10/attribute-selectors-splicing-html-dna-css/">attribute-selectors-splicing-html-dna-css</a>，带你重新理解强大的 Css 选择器。</p><h1 id="2-概要"><a href="#2-概要" class="headerlink" title="2 概要"></a>2 概要</h1><p>css Module 与 css-in-js 大部分场景使用 className 作为选择器，那么本文以选择器为重点，看看选择器有哪些实用的用法。</p><h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><p>如果你想选择包含 <code>title</code> 属性的 <code>div</code>：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">div[title]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选择包含 <code>title</code> 属性的子元素，只需要加个空格：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">div [title]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选择 <code>title</code> 内容是 <code>dna</code> 的元素：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">div[title=<span class="token string">"dna"</span>]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选择 <code>title</code> 属性包含 <code>dna</code> 单词的元素：</p><blockquote><p>注意 dna 需要是单词，也就是用空格分割，比如 “my beautiful dna” 或 “mutating dna is fun!”</p></blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css">div[title~=<span class="token string">"dna"</span>]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>和正则类似，选择 <code>title</code> 属性中，以 <code>dna</code> 结尾的元素：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">div[title$=<span class="token string">"dna"</span>]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以 <code>dna</code> 开头：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">div[title^=<span class="token string">"dna"</span>]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果希望选择 <code>dna</code> 或 <code>dna-zh</code>，但不希望匹配 <code>dnaer</code>，可以：</p><blockquote><p>这种场景一般用在国际化，比如 en en-us 就可以用 <code>|="en"</code></p></blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css">div[title|=<span class="token string">"dna"</span>]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>只要包含 <code>dna</code> 这三个字符就选中：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">div[title*=<span class="token string">"dna"</span>]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>真的很像正则，你可以用 <code>i</code> 标识匹配时大小写不敏感：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">div[title*=<span class="token string">"dna"</span> i]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你想找到一个 <code>a</code> 标签，拥有 <code>title</code> 属性并且 className 以 <code>genes</code> 结尾，可以这样：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">a[title][class$=<span class="token string">"genes"</span>]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="获取标签的值"><a href="#获取标签的值" class="headerlink" title="获取标签的值"></a>获取标签的值</h2><p>可以用 <code>attr</code> 标识符拿到当前选择器选中元素的属性，比如当 <code>hover</code> 状态时，在文字尾部显示其 <code>title</code> 属性：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.joke:hover:after</span> <span class="token punctuation">{</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"Answer:"</span> <span class="token function">attr</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="其它用法"><a href="#其它用法" class="headerlink" title="其它用法"></a>其它用法</h2><p>本文还介绍了一些实用技巧，比如</p><p><strong>根据输入框类型设置样式</strong></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">input[type="email"]</span> <span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> papayawhip<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">input[type="tel"]</span> <span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> thistle<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>改变下载标签的 icon</strong></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">a[download][href$="pdf"]:after</span> <span class="token punctuation">{</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>pdf-icon.svg<span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当然也可以选中一些老代码进行样式重写，比如：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000000<span class="token punctuation">"</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#FFFFFF<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Old, holey genes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div[bgcolor="#000000"]</span> <span class="token punctuation">{</span>  <span class="token comment">/*override*/</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #222222 <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>不过这种用法要谨慎，写的越多越难以维护。</p><p><strong>结合一些新标签功能</strong></p><p>比如 <code>details</code> 标签是 html 原生的手风琴折叠组件：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>details</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span>List of Genes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span> Roddenberry Hackman <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>details</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们可以使用属性选择器，定义其打开时的样式：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">details[open]</span> <span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> hotpink<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>为没有 <code>async</code> 标记的 <code>script</code> 标签着色</strong>，算是友情提示哪儿有错误：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">script[src]:not([async])</span> <span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">script:after</span> <span class="token punctuation">{</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">attr</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>为 JS 事件着色</strong>，比如触发的鼠标事件可以作为选择器：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">[OnMouseOver]</span> <span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> burlywood<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">[OnMouseOver]:after</span> <span class="token punctuation">{</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"JS: "</span> <span class="token function">attr</span><span class="token punctuation">(</span>OnMouseOver<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>选中隐藏元素：</strong></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">[hidden],[type="hidden"]</span> <span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>还有更多就不一一列举了，感兴趣的读者可以跳转到原文继续阅读。大部分内容其实都写在了 <a href="http://www.w3school.com.cn/cssref/css_selectors.asp">w3school 选择器参考手册</a>，只是结合一篇文章来读，可以理解得更深刻，同时文章里确实有一些新鲜的选择器，比如 JS 事件选择器，HTML5 属性标签选择器等等。</p><h1 id="3-精读"><a href="#3-精读" class="headerlink" title="3 精读"></a>3 精读</h1><p>这篇文章确实说明了 Css 选择器的强大性，但回到 css module 或者 css-in-js 的工程代码里，我们往往难以做太多的实践，有如下几个原因：</p><h2 id="一直在担心的-DOM-结构变动"><a href="#一直在担心的-DOM-结构变动" class="headerlink" title="一直在担心的 DOM 结构变动"></a>一直在担心的 DOM 结构变动</h2><p>业务开发中，大量需求涌入，也许过了一周，DOM 结构就已经面目全非了，而且就算是一个普通的圣杯布局，可能老版本用 Table 布局，后面进来一个年轻小伙子直接用 div + flex 重构了，你会担心之前写的 table 选择器在某一天全部失效。</p><p>也许今天的 div 选择器，明天因为语义化改造就换成了 article 标签。</p><p>最大原因是 <strong>一种视觉界面对应的实现方式太多</strong>，不仅标签可以各异，css 属性还有 table、block、flex、grid 可选，同时 grid 属性还会导致视觉结构与 DOM 结构不完全对应。</p><p>如果你今天用 css 选择器做了一套完全贴合现在 DOM 结构的 css 文件，这个 css 文件也许是后面 dom 结构改动的噩梦。</p><h2 id="你敢做全局样式覆盖吗"><a href="#你敢做全局样式覆盖吗" class="headerlink" title="你敢做全局样式覆盖吗"></a>你敢做全局样式覆盖吗</h2><p>我们排除标签，仅对属性做全局覆盖，的确可以部分绕开 DOM 结构的限制，但是这样的全局样式覆盖，不同的人有不同看法。</p><p>小明的团队非常懂得 css 运用，他们每天都会花一个小时讨论项目的 css 架构，并对通用需求样式做了抽象，并且每个人都很认可这个方案，在他们的团队，一个非常酷炫的按钮与动画效果，通过 <code>&lt;button animate /&gt;</code> 就可以完成，页面间交互非常流畅，用户体验统一，前端代码也非常简洁和优雅。</p><p>小白的团队水平参差不齐，有人永远只使用 table 布局，有人却总想将一些试验阶段 css 属性用在生产环境，小白自己抽象了一个全局样式 css 文件，可团队没什么时间沟通，甚至有人私下也注入了不少全局 css 样式，总有人抱怨自己的样式被全局覆盖了，最后小白甚至不得不在自己页面入口处写上 <code>*: unset</code> 清空各种奇怪的全局样式干扰，他想清空那该死的全局 css 样式文件，但他知道这样做带来的是更大的灾难。</p><p>可以看到，并不是每个团队都适合做全局样式覆盖。</p><h2 id="JS-模块化思维的影响"><a href="#JS-模块化思维的影响" class="headerlink" title="JS 模块化思维的影响"></a>JS 模块化思维的影响</h2><p>为什么一个项目安装了几百个 npm 三方包，却依然可以正常运行？因为好的三方包都是遵守模块化的，同时也不产生副作用，这样被使用时的效果就可以被预期，试想一下几百个 npm 包里同时定义了不同规范的全局 css 覆盖，你的项目会成为什么样。</p><p>当然 js 与 css 是不适合放在一起比较的，css 大多是业务级别的，也就是能写 css 只有做业务的你，第三方包一般是不会提供 css 定义干扰你的项目的。</p><p>然而大部分 UI 组件库是自带样式的，他们有自己的设计哲学，但为什么现在你会反感，而当初使用 Bootstrap 不会？</p><p>使用 Bootstrap 的时代，Bootstrap 一般是作为项目第一个依赖安装的，我们明确知道它会注入全局样式。我们会泡在他的官方文档目录，一条条理解他做的全局样式规则，他提供的各种 class。</p><p>然而现在是一个 Css-in-js 的时代，或者至少是 css-in-npm 的时代，什么都用 npm 装，什么都是模块化的，很多时候我们用一个 UI 组件仅仅是为了在某一处地方使用，而不想接受他带来的全局样式污染，视觉设计哲学，更不想看他的 css 文档。所以好的组件库往往 css 使用的很收敛，尽量不要对用户项目环境造成影响。</p><p>如果你项目的样式已经被不得不安装的第三方包全局覆盖得面目全非，每一次对全局样式修改都如履薄冰，可能你会比较反感 css 选择器，你会推崇更安全的 css modules，或甚至是 css-in-js，让每个组件的 className 都唯一，做到标签粒度的隔离。</p><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h1><p>笔者认为，在一个确定的环境中，比如一个组件，一个独立负责的模块，是比较适合用 css 选择器的，这样可以让样式代码更易读，DOM 结构更清爽。但请一定注意作用域，如果不是大家一起达成的共识，最好不要放到全局样式中。</p><p>就算项目的风格非常明确，<code>a</code> 标签一定要用红色，在把这条规则放到全局样式之前，请思考一下，这样会不会破坏了某个用 <code>a</code> 标签模拟按钮的组件库的样式？</p><p>css 属性选择器的强大功能，需要有良好的项目管理做支撑，或者通过技术手段比如 shadow dom 做支撑。不过 shadow dom 的支持程度 <a href="https://caniuse.com/#search=shadow%20dom">现在仍然很低</a>，所以使用编译工具做的隔离，在某种程度上模拟了 Css 选择器，承担了 Css 选择器 + shadow dom 的功能。</p><p>一切样式都用 className 控制，也许是 shadow dom 出来前的一种妥协方案，这篇文章更多是在描述 Css 选择器设计之美，但需要我们理性去使用。</p><blockquote><p>讨论地址是：<a href="https://github.com/dt-fe/weekly/issues/113">精读《使用 CSS 属性选择器》 · Issue #113 · dt-fe/weekly</a></p></blockquote><p><strong>如果你想参与讨论，请<a href="https://github.com/dt-fe/weekly">点击这里</a>，每周都有新的主题，周末或周一发布。前端精读 - 帮你筛选靠谱的内容。</strong></p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css属性选择器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AsyncAwait 优越之处</title>
      <link href="/2022/05/1038372.html"/>
      <url>/2022/05/1038372.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本期精读的文章是：<a href="https://hackernoon.com/6-reasons-why-javascripts-async-await-blows-promises-away-tutorial-c7ec10518dd9">6 Reasons Why JavaScript’s Async/Await Blows Promises Away</a></p><h1 id="1-引言"><a href="#1-引言" class="headerlink" title="1 引言"></a>1 引言</h1><img src="https://img.alicdn.com/imgextra/i4/O1CN01HcU2pR1XbTts6EZS5_!!6000000002942-2-tps-594-288.png" alt="logo" width="500"><p>我为什么要选这篇文章呢？</p><p>前端异步问题处理一直是一个老大难的问题，前有 Callback Hell 的绝望，后有 Promise/Deferred 的规范混战，从 Generator 配合 co 所向披靡，到如今 Async/Await 改变世界。为什么异步问题如此难处理，Async/Await 又能在多大程度上解决我们开发和调试过程中遇到的难点呢？希望这篇文章能给我们带来一些启发。</p><p>当然，本文不是一篇针对前端异步问题综合概要性的文章，更多的是从 Async/Await 的优越性谈起。但这并不妨碍我们从 Async/Await 的特点出发，结合自己在工作、开发过程中的经验教训，认真的思考和总结如何更优雅、更高效的处理异步问题。</p><h1 id="2-内容概要"><a href="#2-内容概要" class="headerlink" title="2 内容概要"></a>2 内容概要</h1><p>Async/Await 的优点：</p><ul><li>语法简洁清晰，节省了很多不必要的匿名函数</li><li>直接使用 try…catch… 进行异常处理</li><li>添加条件判断更符合直觉</li><li>减少不必要的中间变量</li><li>更清晰明确的错误堆栈</li><li>调试时可以轻松给每个异步调用加断点</li></ul><p>Async/Await 的局限：</p><ul><li>降低了我们阅读理解代码的速度，此前看到 <code>.then()</code> 就知道是异步，现在需要识别 <code>async</code> 和 <code>await</code> 关键字</li><li>目前支持 Async/Await 的 Node.js 版本（Node 7）并非 LTS 版本，但是下一个 LTS 版本很快将会发布</li></ul><p>可以看出，文中提到 Async/Await 的优势大部分都是从开发调试效率提升层面来讲的，提到的问题或者说局限也只有不痛不痒的两点。</p><p>让我们来看看参与精读的同学都提出了哪些深度观点：</p><h1 id="3-精读"><a href="#3-精读" class="headerlink" title="3 精读"></a>3 精读</h1><p>本次提出独到观点的同学有：<a href="http://link.zhihu.com/?target=https://github.com/javie007">@javie007</a>  <a href="https://www.zhihu.com/people/6c772f9726a914ed4a4b90c88010461c">@流形</a> <a href="https://www.zhihu.com/people/078cc0fb15845759ad8295b0f0e50099">@camsong</a> <a href="https://www.zhihu.com/people/turbe-xue">@Turbe Xue</a> <a href="https://www.zhihu.com/people/5ac53c9c0484e83672e1c1716bdf0ff9">@淡苍</a> <a href="https://www.zhihu.com/people/38c3c75795824de1bc5d99cff904a832">@留影</a>  <a href="https://www.zhihu.com/people/3ec85a04bc9eaa35b1830874cc463a52">@黄子毅</a> 精读由此归纳。</p><h3 id="Async-Await-并不是什么新鲜概念"><a href="#Async-Await-并不是什么新鲜概念" class="headerlink" title="Async/Await 并不是什么新鲜概念"></a>Async/Await 并不是什么新鲜概念</h3><p>参与精读的很多同学都提出来，Async/Await 并不是什么新鲜的概念，事实的确如此。</p><p>早在 2012 年微软的 C# 语言发布 5.0 版本时，就正式推出了 Async/Await 的概念，随后在 Python 和 Scala 中也相继出现了 Async/Await 的身影。再之后，才是我们今天讨论的主角，ES 2016 中正式提出了 Async/Await 规范。</p><p>以下是一个在 C# 中使用 Async/Await 的示例代码：</p><pre class="line-numbers language-c-sharp" data-language="c-sharp"><code class="language-c-sharp">public async Task&lt;int&gt; SumPageSizesAsync(IList&lt;Uri&gt; uris) {    int total = 0;    foreach (var uri in uris) {        statusText.Text = string.Format("Found {0} bytes ...", total);        var data = await new WebClient().DownloadDataTaskAsync(uri);        total += data.Length;    }    statusText.Text = string.Format("Found {0} bytes total", total);    return total;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再看看在 JavaScript 中的使用方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">createNewDoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// post a new doc</span>  <span class="token keyword">return</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// find by id</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>不难看出两者单纯在异步语法上，并没有太多的差异。这也是为什么 Async/Await 推出后，获得不少赞许和亲切感的原因之一吧。</p><p>其实在前端领域，也有不少类 Async/Await 的实现，其中不得不提到的就是知名网红之一的老赵写的 <a href="https://github.com/JeffreyZhao/wind">wind.js</a>，站在今天的角度看，windjs 的设计和实现不可谓不超前。</p><h3 id="Async-Await-是如何实现的"><a href="#Async-Await-是如何实现的" class="headerlink" title="Async/Await 是如何实现的"></a>Async/Await 是如何实现的</h3><p>根据 <a href="https://tc39.github.io/ecmascript-asyncawait/">Async/Await 的规范</a> 中的描述 —— 一个 Async 函数总是会返回一个 Promise —— 不难看出 Async/Await 和 Promise 存在千丝万缕的联系。这也是为什么不少参与精读的同学都说，Async/Await 不过是一个语法糖。</p><p>单谈规范太枯燥，我们还是看看实际的代码。下面是一个最基础的 Async/Await 例子：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> img <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'tiger.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用 Babel 转换后：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> _ref <span class="token operator">=</span> <span class="token function">_asyncToGenerator</span><span class="token punctuation">(</span>regeneratorRuntime<span class="token punctuation">.</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">_callee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> img<span class="token punctuation">;</span>        <span class="token keyword">return</span> regeneratorRuntime<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">_callee$</span><span class="token punctuation">(</span><span class="token parameter">_context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">switch</span> <span class="token punctuation">(</span>_context<span class="token punctuation">.</span>prev <span class="token operator">=</span> _context<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>                        _context<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'tiger.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>                        img <span class="token operator">=</span> _context<span class="token punctuation">.</span>sent<span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>                    <span class="token keyword">case</span> <span class="token string">'end'</span><span class="token operator">:</span>                        <span class="token keyword">return</span> _context<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> _callee<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">_ref</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">_asyncToGenerator</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> gen <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">function</span> <span class="token function">step</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> arg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token keyword">var</span> info <span class="token operator">=</span> gen<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">var</span> value <span class="token operator">=</span> info<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>info<span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">step</span><span class="token punctuation">(</span><span class="token string">"next"</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">step</span><span class="token punctuation">(</span><span class="token string">"throw"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token function">step</span><span class="token punctuation">(</span><span class="token string">"next"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不难看出，Async/Await 的实现被转换成了基于 Promise 的调用。值得注意的是，原来只需 3 行代码即可解决的问题，居然被转换成了 52 行代码，这还是基于执行环境中已经存在 regenerator 的前提之一。如果要在兼容性尚不是非常理想的 Web 环境下使用，代码 overhead 的成本不得不纳入考虑。</p><h3 id="Async-Await-真的是更优秀的替代方案吗"><a href="#Async-Await-真的是更优秀的替代方案吗" class="headerlink" title="Async/Await 真的是更优秀的替代方案吗"></a>Async/Await 真的是更优秀的替代方案吗</h3><p>不知道是个人观察偏差，还是大家普遍都有这样的看法。在国内前端圈子里，并没有对 Async/Await 的出现表现出多么大的兴趣，几种常见的观点是：「还不是基于 Promise 的语法糖，没什么意思」、「现在使用 co 已经能完美解决异步问题，不需要再引入什么新的概念」、「浏览器兼容性这么差，用 Babel 编译又需要引入不少依赖，使用成本太高」等等。</p><p>在本次精读中，也有不少同学指出了使用 Async/Await 的局限性。</p><p>比如，使用 Async/Await 并不能很好的支持异步并发。考虑下面这种情况，一个模块需要发送 3 个请求并在获得结果后才能进行渲染，3 个请求之间没有依赖关系。如果使用 Async/Await，写法如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">mount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> result1 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'a.json'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> result2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'b.json'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> result3 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'c.json'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span>result1<span class="token punctuation">,</span> result2<span class="token punctuation">,</span> result3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样的写法在异步上确实简洁不少，但是 3 个异步请求是顺序执行的，并没有充分利用到异步的优势。要想实现真正的异步，还是需要依赖 <code>Promise.all</code> 封装一层：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">mount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'a.json'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'b.json'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'c.json'</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">...</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此外，正如在上文中提到的，async 函数默认会返回一个 Promise，这也意味着 Promise 中存在的问题 async 函数也会遇到，那就是 —— 默认会静默的吞掉异常。</p><p>所以，虽然 Async/Await 能够使用 try…catch… 这种符合同步习惯的方式进行异常捕获，你依然不得不手动给每个 await 调用添加 try…catch… 语句，否则，async 函数返回的只是一个 reject 掉的 Promise 而已。</p><h3 id="异步还有哪些问题需要解决"><a href="#异步还有哪些问题需要解决" class="headerlink" title="异步还有哪些问题需要解决"></a>异步还有哪些问题需要解决</h3><p>虽然处理异步问题的技术一直在进步，但是在实际工程实践中，我们对异步操作的需求也在不断扩展加深，这也是为什么各种 flow control 的库一直兴盛不衰的原因之一。</p><p>在本次精读中，大家肯定了 Async/Await 在处理异步问题的优越性，但也提到了其在异步问题处理上的一些不足：</p><ul><li>缺少复杂的控制流程，如 always、progress、pause、resume 等</li><li>缺少中断的方法，无法 abort</li></ul><p>当然，站在 EMCA 规范的角度来看，有些需求可能比较少见，但是如果纳入规范中，也可以减少前端程序员在挑选异步流程控制库时的纠结了。</p><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3 总结"></a>3 总结</h1><p>Async/Await 的确是更优越的异步处理方案，但我们相信这一定不是终极处理方案。随着前端工程化的深入，一定有更多、更复杂、更精细的异步问题出现，同时也会有迎合这些问题的解决方案出现，比如精读中很多同学提到的 RxJS 和 js-csp。</p><blockquote><p>讨论地址是：<a href="http://link.zhihu.com/?target=https://github.com/dt-fe/weekly/issues/6">那些年我们处理过的异步问题 · Issue #6 · dt-fe/weekly</a></p></blockquote><blockquote><p>如果你想参与讨论，请<a href="https://github.com/dt-fe/weekly">点击这里</a>，每周都有新的主题，每周五发布。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> async await </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>精通cosole.log</title>
      <link href="/2022/05/0616920.html"/>
      <url>/2022/05/0616920.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1 引言"></a>1 引言</h2><p>本周精读的文章是 <a href="https://medium.com/javascript-in-plain-english/mastering-js-console-log-like-a-pro-1c634e6393f9">Mastering JS console.log like a Pro</a>，一起来更全面的认识 console 吧！</p><h2 id="2-概述-amp-精读"><a href="#2-概述-amp-精读" class="headerlink" title="2 概述 &amp; 精读"></a>2 概述 &amp; 精读</h2><p>console 的功能主要在于控制台打印，它可以打印任何字符、对象、甚至 DOM 元素和系统信息，下面一一介绍。</p><h3 id="console-log-info-debug-warn-error"><a href="#console-log-info-debug-warn-error" class="headerlink" title="console.log( ) | info( ) | debug( ) | warn( ) | error( )"></a>console.log( ) | info( ) | debug( ) | warn( ) | error( )</h3><p>直接打印字符，区别在于展示形态的不同：</p><img width="400" src="https://img.alicdn.com/tfs/TB1xZ_WveH2gK0jSZFEXXcqMpXa-1492-566.png"><p>新版 chrome 控制台可以将打印信息分类：</p><img width="200" src="https://img.alicdn.com/tfs/TB1fZ2Vvhn1gK0jSZKPXXXvUXXa-420-446.png"><p><code>log()</code> 与 <code>info()</code> 都对应 <code>info</code>，<code>warn()</code> 对应 <code>warnings</code>，<code>error()</code> 对应 <code>errors</code>，而 <code>debug()</code> 对应 <code>verbose</code>，因此建议在合适的场景使用合适的打印习惯，这样排查问题时也可以有针对性的筛选。</p><p>比如调试信息可以用 <code>console.debug</code> 仅在调试环境下输出，调试者即便开启了调试参数也不会影响正常 <code>info</code> 的查看，因为调试信息都输出在 <code>verbose</code> 中。</p><h3 id="使用占位符"><a href="#使用占位符" class="headerlink" title="使用占位符"></a>使用占位符</h3><ul><li>%o — 对象</li><li>%s — 字符串</li><li>%d — 数字</li></ul><p>如下所示，可通过占位符在一行中插入不同类型的值：</p><img width="400" src="https://img.alicdn.com/tfs/TB1GtL3vlr0gK0jSZFnXXbRRXXa-1840-504.png"><h3 id="添加-CSS-样式"><a href="#添加-CSS-样式" class="headerlink" title="添加 CSS 样式"></a>添加 CSS 样式</h3><ul><li>%c - 样式</li></ul><img width="400" src="https://img.alicdn.com/tfs/TB1eK23vlr0gK0jSZFnXXbRRXXa-1832-978.png"><p>可以总结出，<strong>console 支持输出复杂的内容，其输出能力堪比 HTML，但输入能力太弱，仅为字符串，因此采用了占位符 + 多入参修饰的设计模式解决这个问题。</strong></p><h3 id="console-dir"><a href="#console-dir" class="headerlink" title="console.dir( )"></a>console.dir( )</h3><p>按 JSON 模式输出。笔者在这里也补充一句：<code>console.log()</code> 会自动判断类型，如果内容是 DOM 属性，则输出 DOM 树，但 <code>console.dir</code> 会强制以 JSON 模式输出，用在 DOM 对象时可强制转换为 JSON 输出。</p><img width="400" src="https://img.alicdn.com/tfs/TB1KQY1vbj1gK0jSZFuXXcrHpXa-922-302.png"><h3 id="输出-HTML-元素"><a href="#输出-HTML-元素" class="headerlink" title="输出 HTML 元素"></a>输出 HTML 元素</h3><p>按照 HTML ELements 结构输出：</p><img width="400" src="https://img.alicdn.com/tfs/TB1mZ61va61gK0jSZFlXXXDKFXa-920-255.png"><p>这种输出结构和 Elements 打印形式是一致的，如果要看详细属性，可以使用 <code>console.dir()</code>。</p><h3 id="console-table"><a href="#console-table" class="headerlink" title="console.table"></a>console.table</h3><p>在控制台打印一个表格，属于功能增强。虽然仅文本也可以在控制台打印出漂亮的表格，但浏览器调试控制台的功能更强大，<code>console.table</code> 只是其富文本能力的一个体现。</p><img width="400" src="https://img.alicdn.com/tfs/TB1WldouKbviK0jSZFNXXaApXXa-928-742.png"><h3 id="console-group-amp-console-groupEnd"><a href="#console-group-amp-console-groupEnd" class="headerlink" title="console.group( ) &amp; console.groupEnd( )"></a>console.group( ) &amp; console.groupEnd( )</h3><p>接下来是另一个富文本能力，按分组输出：</p><img width="400" src="https://img.alicdn.com/tfs/TB1UV6UvXY7gK0jSZKzXXaikpXa-919-377.png"><p>这种带有副作用的 API 显然是为方便阅读而设计的，然而在需要输出大量动态结构化数据的场景下，还需要进行结构转换，是比较麻烦的地方。</p><h3 id="console-count"><a href="#console-count" class="headerlink" title="console.count( )"></a>console.count( )</h3><p><code>count()</code> 用来打印调用次数，一般用在循环或递归函数中。接收一个 <code>label</code> 参数以定制输出，默认直接输出 <code>1 2 3</code> 数字。</p><img width="400" src="https://img.alicdn.com/tfs/TB1ELLVveL2gK0jSZPhXXahvXXa-917-500.png"><h3 id="console-assert"><a href="#console-assert" class="headerlink" title="console.assert( )"></a>console.assert( )</h3><p><code>console</code> 版断言工具，当且仅当第一个参数值为 <code>false</code> 时才打印第二个参数作为输出。</p><img width="400" src="https://img.alicdn.com/tfs/TB1HEDUvfb2gK0jSZK9XXaEgFXa-1842-548.png"><p>这种输出结果为 error，所以也可被 <code>console.error</code> + 代码级别断言所取代。</p><h3 id="console-trace"><a href="#console-trace" class="headerlink" title="console.trace( )"></a>console.trace( )</h3><p>打印此时的调用栈，在打印辅助调试信息时非常有用。</p><img width="400" src="https://img.alicdn.com/tfs/TB1Jh_YvkL0gK0jSZFAXXcA9pXa-1840-1096.png"><h3 id="console-time"><a href="#console-time" class="headerlink" title="console.time( )"></a>console.time( )</h3><p>打印代码执行时间，性能优化和监控场景比较常见。</p><img width="400" src="https://img.alicdn.com/tfs/TB1wAT2vbj1gK0jSZFuXXcrHpXa-1612-524.png"><h3 id="console-memory"><a href="#console-memory" class="headerlink" title="console.memory"></a>console.memory</h3><p>打印内存使用情况。</p><img width="400" src="https://img.alicdn.com/tfs/TB1tPHYvkL0gK0jSZFAXXcA9pXa-1842-440.png"><h3 id="console-clear"><a href="#console-clear" class="headerlink" title="console.clear( )"></a>console.clear( )</h3><p>清空控制台输出。</p><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3 总结"></a>3 总结</h2><p><code>console</code> 提供了如此多的输出规范，其实也是在变相制定开发规范，毕竟离开发者最近的就是调试控制台，如果你的项目打印规范与标准规范有差异，那么调试时信息看起来就会很别扭。</p><p>可以看到，大部分开源库都良好的遵循了这套规范，比如三方库绝不会输出 <code>log()</code>，而且将错误、警告与调试信息正确分开，并尽量少的用 CSS 样式、分组、<code>table</code> 等功能，因为这些功能干扰性较强，不能保证所有用户都可接受。</p><p>相对的，项目源码就比较适合使用一些醒目的自定义规范，只要这套规则能被很好的执行起来。</p><p>最后留下一个讨论点：<code>console</code> 可以作为调试、招聘信息、隐藏菜单的投放点，你还看到过哪些有意思的 <code>console</code> 使用方式呢？欢迎留言。</p><blockquote><p>讨论地址是：<a href="https://github.com/dt-fe/weekly/issues/228">精读《精通 console.log》 · Issue #228 · dt-fe/weekly</a></p></blockquote><blockquote><p>版权声明：自由转载-非商用-非衍生-保持署名（<a href="https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">创意共享 3.0 许可证</a>）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> tips </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>深入了解现代浏览器四</title>
      <link href="/2022/05/0129472.html"/>
      <url>/2022/05/0129472.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><a href="https://developers.google.com/web/updates/2018/09/inside-browser-part4">Inside look at modern web browser</a> 是介绍浏览器实现原理的系列文章，共 4 篇，本次精读介绍第四篇。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>前几章介绍了浏览器的基础进程、线程以及它们之间协同的关系，并重点说到了渲染进程是如何处理页面绘制的，那么最后一章也就深入到了浏览器是如何处理页面中事件的。</p><p>全篇站在浏览器实现的视角思考问题，非常有趣。</p><h3 id="输入进入合成器"><a href="#输入进入合成器" class="headerlink" title="输入进入合成器"></a>输入进入合成器</h3><p>这是第一小节的标题。乍一看可能不明白在说什么，但这句话就是本文的核心知识点。为了更好的理解这句话，先要解释输入与合成器是什么：</p><ul><li>输入：不仅包括输入框的输入，其实所有用户操作在浏览器眼中都是输入，比如滚动、点击、鼠标移动等等。</li><li>合成器：第三节说过的，渲染的最后一步，这一步在 GPU 进行光栅化绘图，如果与浏览器主线程解耦的化效率会非常高。</li></ul><p>所以输入进入合成器的意思是指，在浏览器实际运行的环境中，合成器不得不响应输入，这可能会导致合成器本身渲染被阻塞，导致页面卡顿。</p><h3 id="“non-fast”-滚动区域"><a href="#“non-fast”-滚动区域" class="headerlink" title="“non-fast” 滚动区域"></a>“non-fast” 滚动区域</h3><p>由于 js 代码可以绑定事件监听，而且事件监听中存在一种 <code>preventDefault()</code> 的 API 可以阻止事件的原生效果比如滚动，所以在一个页面中，浏览器会对所有创建了此监听的区块标记为 “non-fast” 滚动区域。</p><p>注意，只要创建了 <code>onwheel</code> 事件监听就会标记，而不是说调用了 <code>preventDefault()</code> 才会标记，因为浏览器不可能知道业务什么时候调用，所以只能一刀切。</p><p>为什么这种区域被称为 “non-fast”？因为在这个区域触发事件时，合成器必须与渲染进程通信，让渲染进程执行 js 事件监听代码并获得用户指令，比如是否调用了 <code>preventDefault()</code> 来阻止滚动？如果阻止了就终止滚动，如果没有阻止才会继续滚动，如果最终结果是不阻止，但这个等待时间消耗是巨大的，在低性能设备比如手机上，滚动延迟甚至有 10～100ms。</p><p>然而这并不是设备性能差导致的，因为滚动是在合成器发生的，如果它可以不与渲染进程通信，那么即便是 500 元的安卓机也可以流畅的滚动。</p><h3 id="注意事件委托"><a href="#注意事件委托" class="headerlink" title="注意事件委托"></a>注意事件委托</h3><p>更有意思的是，浏览器支持一种事件委托的 API，它可以将事件委托到其父节点一并监听。</p><p>这本是一个非常方便的 API，但对浏览器实现可能是一个灾难：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'touchstart'</span><span class="token punctuation">,</span> <span class="token parameter">event</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>target <span class="token operator">===</span> area<span class="token punctuation">)</span> <span class="token punctuation">{</span>    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果浏览器解析到上面的代码，只能用无语来形容。因为这意味着必须对全页面都进行 “non-fast” 标记，因为代码委托的是整个 document！这会导致滚动非常慢，因为在页面任何地方滚动都要发生一次合成器与渲染进程的通信。</p><p>所以最好的办法就是不要写这种监听。但还有一种方案是，告诉浏览器你不会 <code>preventDefault()</code>，这是因为 chrome 通过对应用源码统计后发现，大约 80% 的事件监听没有 <code>preventDefault()</code>，而仅仅是做别的事情，所以合成器应该可以与渲染进程的事件处理并行进行，这样既不卡顿，逻辑也不会丢失。所以添加了一种 <code>passive: true</code> 的标记，标识当前事件可以并行处理：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'touchstart'</span><span class="token punctuation">,</span> <span class="token parameter">event</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>target <span class="token operator">===</span> area<span class="token punctuation">)</span> <span class="token punctuation">{</span>    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>passive<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就不会卡顿了，但 <code>preventDefault()</code> 也会失效。</p><h3 id="检查事件是否可取消"><a href="#检查事件是否可取消" class="headerlink" title="检查事件是否可取消"></a>检查事件是否可取消</h3><p>对于 <code>passive: true</code> 的情况，事件就实际上变得不可取消了，所以我们最好在代码里做一层判断：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'touchstart'</span><span class="token punctuation">,</span> <span class="token parameter">event</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>cancelable <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span>target <span class="token operator">===</span> area<span class="token punctuation">)</span> <span class="token punctuation">{</span>    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>passive<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然而这仅仅是阻止执行没有意义的 <code>preventDefault()</code>，并不能阻止滚动。这种情况下，最好的办法是通过 css 申明来阻止横向移动，因为这个判断不会发生在渲染进程，所以不会导致合成器与渲染进程的通信：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#area</span> <span class="token punctuation">{</span>  <span class="token property">touch-action</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="事件合并"><a href="#事件合并" class="headerlink" title="事件合并"></a>事件合并</h3><p>由于事件触发频率可能比浏览器帧率还要高（1 秒 120 次），如果浏览器坚持对每个事件都进行响应，而一次事件都必须在 js 里响应一次的话，会导致大量事件阻塞，因为当 FPS 为 60 时，一秒也仅能执行 60 次事件响应，所以事件积压是无法避免的。</p><p>为了解决这个问题，浏览器在针对可能导致积压的事件，比如滚动事件时，将多个事件合并到一次 js 中，仅保留最终状态。</p><p>如果不希望丢掉事件中间过程，可以使用 <code>getCoalescedEvents</code> 从合并事件中找回每一步事件的状态：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'pointermove'</span><span class="token punctuation">,</span> <span class="token parameter">event</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> events <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getCoalescedEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> event <span class="token keyword">of</span> events<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> x <span class="token operator">=</span> event<span class="token punctuation">.</span>pageX<span class="token punctuation">;</span>    <span class="token keyword">const</span> y <span class="token operator">=</span> event<span class="token punctuation">.</span>pageY<span class="token punctuation">;</span>    <span class="token comment">// draw a line using x and y coordinates.</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="精读"><a href="#精读" class="headerlink" title="精读"></a>精读</h2><p>只要我们认识到事件监听必须运行在渲染进程，而现代浏览器许多高性能 “渲染” 其实都在合成层采用 GPU 做，所以看上去方便的事件监听肯定会拖慢页面流畅度。</p><p>但就这件事在 React 17 中有过一次讨论 <a href="https://github.com/facebook/react/issues/19651">Touch/Wheel Event Passiveness in React 17</a>（实际上在即将到来的 18 该问题还在讨论中 <a href="https://github.com/facebook/react/issues/22794">React 18 not passive wheel / touch event listeners support</a>），因为 React 可以直接在元素上监听 Touch、Wheel 事件，但其实框架采用了委托的方式在 document（后在 app 根节点）统一监听，这就导致了用户根本无从决定事件是否为 <code>passive</code>，如果框架默认 <code>passive</code>，会导致 <code>preventDefault()</code> 失效，否则性能得不到优化。</p><p>就结论而言，React 目前还是对几个受影响的事件 <code>touchstart</code> <code>touchmove</code> <code>wheel</code> 采用 <code>passive</code> 模式，即：</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">const</span> <span class="token function-variable function">Test</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>    <span class="token comment">// 没有用的，无法阻止滚动，因为委托处默认 passive</span>    <span class="token attr-name">onWheel</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token parameter">event</span> <span class="token operator">=&gt;</span> event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>  <span class="token punctuation">&gt;</span></span><span class="token plain-text">    ...  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然结论如此而且对性能友好，但并不是一个让所有人都能满意的方案，我们看看当时 Dan 是如何思考，并给了哪些解决方案的。</p><p>首先背景是，React 16 事件委托绑定在 document 上，React 17 事件委托绑定在 App 根节点上，而根据 chrome 的优化，绑定在 document 的事件委托默认是 <code>passive</code> 的，而其它节点的不会，因此对 React 17 来说，如果什么都不做，仅改变绑定节点位置，就会存在一个 Break Change。</p><ol><li>第一种方案是坚持 Chrome 性能优化的精神，委托时依然 pasive 处理。这样处理至少和 React 16 一样，<code>preventDefault()</code> 都是失效的，虽然不正确，但至少不是 BreakChange。</li><li>第二种方案即什么都不做，这导致原本默认 <code>passive</code> 的因为绑定到非 document 节点上而 <code>non-passive</code> 了，这样做不仅有性能问题，而且 API 会存在 BreackChange，虽然这种做法更 “原生”。</li><li>touch/wheel 不再采用委托，意味着浏览器可以有更少的 “non-fast” 区域，而 <code>preventDefault()</code> 也可以生效了。</li></ol><p>最终选择了第一个方案，因为暂时不希望在 React API 层面出现行为不一致的 BreakChange。</p><p>然而 React 18 是一次 BreakChange 的时机，目前还没有进一步定论。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从浏览器角度看待问题会让你具备上帝视角而不是开发者视角，你不会再觉得一些奇奇怪怪的优化逻辑是 Hack 了，因为你了解浏览器背后是如何理解与实现的。</p><p>不过我们也会看到一些和实现强绑定的无奈，在前端开发框架实现时造成了不可避免的困扰。毕竟作为一个不了解浏览器实现的开发者，自然会认为 <code>preventDefault()</code> 绑定在滚动事件时，一定可以阻止默认滚动行为呀，但为什么因为：</p><ul><li>浏览器分为合成层和渲染进程，通信成本较高导致滚动事件监听会引发滚动卡顿。</li><li>为了避免通信，浏览器默认为 document 绑定开启 <code>passive</code> 策略减少 “non-fast” 区域。</li><li>开启了 <code>passive</code> 的事件监听 <code>preventDefault()</code> 会失效，因为这层实现在 js 里而不是 GPU。</li><li>React16 采用事件代理，把元素 <code>onWheel</code> 代理到 document 节点而非当前节点。</li><li>React17 将 document 节点绑定下移到了 App 根节点，因此浏览器优化后的 <code>passive</code> 失效了。</li><li>React 为了保持 API 不发生 BreakChange，因此将 App 根节点绑定的事件委托默认补上了 <code>passive</code>，使其表现与绑定在 document 一样。</li></ul><p>总之就是 React 与浏览器实现背后的纠纷，导致滚动行为阻止失效，而这个结果链条传导到了开发者身上，而且有明显感知。但了解背后原因后，你应该能理解一下 React 团队的痛苦吧，因为已有 API 确实没有办法描述是否 <code>passive</code> 这个行为，所以这是个暂时无法解决的问题。</p><blockquote><p>讨论地址是：<a href="https://github.com/dt-fe/weekly/issues/381">精读《深入了解现代浏览器四》· Issue #381 · dt-fe/weekly</a></p></blockquote><blockquote><p>版权声明：自由转载-非商用-非衍生-保持署名（<a href="https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">创意共享 3.0 许可证</a>）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 现代浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入了解现代浏览器三</title>
      <link href="/2022/04/2536584.html"/>
      <url>/2022/04/2536584.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><a href="https://developers.google.com/web/updates/2018/09/inside-browser-part2">Inside look at modern web browser</a> 是介绍浏览器实现原理的系列文章，共 4 篇，本次精读介绍第二篇。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本篇重点介绍了 <strong>浏览器路由跳转后发生了什么</strong>，下一篇会介绍浏览器的渲染进程是如何渲染网页的，环环相扣。</p><p>在上一篇介绍了，browser process 包含 UI thread、network thread 和 storage thread，当我们在浏览器菜单栏输入网址并敲击回车时，这套动作均由 browser process 的 UI thread 响应。</p><p>接下来，按照几种不同的路由跳转场景，分别介绍了内部流程。</p><h3 id="普通的跳转"><a href="#普通的跳转" class="headerlink" title="普通的跳转"></a>普通的跳转</h3><p>第一步，UI thread 响应输入，并判断是否为一个合法的网址，当然输入的也可能是个搜索协议，这就会导致分发到另外的服务处理。</p><p>第二步，如果第一步输入的是合法网址，则 UI thread 会通知 network thread 获取网页内容，network thread 会寻找合适的协议处理网络请求，一般会通过 <a href="https://en.wikipedia.org/wiki/Domain_Name_System">DNS 协议</a> 寻址，通过 <a href="https://en.wikipedia.org/wiki/Transport_Layer_Security">TLS 协议</a> 建立安全链接。如果服务器返回了比如 301 重定向信息，network thread 会通知 UI thread 这个信息，再启动一遍第二步。</p><p>第三步，读取响应内容，在这一步 network thread 会首先读取首部一些字节，即我们常说的响应头，其中包含 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types">Content-Type</a> 告知返回内容是什么。如果返回内容是 HTML，则 network thread 会将数据传送给 renderer process。这一步还会校验安全性，比如 <a href="https://www.chromium.org/Home/chromium-security/corb-for-developers">CORB</a> 或 <a href="https://en.wikipedia.org/wiki/Cross-site_scripting">cross-site</a> 问题。</p><p>第四步，寻找 renderer process。一旦所有检查都完成，network thread 会通知 UI thread 已经准备好跳转了（注意此时并没有加载完所有数据，第三步只是检查了首字节），UI thread 会通知 renderer process 进行渲染。为了提升性能，UI thread 在通知 network thread 的同时就会实例化一个 renderer process 等着，一旦 network thread 完毕后就可以立即进入渲染阶段，如果检查失败则丢弃提前实例化的 renderer process。</p><p>第五步，确认导航。第四步后，browser process 通过 IPC 向 renderer process 传送 stream（<a href="https://github.com/ascoders/weekly/blob/master/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF/214.%E7%B2%BE%E8%AF%BB%E3%80%8Aweb%20streams%E3%80%8B.md">精读《web streams》</a>）数据。此时导航会被确认，浏览器的各个状态（比如导航状态、前进后退历史）将会被修改，同时为了方便 tab 关闭后快速恢复，会话记录会被存储在硬盘。</p><p>额外步骤，加载完成。当 renderer process 加载完成后（具体做了什么下一篇会说明），会通知 browser process <code>onLoad</code> 事件，此时浏览器完成最终加载完毕状态，loading 圆圈也会消失，各类 onLoad 的回调触发。注意此时 js 可能会继续加载远程资源，但这都是加载状态完成后的事了。</p><h3 id="跳转到别的网站"><a href="#跳转到别的网站" class="headerlink" title="跳转到别的网站"></a>跳转到别的网站</h3><p>当你准备跳转到别的网站时，在执行普通跳转流程前，还会响应 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event">beforeunload</a> 事件，这个事件注册在 renderer process，所以 browser process 需要检查 renderer process 是否注册了这个响应。注册 <code>beforeunload</code> 无论如何都会拖慢关闭 tab 的速度，所以如无必要请勿注册。</p><p>如果跳转是 js 发出的，那么执行跳转就由 renderer process 触发，browser process 来执行，后续流程就是普通的跳转流程。要注意的是，当执行跳转时，会触发原网站 <code>unload</code> 等事件（<a href="https://developers.google.com/web/updates/2018/07/page-lifecycle-api#overview_of_page_lifecycle_states_and_events">网页生命周期</a>），所以这个由旧的 renderer process 响应，而新网站会创建一个新的 renderer process 处理，当旧网页全部关闭时，才会销毁旧的 renderer process。</p><p>也就是说，即便只有一个 tab，在跳转时，也可能会在短时间内存在多个 renderer process。</p><h3 id="Service-Worker"><a href="#Service-Worker" class="headerlink" title="Service Worker"></a>Service Worker</h3><p><a href="https://developers.google.com/web/fundamentals/primers/service-workers">Service Worker</a> 可以在页面加载前执行一些逻辑，甚至改变网页内容，但浏览器仍然把 Service Worker 实现在了 renderer process 中。</p><p>当 Service Worker 被注册后，会被丢到一个作用域中，当 UI thread 执行时会检查这个作用域是否注册了 Service Worker，如果有，则 network thread 会创建一个 renderer process 执行 Service Worker（因为是 js 代码）。然后网络响应会被 Service Worker 接管。</p><p>但这样会慢一步，所以 UI thread 往往会在注册 Service Worker 的同时告诉 network thread 发送请求，这就是 <a href="https://developers.google.com/web/updates/2017/02/navigation-preload">Navigation Preload</a> 机制。</p><p>本文介绍了网页跳转时发生的步骤，涉及 browser process、UI thread、network thread、renderer process 的协同。</p><h2 id="精读"><a href="#精读" class="headerlink" title="精读"></a>精读</h2><p>也许你会有疑问，为什么是 renderer process 而不是 renderer thread？因为相比 process（进程）相比 thread（线程），之间数据是被操作系统隔离的，为了网页间无法相互读取数据（mysite.com 读取你 baidu.com 正在输入的账号密码），浏览器必须为每个 tab 创建一个独立的进程，甚至每个 iframe 都必须是独立进程。</p><p>读完第二篇，应该能更深切的感受到模块间合理分工的重要性。</p><p>UI thread 处理浏览器 UI 的展现与用户交互，比如当前加载的状态变化，历史前进后退，浏览器地址栏的输入、校验与监听按下 Enter 等事件，但不会涉及诸如发送请求、解析网页内容、渲染等内容。</p><p>network thread 也仅处理网络相关的事情，它主要关心通信协议、安全协议，目标就是快速准确的找到网站服务器，并读取其内容。network thread 会读取内容头做一些前置判断，读取内容和 renderer process 做的事情是有一定重合的，但 network thread 读取内容头仅为了判断内容类型，以便交给渲染引擎还是下载管理器（比如一个 zip 文件），所以为了不让渲染引擎知道下载管理器的存在，读取内容头必须由 network thread 来做。</p><p>与 renderer process 的通信也是由 browser process 来做的，也就是 UI thread、network thread 一旦要创建或与 renderer process 通信，都会交由它们所在的 browser process 处理。</p><p>renderer process 仅处理渲染逻辑，它不关心是从哪来的，比如是网络请求过来的，还是 Service Worker 拦截后修改的，也不关心当前浏览器状态是什么，它只管按照约定的接口规范，在指定的节点抛出回调，而修改应用状态由其它关心的模块负责，比如 <code>onLoad</code> 回调触发后，browser process 处理浏览器的状态就是一个例子。</p><p>再比如 renderer process 里点击了一个新的跳转链接，这个事情发生在 renderer process，但会交给 browser process 处理，因为每个模块解耦的非常彻底，所以任何复杂工作都能找到一个能响应它的模块，而这个模块也只要处理这个复杂工作的一部分，其余部分交给其它模块就好了，这就是大型应用维护的秘诀。</p><p>所以在浏览器运行周期里，有着非常清晰的逻辑链路，这些模块必须事先规划设计好，很难想象这些模块分工是在开发中逐渐形成的。</p><p>最后提到加速优化，Chrome 惯用技巧就是，用资源换时间。即宁可浪费潜在资源，也要让事物尽可能的并发，这些从提前创建 renderer process、提前发起 network process 都能看出来。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>深入了解现代浏览器二介绍了网页跳转时发生的，browser process 与 renderer process 是如何协同的。</p><p>也许这篇文章可以帮助你回答 “聊聊在浏览器地址栏输入 <a href="http://www.baidu.com/">www.baidu.com</a> 并回车后发生了什么事儿吧！”</p><blockquote><p>讨论地址是：<a href="https://github.com/dt-fe/weekly/issues/375">精读《深入了解现代浏览器二》· Issue #375 · dt-fe/weekly</a></p></blockquote><blockquote><p>版权声明：自由转载-非商用-非衍生-保持署名（<a href="https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">创意共享 3.0 许可证</a>）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 现代浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入了解现代浏览器二</title>
      <link href="/2022/04/1560713.html"/>
      <url>/2022/04/1560713.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><a href="https://developers.google.com/web/updates/2018/09/inside-browser-part2">Inside look at modern web browser</a> 是介绍浏览器实现原理的系列文章，共 4 篇，本次精读介绍第二篇。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本篇重点介绍了 <strong>浏览器路由跳转后发生了什么</strong>，下一篇会介绍浏览器的渲染进程是如何渲染网页的，环环相扣。</p><p>在上一篇介绍了，browser process 包含 UI thread、network thread 和 storage thread，当我们在浏览器菜单栏输入网址并敲击回车时，这套动作均由 browser process 的 UI thread 响应。</p><p>接下来，按照几种不同的路由跳转场景，分别介绍了内部流程。</p><h3 id="普通的跳转"><a href="#普通的跳转" class="headerlink" title="普通的跳转"></a>普通的跳转</h3><p>第一步，UI thread 响应输入，并判断是否为一个合法的网址，当然输入的也可能是个搜索协议，这就会导致分发到另外的服务处理。</p><p>第二步，如果第一步输入的是合法网址，则 UI thread 会通知 network thread 获取网页内容，network thread 会寻找合适的协议处理网络请求，一般会通过 <a href="https://en.wikipedia.org/wiki/Domain_Name_System">DNS 协议</a> 寻址，通过 <a href="https://en.wikipedia.org/wiki/Transport_Layer_Security">TLS 协议</a> 建立安全链接。如果服务器返回了比如 301 重定向信息，network thread 会通知 UI thread 这个信息，再启动一遍第二步。</p><p>第三步，读取响应内容，在这一步 network thread 会首先读取首部一些字节，即我们常说的响应头，其中包含 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types">Content-Type</a> 告知返回内容是什么。如果返回内容是 HTML，则 network thread 会将数据传送给 renderer process。这一步还会校验安全性，比如 <a href="https://www.chromium.org/Home/chromium-security/corb-for-developers">CORB</a> 或 <a href="https://en.wikipedia.org/wiki/Cross-site_scripting">cross-site</a> 问题。</p><p>第四步，寻找 renderer process。一旦所有检查都完成，network thread 会通知 UI thread 已经准备好跳转了（注意此时并没有加载完所有数据，第三步只是检查了首字节），UI thread 会通知 renderer process 进行渲染。为了提升性能，UI thread 在通知 network thread 的同时就会实例化一个 renderer process 等着，一旦 network thread 完毕后就可以立即进入渲染阶段，如果检查失败则丢弃提前实例化的 renderer process。</p><p>第五步，确认导航。第四步后，browser process 通过 IPC 向 renderer process 传送 stream（<a href="https://github.com/ascoders/weekly/blob/master/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF/214.%E7%B2%BE%E8%AF%BB%E3%80%8Aweb%20streams%E3%80%8B.md">精读《web streams》</a>）数据。此时导航会被确认，浏览器的各个状态（比如导航状态、前进后退历史）将会被修改，同时为了方便 tab 关闭后快速恢复，会话记录会被存储在硬盘。</p><p>额外步骤，加载完成。当 renderer process 加载完成后（具体做了什么下一篇会说明），会通知 browser process <code>onLoad</code> 事件，此时浏览器完成最终加载完毕状态，loading 圆圈也会消失，各类 onLoad 的回调触发。注意此时 js 可能会继续加载远程资源，但这都是加载状态完成后的事了。</p><h3 id="跳转到别的网站"><a href="#跳转到别的网站" class="headerlink" title="跳转到别的网站"></a>跳转到别的网站</h3><p>当你准备跳转到别的网站时，在执行普通跳转流程前，还会响应 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event">beforeunload</a> 事件，这个事件注册在 renderer process，所以 browser process 需要检查 renderer process 是否注册了这个响应。注册 <code>beforeunload</code> 无论如何都会拖慢关闭 tab 的速度，所以如无必要请勿注册。</p><p>如果跳转是 js 发出的，那么执行跳转就由 renderer process 触发，browser process 来执行，后续流程就是普通的跳转流程。要注意的是，当执行跳转时，会触发原网站 <code>unload</code> 等事件（<a href="https://developers.google.com/web/updates/2018/07/page-lifecycle-api#overview_of_page_lifecycle_states_and_events">网页生命周期</a>），所以这个由旧的 renderer process 响应，而新网站会创建一个新的 renderer process 处理，当旧网页全部关闭时，才会销毁旧的 renderer process。</p><p>也就是说，即便只有一个 tab，在跳转时，也可能会在短时间内存在多个 renderer process。</p><h3 id="Service-Worker"><a href="#Service-Worker" class="headerlink" title="Service Worker"></a>Service Worker</h3><p><a href="https://developers.google.com/web/fundamentals/primers/service-workers">Service Worker</a> 可以在页面加载前执行一些逻辑，甚至改变网页内容，但浏览器仍然把 Service Worker 实现在了 renderer process 中。</p><p>当 Service Worker 被注册后，会被丢到一个作用域中，当 UI thread 执行时会检查这个作用域是否注册了 Service Worker，如果有，则 network thread 会创建一个 renderer process 执行 Service Worker（因为是 js 代码）。然后网络响应会被 Service Worker 接管。</p><p>但这样会慢一步，所以 UI thread 往往会在注册 Service Worker 的同时告诉 network thread 发送请求，这就是 <a href="https://developers.google.com/web/updates/2017/02/navigation-preload">Navigation Preload</a> 机制。</p><p>本文介绍了网页跳转时发生的步骤，涉及 browser process、UI thread、network thread、renderer process 的协同。</p><h2 id="精读"><a href="#精读" class="headerlink" title="精读"></a>精读</h2><p>也许你会有疑问，为什么是 renderer process 而不是 renderer thread？因为相比 process（进程）相比 thread（线程），之间数据是被操作系统隔离的，为了网页间无法相互读取数据（mysite.com 读取你 baidu.com 正在输入的账号密码），浏览器必须为每个 tab 创建一个独立的进程，甚至每个 iframe 都必须是独立进程。</p><p>读完第二篇，应该能更深切的感受到模块间合理分工的重要性。</p><p>UI thread 处理浏览器 UI 的展现与用户交互，比如当前加载的状态变化，历史前进后退，浏览器地址栏的输入、校验与监听按下 Enter 等事件，但不会涉及诸如发送请求、解析网页内容、渲染等内容。</p><p>network thread 也仅处理网络相关的事情，它主要关心通信协议、安全协议，目标就是快速准确的找到网站服务器，并读取其内容。network thread 会读取内容头做一些前置判断，读取内容和 renderer process 做的事情是有一定重合的，但 network thread 读取内容头仅为了判断内容类型，以便交给渲染引擎还是下载管理器（比如一个 zip 文件），所以为了不让渲染引擎知道下载管理器的存在，读取内容头必须由 network thread 来做。</p><p>与 renderer process 的通信也是由 browser process 来做的，也就是 UI thread、network thread 一旦要创建或与 renderer process 通信，都会交由它们所在的 browser process 处理。</p><p>renderer process 仅处理渲染逻辑，它不关心是从哪来的，比如是网络请求过来的，还是 Service Worker 拦截后修改的，也不关心当前浏览器状态是什么，它只管按照约定的接口规范，在指定的节点抛出回调，而修改应用状态由其它关心的模块负责，比如 <code>onLoad</code> 回调触发后，browser process 处理浏览器的状态就是一个例子。</p><p>再比如 renderer process 里点击了一个新的跳转链接，这个事情发生在 renderer process，但会交给 browser process 处理，因为每个模块解耦的非常彻底，所以任何复杂工作都能找到一个能响应它的模块，而这个模块也只要处理这个复杂工作的一部分，其余部分交给其它模块就好了，这就是大型应用维护的秘诀。</p><p>所以在浏览器运行周期里，有着非常清晰的逻辑链路，这些模块必须事先规划设计好，很难想象这些模块分工是在开发中逐渐形成的。</p><p>最后提到加速优化，Chrome 惯用技巧就是，用资源换时间。即宁可浪费潜在资源，也要让事物尽可能的并发，这些从提前创建 renderer process、提前发起 network process 都能看出来。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>深入了解现代浏览器二介绍了网页跳转时发生的，browser process 与 renderer process 是如何协同的。</p><p>也许这篇文章可以帮助你回答 “聊聊在浏览器地址栏输入 <a href="http://www.baidu.com/">www.baidu.com</a> 并回车后发生了什么事儿吧！”</p><blockquote><p>讨论地址是：<a href="https://github.com/dt-fe/weekly/issues/375">精读《深入了解现代浏览器二》· Issue #375 · dt-fe/weekly</a></p></blockquote><blockquote><p>版权声明：自由转载-非商用-非衍生-保持署名（<a href="https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">创意共享 3.0 许可证</a>）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 现代浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>element-input 自定义最值</title>
      <link href="/2022/04/1535681.html"/>
      <url>/2022/04/1535681.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>table表单内某一行的input</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scope<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scope.row.switch<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-solt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scope<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>               <span class="token comment">&lt;!-- active-text="&amp;ensp" --&gt;</span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-switch</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scope.row.verificationFlag<span class="token punctuation">"</span></span> <span class="token attr-name">active-color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#13ce66<span class="token punctuation">"</span></span> <span class="token attr-name">inactive-color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#ff4949<span class="token punctuation">"</span></span>                 <span class="token attr-name">:active-value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">:inactive-value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">inactive-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>启用登录图形码：<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-switch</span><span class="token punctuation">&gt;</span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span>inline-block <span class="token punctuation">;</span><span class="token property">margin-left</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scope.row.verificationFlag<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                 当密码错误                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">@input</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>numberChange(arguments[0], 3)<span class="token punctuation">"</span></span> <span class="token attr-name">@change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>numberChange(arguments[0], 3)<span class="token punctuation">"</span></span>                   <span class="token attr-name">v-model.number</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scope.row.verificationNum<span class="token punctuation">"</span></span> <span class="token attr-name">maxlength</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">:max</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span> <span class="token attr-name">:min</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 50px</span><span class="token punctuation">"</span></span></span>                   <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>small<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">&gt;</span></span>                 <span class="token comment">&lt;!-- &lt;el-input @input="changePaidAmount($event)" v-model.number="scope.row.verificationNum"                   maxlength="1" :max="3" :min="0" style="width: 50px" size="small"&gt;                 &lt;/el-input&gt; --&gt;</span>                 次强制图形码验证               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scope.$index % 2 === 0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scope.row.content<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>多IP请用英文半角逗号分隔<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-else</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-time-select</span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>起始时间<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scope.row.startTime<span class="token punctuation">"</span></span> <span class="token attr-name">@change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scope.row.endTime = <span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span>             <span class="token attr-name">:picker-options</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{               start: <span class="token punctuation">'</span>00:00<span class="token punctuation">'</span>,               step: <span class="token punctuation">'</span>01:00<span class="token punctuation">'</span>,               end: <span class="token punctuation">'</span>24:00<span class="token punctuation">'</span>,             }<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-time-select</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-time-select</span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>结束时间<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scope.row.endTime<span class="token punctuation">"</span></span> <span class="token attr-name">:picker-options</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{             start: <span class="token punctuation">'</span>00:00<span class="token punctuation">'</span>,             step: <span class="token punctuation">'</span>01:00<span class="token punctuation">'</span>,             end: <span class="token punctuation">'</span>24:00<span class="token punctuation">'</span>,             minTime: scope.row.startTime,           }<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-time-select</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法: 记得去data定义你的verificationNum，配合$nextTick ，就能解决DOM更新的问题</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">// 限制input 最大最小值  numberChange (val, maxNum) {    //转换数字类型    this.data[6].verificationNum = Number(val)    //重新渲染    this.$nextTick(() =&gt; {      //比较输入的值和最大值，返回小的      let num = Math.min(Number(val), maxNum)      //输入负值的情况下， = 0（可根据实际需求更该）      if (num &lt; 0) {        this.data[6].verificationNum = 0      } else {        //反之        this.data[6].verificationNum = num      }    })  },<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> $nextTick </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入了解现代浏览器一</title>
      <link href="/2022/04/0934856.html"/>
      <url>/2022/04/0934856.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><a href="https://developers.google.com/web/updates/2018/09/inside-browser-part1">Inside look at modern web browser</a> 是介绍浏览器实现原理的系列文章，共 4 篇，本次精读介绍第一篇。</p><p>虽然本文写于 2018 年，但如今依然值得学习，因为浏览器实现非常复杂，从细节开始学习很容易迷失方向，缺乏整体感，而这篇文章从宏观层面开始介绍，几乎没有涉及代码实现，全都是思路性的描述，非常适合培养对浏览器整体框架性思维。</p><p>原文有非常多形象的插图与动图，便于加深对知识的理解，所以也推荐直接阅读原文。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>文章先从 CPU、GPU、操作系统开始介绍，因为这些是浏览器运行的基座。</p><h3 id="CPU、GPU、操作系统、应用的关系"><a href="#CPU、GPU、操作系统、应用的关系" class="headerlink" title="CPU、GPU、操作系统、应用的关系"></a>CPU、GPU、操作系统、应用的关系</h3><p>CPU 即中央处理器，可以处理几乎所有计算。以前的 CPU 是单核的，现在大部分笔记电脑都是多核的，专业服务器甚至有高达 100 多核的。CPU 计算能力很强，但只能一件件事处理，</p><p>GPU 一开始是为图像处理设计的，即主要处理像素点，所以拥有大量并行的处理简单事物的能力，非常适合用来做矩阵运算，而矩阵运算又是计算机图形学的基础，所以大量用在可视化领域。</p><p>CPU、GPU 都是计算机硬件，这些硬件各自都提供了一些接口供汇编语言调用；而操作系统则基于它们之上用 C 语言（如 linux）将硬件管理了起来，包括进程调度、内存分配、用户内核态切换等等；运行在操作系统之上的则是应用程序了，所以应用程序不直接和硬件打交道，而是通过操作系统间接操作硬件。</p><blockquote><p>为什么应用程序不能直接操作硬件呢？这样做有巨大的安全隐患，因为硬件是没有任何抽象与安全措施的，这意味着理论上一个网页可以通过 js 程序，在你打开网页时直接访问你的任意内存地址，读取你的聊天记录，甚至读取历史输入的银行卡密码进行转账操作。</p></blockquote><p>显然，浏览器作为一个应用程序，运行在操作系统之上。</p><h3 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h3><p>为了让程序运行的更安全，操作系统创造了进程与线程的概念（linux 对进程与线程的实现是同一套），进程可以分配独立的内存空间，进程内可以创建多个线程进行工作，这些线程共享内存空间。</p><p>因为线程间共享内存空间，因此不需通信就能交流，但内存地址相互隔离的进程间也有通信需求，需通过 IPC（Inter Process Communication）进行通信。</p><p>进程之间相互独立，即一个进程挂了不会影响到其它进程，而在一个进程中可以创建一个新进程，并与之通信，所以浏览器就采用了这种策略，将 UI、网络、渲染、插件、存储等模块进程独立，并且任意挂掉后都可以被重新唤起。</p><h3 id="浏览器架构"><a href="#浏览器架构" class="headerlink" title="浏览器架构"></a>浏览器架构</h3><p>浏览器可以拆分为许多独立的模块，比如：</p><ul><li>浏览器模块（Browser）：负责整个浏览器内行为协调，调用各个模块。</li><li>网络模块（Network）：负责网络 I/O。</li><li>存储模块（Storage）：负责本地 I/O。</li><li>用户界面模块（UI）：负责浏览器提供给用户的界面模块。</li><li>GPU 模块：负责绘图。</li><li>渲染模块（Renderer）：负责渲染网页。</li><li>设备模块（Device）：负责与各种本地设备交互。</li><li>插件模块（Plugin）：负责处理各类浏览器插件。</li></ul><p>基于这些模块，浏览器有两种可用的架构设计，一种是少进程，一种是多进程。</p><p>少进程是指将这些模块放在一个或有限的几个进程里，也就是每个模块一个线程，这样做的好处是最大程度共享了内存空间，对设备要求较低，但问题是只要一个线程挂了都会导致整个浏览器挂掉，因此稳定性较差。</p><p>多进程是指为每个模块（尽量）开辟一个进程，模块间通过 IPC 通信，因此任何模块挂掉都不会影响其它模块，但坏处是内存占用较大，比如浏览器 js 解析与执行引擎 V8 就要在这套架构下拷贝多份实例运行在每个进程中。</p><h3 id="Chrome-多进程架构的优势"><a href="#Chrome-多进程架构的优势" class="headerlink" title="Chrome 多进程架构的优势"></a>Chrome 多进程架构的优势</h3><p>Chrome 尽量为每个 tab 单独创建一个进程，所以我们才能在某个 tab 未响应时，从容的关闭它，而其它 tab 不会受到影响。不仅是 tab 间，一个 tab 内的 iframe 间也会创建独立的进程，这样做是为了保护网站的安全性。</p><h3 id="服务化-单-多进程弹性架构"><a href="#服务化-单-多进程弹性架构" class="headerlink" title="服务化 - 单/多进程弹性架构"></a>服务化 - 单/多进程弹性架构</h3><p>Chrome 并不满足于采用一种架构，而是在不同环境下切换不同的架构。Chrome 将各功能模块化后，就可以自由决定当前将哪些模块放在一个进程中，将哪些模块启动独立进程，即可以在运行时决定采用哪套进程架构。</p><p>这样做的好处是，可以在资源受限的机器上开启单进程模式，以尽量节约内存开销，实际上在手机应用上就是这么做的；而在资源丰富、内核数量充足的机器上采用独立进程模式，虽然消耗了更多资源，但获得了更好的稳定性。</p><h3 id="Iframe-独占进程"><a href="#Iframe-独占进程" class="headerlink" title="Iframe 独占进程"></a>Iframe 独占进程</h3><p><a href="https://developers.google.com/web/updates/2018/07/site-isolation">site-isolation</a> 将同一个 tab 内不同 iframe 包裹在不同的进程内运行，以确保 iframe 间资源的独占性，以及安全性。该功能直到 2018.7 才更新，是因为背后有许多复杂的工作要处理，比如开发者工具的调试、网页的全局搜索功能，都不能因为进程的隔离而受到影响，Chrome 必须让每个进程单独响应这些操作，并最终聚合在一起，让用户感受不到进程间的阻隔。</p><h2 id="精读"><a href="#精读" class="headerlink" title="精读"></a>精读</h2><p>本文从浏览器如何基于操作系统提供的进程、线程概念构建自己的应用程序开始，从硬件、操作系统、软件的分层开始，介绍到浏览器是如何划分模块的，并且分配进程或线程给这些模块运行，这背后的思考非常有价值。</p><p>从宏观角度看，要设计一个安全稳定、高性能、具有拓展性的浏览器，首先要把各功能模块划分清楚，并定义好各模块的通信关系，在各业务场景下制定一套模块协作的流程。</p><h3 id="浏览器的主从架构"><a href="#浏览器的主从架构" class="headerlink" title="浏览器的主从架构"></a>浏览器的主从架构</h3><p>类似应用程序的主从模式，浏览器的 Browser 模块可以看作主模块，它本身用于协调其它模块的运行，并维持其它各模块的正常工作，在其它模块失去响应时等待或重新唤起，或者在模块销毁时进行内存回收。</p><p>各从模块也分工明确，比如在浏览器敲击 URL 地址时，会先通过 UI 模块响应用户的输入，并判断输入是否为 URL 地址，因为输入的可能是其它非法参数，或一些查询或设置命令。若输入的确实是 URL 地址，则校验通过后，会通知 Network 网络模块发送请求，UI 模块就不再关心请求是如何处理了。Network 模块也是相对独立的，仅处理请求的发送与接收，如果接收到的是 HTML 网页，则交给 Renderer 模块进行渲染。</p><p>有了这些相对独立且分工明确的模块划分后，将这些模块作为线程或进程管理就都不会影响它们的业务逻辑了，唯一影响的就是内存是否共享，以及某个模块 crash 后是否会影响到其它模块了，所以基于这个架构，判断设备类型，以采用单进程或多进程模式就变得简单了很多，且这个进程弹性架构本身也不需要入侵各模块业务逻辑，本身就是一套独立的机制。</p><p>浏览器作为非常复杂的应用程序，想要持续维护，就必须对每个功能点都进行合理的设计，让模块间高内聚、低耦合，这样才不至于让任何修改牵一发而动全身。</p><h3 id="tab、iframe-进程隔离"><a href="#tab、iframe-进程隔离" class="headerlink" title="tab、iframe 进程隔离"></a>tab、iframe 进程隔离</h3><p>微前端的沙箱隔离方案也比较火，这里可以和浏览器 tab/iframe 隔离做个对比。</p><p>基于 js 运行时的沙箱方案大多都因为吐槽 iframe 慢而诞生的，一般会基于 <code>with</code> 改变沙箱代码的上下文，修改访问的全局对象引用，但基于 js 原型链特征，为了阻断向原型链追溯到主应用代码，一般会采用 <code>proxy</code> 对 <code>with</code> mock 的变量进行访问阻断。</p><p>还有一些方案利用创建空 iframe 获取到 document 变量传递给沙箱，一定程度做到了访问隔离，且对 document 添加的监听会随 iframe 销毁而销毁，便于控制。</p><p>还有一些更加彻底的尝试，将 js 代码扔到 web worker 运行，并通过 mock 模拟了 worker 运行时缺失的 dom API。</p><p>对比这些方案可以发现，只有最后 worker 的方案是最彻底的，因为浏览器创建的 worker 进程是完全资源隔离的，想要和浏览器主线程通信只能利用 <code>postMessage</code>，虽然有一些基于 ArrayBuffer 的内存共享方案，但因为支持的数据类型具有针对性，也不会存在安全问题。</p><p>回到浏览器开发者的视角，为什么 iframe 隔离要花费九牛二虎之力拆分多进程，最后再费很大功夫拼接回来，还原出一个相对无缝的体验？浏览器厂商其实完全可以利用上面提到的 js 运行时能力，对 API 语法进行改造，创建一个逻辑上的沙盒环境。</p><p>我认为本质原因是浏览器要实现的沙盒必须是进程层面的，也就是对内存访问权限的绝对隔离，因为逻辑层面的隔离可能随着各浏览器厂商实现差异，或 API 本身存在的逻辑漏洞而导致越权情况的出现，所以如果需要构造一个完全安全的沙盒，最好利用浏览器提供的 API 创建新的进程处理沙盒代码。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文介绍了浏览器是如何基于操作系统做宏观架构设计的，主要就说了一件事，即对进程，线程模型的弹性使用。同时在 tab、iframe 的设计中也要考虑到安全性要求，在必要的时候采用进程，在浏览器自身模块间因为没有安全性问题，所以可对进程模型进行灵活切换。</p><blockquote><p>讨论地址是：<a href="https://github.com/dt-fe/weekly/issues/374">精读《深入了解现代浏览器一》· Issue #374 · dt-fe/weekly</a></p></blockquote><blockquote><p>版权声明：自由转载-非商用-非衍生-保持署名（<a href="https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">创意共享 3.0 许可证</a>）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 现代浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组和链表的区别</title>
      <link href="/2022/03/3041865.html"/>
      <url>/2022/03/3041865.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>useRef 和 creatRef 区别</title>
      <link href="/2022/03/3033004.html"/>
      <url>/2022/03/3033004.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>useRef是个hook 因此不能用在类组件</strong></p><p>createRef并没有 Hooks 的效果，其值会随着 FunctionComponent 重复执行而不断被初始化：</p><p>作用完全一样,但是只要你认真读一下官方文档, 就会发现, 它们两个确实不一样.  </p><p>官网的定义如下: </p><p><code>useRef</code> returns a mutable ref object whose <code>.current</code> property is initialized to the passed argument (<code>initialValue</code>). The returned object will persist for the full lifetime of the component.</p><p>换句人话说 ,  useRef 在 react hook 中的作用, 正如官网说的, 它像一个变量, 类似于 this , 它就像一个盒子, 你可以存放任何东西. </p><p><strong>createRef 每次渲染都会返回一个新的引用，而 useRef 每次都会返回相同的引用</strong></p><img src="https://babayetu-1309205424.cos.ap-shanghai.myqcloud.com/blogimgs/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png"><p>在<code>Render phase</code>这个阶段是因为代码不做“副作用”，发现也就是写引擎，这是因为这个阶段可能会被 React 随时取消或重做。</p><p>修改阶段属于作为操作，因此不适合在这个阶段<code>Commit phase</code>看到这件事，或者我们可以在正常执行中进行操作。</p><p>最懒惰的所以下，最多只是被允许使用的情况，而且这种行为是允许使用的。</p><p>因为 FunctionComponent 增加了编排调度系统，为了优先响应用户操作，可能会暂定某个 React 组件的渲染，具体可以看第 9 篇篇精读：<a href="https://github.com/dt-fe/weekly/blob/v2/099.%E7%B2%BE%E8%AF%BB%E3%80%8AScheduling%20in%20React%E3%80%8B.md">精《Scheduling in React》</a></p><p>Ref 还可以拿到一个、一个 Mutable 被接受的对象，创建一个 Mutable 可以<code>useEffect</code>存储一个较旧的值，常用来获取，回复官方使用<code>previousProps</code>Ref 封装了一个简单的 Hooks 上一次的引用值</p><pre class="line-numbers language-none"><code class="language-none">函数 usePrevious (值)  {   const  ref  =  useRef ( ) ;   useEffect ( ( )  =&gt;  {     ref . current  =  value ;   } ) ;   返回 参考。当前；}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在渲染<code>useEffect</code>完成后才执行，因此<code>ref</code>在当前渲染中永远是上一次渲染的时候，我们可以利用它来上一次渲染</p><pre class="line-numbers language-none"><code class="language-none">函数 应用程序（道具） {   const  preProps  =  usePrevious （道具）；}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>不同之处在于可以将值兑现为在实现同样的功能，<code>ref</code>不同的特性，以实现闭包中传递的功能。</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://cloud.tencent.com/developer/article/1586855">useRef 与 createRef 区别</a></p><p><a href="https://github.com/ascoders/weekly/blob/master/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF/141.%E7%B2%BE%E8%AF%BB%E3%80%8AuseRef%20%E4%B8%8E%20createRef%20%E7%9A%84%E5%8C%BA%E5%88%AB%E3%80%8B.md"><strong>精读《useRef 与 createRef 的区别》</strong></a></p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DOM操纵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML 之常见元素总结</title>
      <link href="/2022/03/2830698.html"/>
      <url>/2022/03/2830698.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>行内元素:</p><p>​    特点:</p><ul><li>无法自动换行</li><li>一行可以放多个</li><li>不可设置宽高</li><li>默认宽度是本身内容宽度</li><li>行内元素的padding 可以设置</li><li>margin 只能设置水平方向</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html">b, big, i, small, ttabbr, acronym, cite, code, dfn, em, kbd, strong, samp, vara, bdo, br, img, map, object, q, script, span, sub, supbutton, input, label, select, textarea<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><p>块元素</p><p>​    特点:</p><ul><li>自动换行</li><li>独占一行</li><li>可以设置宽高</li><li>默认宽度为父元素的宽度</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html">divph1-h6ulliolddhrtablemenupreasidefooterblockquoteaddressheadersectionasidefooterfigureformhgroup<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>行内块元素</p><p>​    特点:综合块和行内元素的特点,可设置宽高,可以设置内外边距</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">imginputtd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><p>标签转换</p><pre class="line-numbers language-none"><code class="language-none">display: inline/inline-block/block/inline flex/none/flex/gird<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈 Cookie Session Token 区别</title>
      <link href="/2022/03/275453.html"/>
      <url>/2022/03/275453.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie:"></a>cookie:</h3><p><strong>是存储在浏览器端的一小段文本数据,内容会随着http请求一起发送到服务器端</strong></p><p>基本流程:浏览器发起http请求,服务器进行cookie进行设置,也就是set-cookie,cookie里有名值这个对,服务器将这个名值对填充完成后,将cookie发送给浏览器,浏览器将其保存,这样浏览器以后发送的每个请求都会自动带上这个 cookie,就是存储在浏览器的数据,因此将用户名和密码 放在cookie 是很不安全的,容易被泄漏</p><hr><h3 id="session："><a href="#session：" class="headerlink" title="session："></a>session：</h3><p><strong>是存储在服务器端的一组数据,他会在服务器端创建session id 和会话结束时间</strong></p><p>seesion 验证机制：</p><p>通常把seeion id 存储在cookie 里,此时的浏览器端的session 是没有用户密码,seeion id 也是没有规律的字符串,此时即使浏览器的session id 即使被劫持,也意义不大,因为只是一段没有规律的字符串,服务器端在发送这个cookie 之前会对这个含有session id 的cookie 进行签名,被劫持修改的session id,服务器也是无法识别的.</p><p>会话结束:cookie 有效期失效(用户登出),浏览器会自行删除cookie</p><p>会话结束后需要重新输入账号密码</p><hr><h3 id="token"><a href="#token" class="headerlink" title="token:"></a>token:</h3><p>通常用来代表一小段字符串,可以存储在 cookie ,也可以存储在服务器的内存里,或者其他地方</p><p><strong>token组成</strong></p><ul><li>uid:  用户唯一身份标识</li><li>time: 当前时间的时间戳</li><li>sign:  签名, 使用 hash/encrypt 压缩成定长的十六进制字符串，以防止第三方恶意拼接</li><li>固定参数(可选): 将一些常用的固定参数加入到 token 中是为了避免重复查库</li></ul><p>token可以抵抗csrf，cookie+session不行</p><p>session时有状态的，一般存于服务器内存或硬盘中，当服务器采用分布式或集群时，session就会面对负载均衡问题。负载均衡多服务器的情况，不好确认当前用户是否登录，因为多服务器不共享session</p><p>三者是不同维度的东西.</p><hr><p>JWT:因为大量的session 存储在服务器端等各种原因,对后端压力其实挺大的.因此出现了JWT.</p><h3 id="JWT-组成"><a href="#JWT-组成" class="headerlink" title="JWT 组成"></a><strong>JWT 组成</strong></h3><h3 id="header-payload-signature"><a href="#header-payload-signature" class="headerlink" title="header.payload.signature"></a>header.payload.signature</h3><p>header : 部分声明需要用什么算法来生成签名</p><p>payload : 是一些特定的数据,比如有效期</p><p>signature: 前两个部分会仅由Base64 编码,而不加密,容易被破解解码,服务器不保存JWT,但是服务器会保存一段密码,这段密码要结合两段编码进行算法运算,最终得到签名信息,而签名的信息也就是signature</p><p>用户第一次登录:服务器会生成一个JWT,服务器不需要保存这个JWT,</p><p>而只需要保存JWT签名的密文,接着把JWT发给浏览器,可以让浏览器以Cookie或者storage 形式进行存储,和Session 很类似,只不过 Token 存储在用户那边 ,而Token 安全性:</p><p>客户端登陆传递信息给服务端，服务端收到后把用户信息加密（token）传给客户端，客户端将token存放于localStroage等容器中。客户端每次访问都传递token，服务端解密token，就知道这个用户是谁了。通过cpu加解密，服务端就不需要存储session占用存储空间，就很好的解决负载均衡多服务器的问题了。这个方法叫做JWT(Json Web Token)</p><h3 id="生成-token"><a href="#生成-token" class="headerlink" title="生成 token"></a>生成 token</h3><p>借助第三方库<code>jsonwebtoken</code>，通过<code>jsonwebtoken</code> 的 <code>sign</code> 方法生成一个 <code>token</code>：</p><ul><li>第一个参数指的是 Payload</li><li>第二个是秘钥，服务端特有</li><li>第三个参数是 option，可以定义 token 过期时间</li></ul><hr><h3 id="token-和-JWT-区别"><a href="#token-和-JWT-区别" class="headerlink" title="token 和 JWT 区别"></a>token 和 JWT 区别</h3><p>token是一个很宽泛的概念，翻译为令牌，一般用来表示经过验证之后得到的凭证，长度没有什么限制，多长都可以,是无状态协议中认证用户的一种形式，相比于传统的cookie，不受域名限制</p><p>jwt是 JSON Web Token，它也自称是一种token，jwt就是一个很具体的标准了，用点号分为三段，分别表示头、信息和签名,只是一种实现形式，通过在客户端存储payload来降低服务端压力</p><p>token有很多种，可以是标准的，也可以是你自己定义的，jwt则是其中一种token，而且是标准的token。</p><p>和我们自己随意定义的token差别大是很自然的，因为我们自己定义的token只需要用来识别用户登录状态，一般很短的uid都可以实现，所以比较短。</p><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h3><p>session: 是诞生并保存在服务器那边的由服务器主导一切</p><p>cookie: 是一种数据载体,把Session 放在Cookie 中送到客户端那边,Cookie 跟随每个http请求发送出去</p><p>token: 是但是在服务器,但是保存在浏览器这边,可以放在Cookie 或者Storage 里面,持有token意义可以访问服务器</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://vue3js.cn/interview/NodeJS/jwt.html#%E4%B8%80%E3%80%81%E6%98%AF%E4%BB%80%E4%B9%88">如何实现jwt鉴权机制？</a></p><p><a href="https://segmentfault.com/q/1010000018591060">token和JWT是什么关系？</a></p>]]></content>
      
      
      <categories>
          
          <category> OSI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP cookies </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈 TCP Socket 与 WebSocket</title>
      <link href="/2022/03/2660801.html"/>
      <url>/2022/03/2660801.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>Websocket 与 TCP 的不同之处在于它启用消息流而不是字节流   </p><p align="right">wikipedia</p></blockquote><p>Web 浏览器在应用层运行，而 TCP 在传输层运行。</p><p>作为 Web 应用程序开发人员，通过应用程序层而不是传输层的原始字节通过线路发送消息更容易。</p><p>底层的 WebSockets<em>是</em>TCP，为了简单起见，它只是被抽象出来了。</p><p align="right">stack ovrflow</p><p>HTTP 是个懒惰的协议，server 只有收到请求才会做出回应，否则什么事都不干</p><p>为了彻底解决这个 server 主动向 client 发送数据的问题，W3C 在 HTML5 中提供了一种 client 与 server 间进行全双工通讯的网络技术 WebSocket。</p><p>WebSocket 是一个全新的、独立的协议，基于 TCP 协议，与 HTTP 协议兼容却不会融入 HTTP 协议，仅仅作为 HTML5 的一部分。</p><p>WebSocket 是建立在 TCP（可靠传输层，基于每帧）之上的高级协议（如 HTTP 本身），它可以使用 JS 客户端（以前的 Comet 和长轮询技术）构建有效的实时应用程序用于在 WebSockets 实施之前从服务器<em>中提取更新</em></p><p>WebSocket 是一种协议，是一种与 HTTP 同等的网络协议，两者都是应用层协议，都基于 TCP 协议。</p><p>而TCP Socket是一种为应用程序提供的一组应用程序接口(API),是一种操作系统提供的进程间通信机制,应用程序可以通过套接字接口，来使用网络套接字，以进行资料交换。</p><p align="right">Wikipedia</p><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><h5 id="Differences-between-TCP-sockets-and-web-sockets-one-more-time"><a href="#Differences-between-TCP-sockets-and-web-sockets-one-more-time" class="headerlink" title="Differences between TCP sockets and web sockets, one more time"></a><a href="https://stackoverflow.com/questions/16945345/differences-between-tcp-sockets-and-web-sockets-one-more-time">Differences between TCP sockets and web sockets, one more time</a></h5><p><a href="https://stackoverflow.com/questions/2681267/what-is-the-fundamental-difference-between-websockets-and-pure-tcp">What is the fundamental difference between WebSockets and pure TCP?</a></p><h5 id="WebSocket-与-Socket-IO"><a href="#WebSocket-与-Socket-IO" class="headerlink" title="WebSocket 与 Socket.IO"></a><a href="https://segmentfault.com/a/1190000006899960">WebSocket 与 Socket.IO</a></h5>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将bash添加到右键</title>
      <link href="/2022/03/1629700.html"/>
      <url>/2022/03/1629700.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>解决办法:</p><p>修改注册表:</p><ol><li><p>在CMD中输入 “regedit” </p></li><li><p>定位到 HKEY_CURRENT_USER\SOFTWARE\Classes\Directory\Background\shell</p></li><li><p>右键点击 “shell” 选择 New &gt; Key. 将KEY命名为 “Bash”</p><img src="https://pic1.zhimg.com/v2-1cb74e698a8b6937d007d282a80df0a3_r.jpg?source=1940ef5c"></li><li><p>设置值 ‘open in Bash’</p></li></ol><img src="https://pic2.zhimg.com/80/v2-d8ba5d9dd38f9e2e41b6f2956a301a74_720w.jpg?source=1940ef5c"><img src="https://pica.zhimg.com/v2-abc1422c218366177b7f154531e9a750_r.jpg?source=1940ef5c"><p>5.创建一个新的KEY命名为”command”. 设置值为你的git-bash.exe 路径.</p><img src="https://pic1.zhimg.com/80/v2-039eb67bf9b014a37c3ff55985655832_720w.jpg?source=1940ef5c"><img src="https://pic2.zhimg.com/v2-7ed3d1b6f0d8130831c6a85900b1e003_r.jpg?source=1940ef5c"><img src="https://pica.zhimg.com/80/v2-c7065ac108ddd845918b4c34664e7a12_720w.jpg?source=1940ef5c"><img src="https://babayetu-1309205424.cos.ap-shanghai.myqcloud.com/blogimgs/1647444482%281%29.jpg" alt="添加字体图标">]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器下 JS 引擎的事件循环机制</title>
      <link href="/2021/03/2543258.html"/>
      <url>/2021/03/2543258.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="浏览器环境下js引擎的事件循环机制"><a href="#浏览器环境下js引擎的事件循环机制" class="headerlink" title="浏览器环境下js引擎的事件循环机制"></a><strong>浏览器环境下js引擎的事件循环机制</strong></h2><p>javascript代码执行的时候会将不同的变量存于内存中的不同位置：</p><p>堆（heap）和栈（stack）中来加以区分。</p><p>堆里存放着一些对象,栈中则存放着一些基础类型变量以及对象的指针。 </p><p>但是我们这里说的执行栈和上面这个栈的意义却有些不同。</p><hr><p>当我们调用一个方法的时候，JS会生成一个与这个方法对应的执行环境（context），又叫执行上下文。</p><p>这个执行环境中存在着这个方法的私有作用域，上层作用域的指向，方法的参数，</p><p>这个作用域中定义的变量以及这个作用域的this对象。 </p><p>而当一系列方法被依次调用的时候，因为JS是单线程的，</p><p>同一时间只能执行一个方法，于是这些方法被排队在一个单独的地方。这个地方被称为执行栈。</p><p>当一个脚本第一次执行的时候，JS引擎会解析这段代码，并将其中的同步代码按照执行顺序加入执行栈中，然后从头开始执行。</p><p>如果当前执行的是一个方法，那么JS会向执行栈中添加这个方法的执行环境，然后进入这个执行环境继续执行其中的代码。</p><p>当这个执行环境中的代码 执行完毕并返回结果后，JS会退出这个执行环境并把这个执行环境销毁，回到上一个方法的执行环境。这个过程反复进行，直到执行栈中的代码全部执行完毕。</p><p>​p><img src="https://pic2.zhimg.com/v2-2f761eb83b50f53d741e6aa1f15a9db1_b.webp"><p>从图片可知，一个方法执行会向执行栈中加入这个方法的执行环境，在这个执行环境中还可以调用其他方法，甚至是自己，其结果不过是在执行栈中再添加一个执行环境。</p><p>这个过程可以是无限进行下去的，除非发生了栈溢出，即超过了所能使用内存的最大值。</p><p>以上的过程说的都是同步代码的执行。那么当一个异步代码（如发送ajax请求数据）执行后会如何呢？</p><p>前文提过，js的另一大特点是非阻塞，实现这一点的关键在于下面要说的这项机制——事件队列（Task Queue）。</p><p>js引擎遇到一个异步事件后并不会一直等待其返回结果，而是会将这个事件挂起，继续执行执行栈中的其他任务。当一个异步事件返回结果后，js会将这个事件加入与当前执行栈不同的另一个队列，我们称之为事件队列。</p><p>被放入事件队列不会立刻执行其回调，而是等待当前执行栈中的所有任务都执行完毕， 主线程处于闲置状态时，主线程会去查找事件队列是否有任务。</p><p>如果有，那么主线程会从中取出排在第一位的事件，并把这个事件对应的回调放入执行栈中，然后执行其中的同步代码…，如此反复，这样就形成了一个无限的循环。这就是这个过程被称为“事件循环（Event Loop）”的原因。</p><hr><h2 id="node环境下的事件循环机制"><a href="#node环境下的事件循环机制" class="headerlink" title="node环境下的事件循环机制"></a><strong>node环境下的事件循环机制</strong></h2><h4 id="1-与浏览器环境有何不同"><a href="#1-与浏览器环境有何不同" class="headerlink" title="1.与浏览器环境有何不同?"></a><em>1.与浏览器环境有何不同?</em></h4><p>在node中，事件循环表现出的状态与浏览器中大致相同。</p><p>不同的是node中有一套自己的模型。node中事件循环的实现是依靠的libuv引擎。</p><p>我们知道node选择chrome v8引擎作为js解释器，v8引擎将js代码分析后去调用对应的node api，</p><p>而这些api最后则由libuv引擎驱动，执行对应的任务，并把不同的事件放在不同的队列中等待主线程执行。</p><p> 因此实际上node中的事件循环存在于libuv引擎中。</p><p>待更…</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[为什么要读node.js源码](为什么要读nodejs源码？ - the gc的文章 - 知乎<br><a href="https://zhuanlan.zhihu.com/p/350625461">https://zhuanlan.zhihu.com/p/350625461</a>)</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Event Loop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 那些情况下会返回undefined ?</title>
      <link href="/2021/03/208007.html"/>
      <url>/2021/03/208007.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><ul><li>use strict</li><li>react 组件中的this</li><li>访问不存在的属性</li><li>访问的变量没有初始化</li><li>函数 return 没有显示返回任何内容</li><li>没有定义 return 的函数隐式返回</li><li>访问的参数没有被显示的传递值</li><li>访问任何设置为 undefined 值的变量</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> undefined </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈JavaScript模块化</title>
      <link href="/2021/03/1455868.html"/>
      <url>/2021/03/1455868.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>什么是模块化?</p></blockquote><p>随着代码复杂程度的提高, 项目也变得越来越难维护, <code>JavaScript模块化</code> 也因此油然而生, 本文主要介绍 <code>JavaScript模块化</code> 的一些发展历程。</p><h2 id="传统的开发"><a href="#传统的开发" class="headerlink" title="传统的开发"></a>传统的开发</h2><blockquote><p>这应该是大家最熟悉的一种加载方式, 但是缺点也比较明显</p></blockquote><ul><li>所有的模块都处于全局作用域下, 容易造成命名冲突</li><li>依赖关系不明显, 比如 <code>main.js</code> 中有使用 <code>jquery</code>, 那么 <code>jquery</code> 就一定要先加载, 但是从引入方式中我们无法直观的察觉依赖关系, 不利于维护</li></ul><pre class="line-numbers language-none"><code class="language-none">&lt;script src="jquery.js"&gt;&lt;/script&gt;&lt;script src="jquery_scroller.js"&gt;&lt;/script&gt;&lt;script src="bootstarp.js"&gt;&lt;/script&gt;&lt;script src="main.js"&gt;&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CommonJs"><a href="#CommonJs" class="headerlink" title="CommonJs"></a>CommonJs</h2><blockquote><p>一个文件就是一个模块, 其内部定义的变量, 方法都处于该模块内, 不会对外暴露.</p></blockquote><p>主要语法:</p><ul><li>使用 <code>require</code> 来加载模块</li><li>使用 <code>exports</code> 或者 <code>module.exports</code> 暴露模块中的内容</li></ul><h4 id="CommonJS的特点"><a href="#CommonJS的特点" class="headerlink" title="CommonJS的特点"></a>CommonJS的特点</h4><ul><li>所有代码都运行在模块作用域，不会污染全局作用域；</li><li>模块是同步加载的，即只有加载完成，才能执行后面的操作；</li><li>模块在首次执行后就会缓存，再次加载只返回缓存结果，如果想要再次执行，可清除缓存；</li><li>CommonJS输出是值的拷贝(即，<code>require</code>返回的值是被输出的值的拷贝，模块内部的变化也不会影响这个值)。</li></ul><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><ol><li>新建 <code>a.js</code>, 导出 <code>name</code> 和 <code>sayHello</code></li></ol><pre class="line-numbers language-none"><code class="language-none">// a.jsconst name = 'Bob'function sayHello(name) {  console.log(`Hello ${name}`)}module.exports.name = namemodule.exports.sayHello = sayHello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>在 <code>b.js</code> 中引入 <code>a</code> 并调用</li></ol><pre class="line-numbers language-none"><code class="language-none">// b.jsconst a = require('./a')const name = a.nameconsole.log(name) // Boba.sayHello(name) // Hello Bob<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>由于 <code>CommonJs</code> 是同步加载的模块的, 在服务端(node), 文件都在硬盘上, 所以同步加载也无所谓, 但是在浏览器端, 同步加载就体验不好了. 所以 <code>CommonJs</code> 主要使用于 <code>node</code> 环境下.</p></blockquote><h2 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h2><blockquote><p><code>AMD</code> 全称为 <code>Asynchromous Module Definition(异步模块定义)</code>, 实现了异步加载模块. <code>require.js</code> 实现了 <code>AMD</code> 规范</p></blockquote><h4 id="RequireJS的基本用法"><a href="#RequireJS的基本用法" class="headerlink" title="RequireJS的基本用法"></a>RequireJS的基本用法</h4><p>通过<code>define</code>来定义一个模块，使用<code>require</code>可以导入定义的模块。</p><h4 id="RequireJS的特点"><a href="#RequireJS的特点" class="headerlink" title="RequireJS的特点"></a>RequireJS的特点</h4><p>对于依赖的模块，AMD推崇<strong>依赖前置，提前执行</strong>。也就是说，在<code>define</code>方法里传入的依赖模块(数组)，会在一开始就下载并执行。</p><pre class="line-numbers language-none"><code class="language-none">require([module], callback) // 导入define(id, [depends], callback) // 导出模块<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="demo-1"><a href="#demo-1" class="headerlink" title="demo"></a>demo</h3><ol><li>新建 <code>a.js</code>, 输入以下内容</li></ol><pre class="line-numbers language-none"><code class="language-none">define(function() {  let alertName = function(str) {    alert('I am ' + str)  }  let alertAge = function(num) {    alert('I am ' + num + ' years old')  }  return {    alertName: alertName,    alertAge: alertAge  }})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>在 <code>test.html</code> 中调用 <code>a</code> 模块</li></ol><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;    &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt;    &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;script src="./require.js"&gt;&lt;/script&gt;    &lt;script&gt;        require(['a'], function (alert) {            alert.alertName('JohnZhu')            alert.alertAge(21)        })    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>能够异步加载模块, 适合在浏览器中运行, 但是不能够按需加载, 必须提前加载模块</p><h2 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h2><blockquote><p><code>CMD规范</code> 是阿里的玉伯提出, <code>sea.js</code> 实现。 实现了按需加载</p></blockquote><p>与 <code>AMD</code> 的区别:</p><ul><li>对于依赖的模块 <code>AMD</code> 提前执行，而 <code>CMD</code> 是<strong>依赖就近，延迟执行</strong>也就是说，只有到<code>require</code>时依赖模块才执行。</li><li><code>CMD</code> 推崇依赖就近, <code>AMD</code> 推崇依赖前置</li></ul><pre class="line-numbers language-none"><code class="language-none">// AMDdefine(['./a', './b'], function(a, b) {  a.doSomething()  b.doSomething()})// CMDdefine(function(require, exports, module) {  var a = require('./a')  a.doSomething()  var b = require('./b')  b.doSomething()})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><blockquote><p><code>ES6</code> 模块化方案是最规范的方案, 未来也是主流, 对于我们来说也是经常使用与熟悉的. 不过现在的浏览器还不兼容, 使用需要 <code>babel</code> 转码</p></blockquote><ul><li>使用 <code>export</code> 导出模块</li><li>使用 <code>import</code> 导入模块</li></ul><pre class="line-numbers language-none"><code class="language-none">import Vue from 'vue'import axios from 'axios'import { mapState, mapMutations, mapActions } from 'vuex'export default {  created() {    console.log('Hello World')  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ES6-Module的特点-对比CommonJS"><a href="#ES6-Module的特点-对比CommonJS" class="headerlink" title="ES6 Module的特点(对比CommonJS)"></a>ES6 Module的特点(对比CommonJS)</h4><ul><li>CommonJS模块是运行时加载，ES6 Module是编译时输出接口；</li><li>CommonJS加载的是整个模块，将所有的接口全部加载进来，ES6 Module可以单独加载其中的某个接口；</li><li>CommonJS输出是值的拷贝，ES6 Module输出的是值的引用，被输出模块的内部的改变会影响引用的改变；</li><li>CommonJS <code>this</code>指向当前模块，ES6 Module <code>this</code>指向<code>undefined</code>;</li></ul><p>目前浏览器对ES6 Module兼容还不太好，我们平时在webpack中使用的<code>export</code>/<code>import</code>，会转译为webpack自身的模块加载机制。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.hangge.com/blog/cache/detail_1686.html">http://www.hangge.com/blog/cache/detail_1686.html</a></p><p><a href="https://www.imooc.com/article/20057">https://www.imooc.com/article/20057</a></p><p><a href="https://juejin.cn/post/6844903983987834888">https://juejin.cn/post/6844903983987834888</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> module </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React-router原理</title>
      <link href="/2021/03/05499.html"/>
      <url>/2021/03/05499.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><ol><li>订阅和操作<a href="https://reactrouter.com/docs/en/v6/getting-started/concepts#history-stack">历史堆栈</a></li><li><a href="https://reactrouter.com/docs/en/v6/getting-started/concepts#url">将URL</a>与您的<a href="https://reactrouter.com/docs/en/v6/getting-started/concepts#route-config">路线</a>匹配</li><li>从<a href="https://reactrouter.com/docs/en/v6/getting-started/concepts#matches">路由匹配中渲染嵌套 UI</a></li></ol><h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p><code>react-router</code>等前端路由的原理大致相同，可以实现无刷新的条件下切换显示不同的页面</p><p>路由的本质就是页面的<code>URL</code>发生改变时，页面的显示结果可以根据<code>URL</code>的变化而变化，但是页面不会刷新</p><p>因此，可以通过前端路由可以实现单页(SPA)应用</p><p><code>react-router</code>主要分成了几个不同的包：</p><ul><li>react-router: 实现了路由的核心功能</li><li>react-router-dom： 基于 react-router，加入了在浏览器运行环境下的一些功能</li><li>react-router-native：基于 react-router，加入了 react-native 运行环境下的一些功能</li><li>react-router-config: 用于配置静态路由的工具库</li></ul><h2 id="二、有哪些"><a href="#二、有哪些" class="headerlink" title="二、有哪些"></a><a href="https://vue3js.cn/interview/React/React%20Router.html#%E4%BA%8C%E3%80%81%E6%9C%89%E5%93%AA%E4%BA%9B">二、有哪些</a></h2><p>这里主要讲述的是<code>react-router-dom</code>的常用<code>API</code>，主要是提供了一些组件：</p><ul><li>BrowserRouter、HashRouter</li><li>Route</li><li>Link、NavLink</li><li>switch</li><li>redirect</li></ul><h3 id="BrowserRouter、HashRouter"><a href="#BrowserRouter、HashRouter" class="headerlink" title="BrowserRouter、HashRouter"></a><a href="https://vue3js.cn/interview/React/React%20Router.html#browserrouter%E3%80%81hashrouter">BrowserRouter、HashRouter</a></h3><p><code>Router</code>中包含了对路径改变的监听，并且会将相应的路径传递给子组件</p><p><code>BrowserRouter</code>是<code>history</code>模式，<code>HashRouter</code>模式</p><p>使用两者作为最顶层组件包裹其他组件</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> BrowserRouter <span class="token keyword">as</span> Router <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Router</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">              &lt; a href=" "&gt;Home&lt;/ a&gt;            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">              &lt; a href="/about"&gt;About&lt;/ a&gt;            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">              &lt; a href="/contact"&gt;Contact&lt;/ a&gt;            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Router</span></span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Route"><a href="#Route" class="headerlink" title="Route"></a><a href="https://vue3js.cn/interview/React/React%20Router.html#route">Route</a></h3><p><code>Route</code>用于路径的匹配，然后进行组件的渲染，对应的属性如下：</p><ul><li>path 属性：用于设置匹配到的路径</li><li>component 属性：设置匹配到路径后，渲染的组件</li><li>render 属性：设置匹配到路径后，渲染的内容</li><li>exact 属性：开启精准匹配，只有精准匹配到完全一致的路径，才会渲染对应的组件</li></ul><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> BrowserRouter <span class="token keyword">as</span> Router<span class="token punctuation">,</span> Route <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Router</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">              &lt; a href="/"&gt;Home&lt;/ a&gt;            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">              &lt; a href="/about"&gt;About&lt;/ a&gt;            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">              &lt; a href="/contact"&gt;Contact&lt;/ a&gt;            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span> <span class="token attr-name">render</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Welcome!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Router</span></span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Link、NavLink"><a href="#Link、NavLink" class="headerlink" title="Link、NavLink"></a><a href="https://vue3js.cn/interview/React/React%20Router.html#link%E3%80%81navlink">Link、NavLink</a></h3><p>通常路径的跳转是使用<code>Link</code>组件，最终会被渲染成<code>a</code>元素，其中属性<code>to</code>代替<code>a</code>标题的<code>href</code>属性</p><p><code>NavLink</code>是在<code>Link</code>基础之上增加了一些样式属性，例如组件被选中时，发生样式变化，则可以设置<code>NavLink</code>的一下属性：</p><ul><li>activeStyle：活跃时（匹配时）的样式</li><li>activeClassName：活跃时添加的class</li></ul><p>如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>NavLink to<span class="token operator">=</span><span class="token string">"/"</span> exact activeStyle<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>color<span class="token operator">:</span> <span class="token string">"red"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>首页<span class="token operator">&lt;</span><span class="token operator">/</span>NavLink<span class="token operator">&gt;</span><span class="token operator">&lt;</span>NavLink to<span class="token operator">=</span><span class="token string">"/about"</span> activeStyle<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>color<span class="token operator">:</span> <span class="token string">"red"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>关于<span class="token operator">&lt;</span><span class="token operator">/</span>NavLink<span class="token operator">&gt;</span><span class="token operator">&lt;</span>NavLink to<span class="token operator">=</span><span class="token string">"/profile"</span> activeStyle<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>color<span class="token operator">:</span> <span class="token string">"red"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>我的<span class="token operator">&lt;</span><span class="token operator">/</span>NavLink<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果需要实现<code>js</code>实现页面的跳转，那么可以通过下面的形式：</p><p>通过<code>Route</code>作为顶层组件包裹其他组件后,页面组件就可以接收到一些路由相关的东西，比如<code>props.history</code></p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">Contact</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> history <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Fragment</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Contact</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Go to home</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">FakeText</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Fragment</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">props`中接收到的`history`对象具有一些方便的方法，如`goBack`，`goForward`,`push<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="redirect"><a href="#redirect" class="headerlink" title="redirect"></a><a href="https://vue3js.cn/interview/React/React%20Router.html#redirect">redirect</a></h3><p>用于路由的重定向，当这个组件出现时，就会执行跳转到对应的<code>to</code>路径中，如下例子：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">About</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>  match<span class="token operator">:</span> <span class="token punctuation">{</span>    params<span class="token operator">:</span> <span class="token punctuation">{</span> name <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>  <span class="token comment">// props.match.params.name</span>  <span class="token operator">&lt;</span>Fragment<span class="token operator">&gt;</span>    <span class="token punctuation">{</span>name <span class="token operator">!==</span> <span class="token string">"tom"</span> <span class="token operator">?</span> <span class="token operator">&lt;</span>Redirect to<span class="token operator">=</span><span class="token string">"/"</span> <span class="token operator">/</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>About <span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>FakeText <span class="token operator">/</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>Fragment<span class="token operator">&gt;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述组件当接收到的路由参数<code>name</code> 不等于 <code>tom</code> 的时候，将会自动重定向到首页</p><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a><a href="https://vue3js.cn/interview/React/React%20Router.html#switch">switch</a></h3><p><code>swich</code>组件的作用适用于当匹配到第一个组件的时候，后面的组件就不应该继续匹配</p><p>如下例子：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Switch</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">exact</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/about<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/profile<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Profile<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/:userid<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>User<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>NoMatch<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Switch</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果不使用<code>switch</code>组件进行包裹</p><p>除了一些路由相关的组件之外，<code>react-router</code>还提供一些<code>hooks</code>，如下：</p><ul><li>useHistory</li><li>useParams</li><li>useLocation</li></ul><h3 id="useHistory"><a href="#useHistory" class="headerlink" title="useHistory"></a><a href="https://vue3js.cn/interview/React/React%20Router.html#usehistory">useHistory</a></h3><p><code>useHistory</code>可以让组件内部直接访问<code>history</code>，无须通过<code>props</code>获取</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> useHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">Contact</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> history <span class="token operator">=</span> <span class="token function">useHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>Fragment<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Contact<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>Go to home<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>Fragment<span class="token operator">&gt;</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="useParams"><a href="#useParams" class="headerlink" title="useParams"></a>useParams</h3><p>useParams 动态参数列表的引用对象，用于获取<code>&lt;Route&gt;</code>中的 match.params (动态参数)</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">About</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> name <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token comment">// props.match.params.name</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Fragment</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token punctuation">{</span>name <span class="token operator">!==</span> <span class="token string">"John Doe"</span> <span class="token operator">?</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Redirect</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">About </span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Contact<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Fragment</span></span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="useLocation"><a href="#useLocation" class="headerlink" title="useLocation"></a><a href="https://vue3js.cn/interview/React/React%20Router.html#uselocation">useLocation</a></h3><p><code>useLocation</code> 会返回当前 <code>URL</code>的 <code>location</code>对象</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> useLocation <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">Contact</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> pathname <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Fragment</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Contact</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Current URL: </span><span class="token punctuation">{</span>pathname<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span> <span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Fragment</span></span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a><a href="https://vue3js.cn/interview/React/React%20Router.html#%E4%B8%89%E3%80%81%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92">参数传递</a></h2><p>这些路由传递参数主要分成了三种形式：</p><ul><li>动态路由的方式</li><li>search传递参数</li><li>to传入对象</li></ul><h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a><a href="https://vue3js.cn/interview/React/React%20Router.html#%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1">动态路由</a></h3><p>动态路由的概念指的是路由中的路径并不会固定</p><p>例如将<code>path</code>在<code>Route</code>匹配时写成<code>/detail/:id</code>，那么 <code>/detail/abc</code>、<code>/detail/123</code>都可以匹配到该<code>Route</code></p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">NavLink</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/detail/abc123<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">详情</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">NavLink</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Switch</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    ... 其他Route    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/detail/:id<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Detail<span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>NoMatch<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Switch</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取参数方式如下：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>match<span class="token punctuation">.</span>params<span class="token punctuation">.</span>xxx<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="search传递参数"><a href="#search传递参数" class="headerlink" title="search传递参数"></a><a href="https://vue3js.cn/interview/React/React%20Router.html#search%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0">search传递参数</a></h3><p>在跳转的路径中添加了一些query参数；</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">NavLink</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/detail2?name=why&amp;age=18<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">详情2</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">NavLink</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Switch</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/detail2<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Detail2<span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Switch</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取形式如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="to传入对象"><a href="#to传入对象" class="headerlink" title="to传入对象"></a><a href="https://vue3js.cn/interview/React/React%20Router.html#to%E4%BC%A0%E5%85%A5%E5%AF%B9%E8%B1%A1">to传入对象</a></h3><p>传递方式如下：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">NavLink</span></span> <span class="token attr-name">to</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>    pathname<span class="token operator">:</span> <span class="token string">"/detail2"</span><span class="token punctuation">,</span>     query<span class="token operator">:</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">"kobe"</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    state<span class="token operator">:</span> <span class="token punctuation">{</span>height<span class="token operator">:</span> <span class="token number">1.98</span><span class="token punctuation">,</span> address<span class="token operator">:</span> <span class="token string">"洛杉矶"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    search<span class="token operator">:</span> <span class="token string">"?apikey=123"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">  详情2</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">NavLink</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取参数的形式如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>location<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a><a href="https://vue3js.cn/interview/React/React%20Router.html#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE">参考文献</a></h2><ul><li><a href="http://react-guide.github.io/react-router-cn/docs/API.html#route">http://react-guide.github.io/react-router-cn/docs/API.html#route</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TS 中 type 与 Interface 区别</title>
      <link href="/2021/02/2462442.html"/>
      <url>/2021/02/2462442.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Type-Aliases"><a href="#Type-Aliases" class="headerlink" title="Type Aliases"></a>Type Aliases</h2><p>我们一直通过直接在类型注释中编写对象类型和联合类型来使用它们。这很方便，但通常希望多次使用同一个类型并用一个名称引用它。</p><p><em>类型别名</em>就是这样 -任何<em>类型</em>的<em>名称</em>。</p><p>类型别名的语法是：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Point</span> <span class="token operator">=</span> <span class="token punctuation">{</span>  x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>  y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// Exactly the same as the earlier example</span><span class="token keyword">function</span> <span class="token function">printCoord</span><span class="token punctuation">(</span>pt<span class="token operator">:</span> Point<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"The coordinate's x value is "</span> <span class="token operator">+</span> pt<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"The coordinate's y value is "</span> <span class="token operator">+</span> pt<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token function">printCoord</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>尝试<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际上，您可以使用类型别名来为任何类型命名，而不仅仅是对象类型。例如，类型别名可以命名联合类型：</p><pre class="line-numbers language-none"><code class="language-none">type ID = number | string;尝试<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>请注意，别名<em>只是</em>别名 - 您不能使用类型别名来创建相同类型的不同/不同“版本”。当您使用别名时，就好像您已经编写了别名类型。换句话说，这段代码可能<em>看起来</em>非法，但根据 TypeScript 是可以的，因为这两种类型都是同一类型的别名：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">UserInputSanitizedString</span> <span class="token operator">=</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">sanitizeInput</span><span class="token punctuation">(</span>str<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> UserInputSanitizedString <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">sanitize</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment">// Create a sanitized input</span><span class="token keyword">let</span> userInput <span class="token operator">=</span> <span class="token function">sanitizeInput</span><span class="token punctuation">(</span><span class="token function">getInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Can still be re-assigned with a string though</span>userInput <span class="token operator">=</span> <span class="token string">"new input"</span><span class="token punctuation">;</span>尝试<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="Interfaces"><a href="#Interfaces" class="headerlink" title="Interfaces"></a>Interfaces</h2><p><em>接口声明</em>是命名对象类型的另一种方式：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>  x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>  y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">function</span> <span class="token function">printCoord</span><span class="token punctuation">(</span>pt<span class="token operator">:</span> Point<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"The coordinate's x value is "</span> <span class="token operator">+</span> pt<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"The coordinate's y value is "</span> <span class="token operator">+</span> pt<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token function">printCoord</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>尝试<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就像我们在上面使用类型别名时一样，该示例就像我们使用匿名对象类型一样工作。TypeScript 只关心我们传递给的值的<em>结构</em><code>printCoord</code>——它只关心它是否具有预期的属性。只关心类型的结构和功能是我们称 TypeScript 为<em>结构类型</em>类型系统的原因。</p><h3 id="类型别名和接口的区别"><a href="#类型别名和接口的区别" class="headerlink" title="类型别名和接口的区别"></a>类型别名和接口的区别</h3><p>类型别名和接口非常相似，在很多情况下您可以在它们之间自由选择。几乎所有的特性<code>interface</code>都可以在 中使用<code>type</code>，主要区别在于不能重新打开类型来添加新属性，而接口总是可扩展的。</p><img src="https://babayetu-1309205424.cos.ap-shanghai.myqcloud.com/blogimgs/sp20220316_222545_804.png"><h3 id="相同点-都可以描述一个对象或者函数"><a href="#相同点-都可以描述一个对象或者函数" class="headerlink" title="相同点:都可以描述一个对象或者函数"></a><strong>相同点</strong>:都可以描述一个对象或者函数</h3><h2 id="不同点"><a href="#不同点" class="headerlink" title="不同点:"></a><strong>不同点</strong>:</h2><ul><li>interface可以声明合并</li><li>Interface只能用于声明对象的形状,不能重命名原语</li><li>接口名称将<a href="https://www.typescriptlang.org/play#code/PTAEGEHsFsAcEsA2BTATqNrLusgzngIYDm+oA7koqIYuYQJ56gCueyoAUCKAC4AWHAHaFcoSADMaQ0PCG80EwgGNkALk6c5C1EtWgAsqOi1QAb06groEbjWg8vVHOKcAvpokshy3vEgyyMr8kEbQJogAFND2YREAlOaW1soBeJAoAHSIkMTRmbbI8e6aPMiZxJmgACqCGKhY6ABGyDnkFFQ0dIzMbBwCwqIccabcYLyQoKjIEmh8kwN8DLAc5PzwwbLMyAAeK77IACYaQSEjUWY2Q-YAjABMAMwALA+gbsVjNXW8yxySoAADaAA0CCaZbPh1XYqXgOIY0ZgmcK0AA0nyaLFhhGY8F4AHJmEJILCWsgZId4NNfIgGFdcIcUTVfgBlZTOWC8T7kAJ42G4eT+GS42QyRaYbCgXAEEguTzeXyCjDBSAAQSE8Ai0Xsl0K9kcziExDeiQs1lAqSE6SyOTy0AKQ2KHk4p1V6s1OuuoHuzwArMagA"><em>始终</em>以其原始形式出现</a>在错误消息中，但<em>仅</em>在按名称使用时才出现。</li></ul><p>主要区别:在于不能type不能重新打开类型</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>interface是接口，  </p><p>type是类型，本身就是两个概念。</p><p>只是碰巧表现上比较相似。</p><p>希望定义一个变量类型，就用type，如果希望是能够继承并约束的，就用interface。</p><p>如果你不知道该用哪个，说明你只是想定义一个类型而非接口，所以应该用type</p><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://github.com/SunshowerC/blog/issues/7#type-%E5%8F%AF%E4%BB%A5%E8%80%8C-interface-%E4%B8%8D%E8%A1%8C">typescript 中的 interface 和 type 到底有什么区别？</a></p><p><a href="https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#interfaces">TS官方文档-类型别名和接口的区别</a></p>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 中间件原理</title>
      <link href="/2021/02/2252370.html"/>
      <url>/2021/02/2252370.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>在深入理解中间件之前，我们先来看一个很关键的概念。</p><h4 id="复合函数-函数组合（function-composition）"><a href="#复合函数-函数组合（function-composition）" class="headerlink" title="复合函数/函数组合（function composition）"></a>复合函数/函数组合（function composition）</h4><blockquote><p>在数学中，复合函数是指逐点地把一个函数作用于另一个函数的结果，所得到的第三个函数。</p><p>直观地说，复合两个函数是把两个函数链接在一起的过程，内函数的输出就是外函数的输入。</p><p>– 维基百科</p></blockquote><p>大家看到复合函数应该不陌生，因为上学时的数学课本上都出现过，我们举例回忆下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=</span> x<span class="token operator">^</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token function">x</span><span class="token punctuation">(</span>f ∘ g<span class="token punctuation">)</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">2</span>x<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">4</span>x<span class="token operator">^</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">6</span>x <span class="token operator">+</span> <span class="token number">1</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其实编程上的复合函数和数学上的概念很相似：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">greet</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> x <span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">emote</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> :)</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">compose</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">f<span class="token punctuation">,</span> g</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> happyGreeting <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span>greet<span class="token punctuation">,</span> emote<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// happyGreeting(“Mark”) -&gt; Hello, Mark :)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个写法可能需要你花点时间去理解。如果理解了，那么恭喜你，因为redux的compose写法基本就是这样。但是如果一下子无法理解也没关系，我们只要先记住：</p><ol><li><strong>compose(A, B, C)的返回值是：(arg)=&gt;A(B(C(arg)))，</strong></li><li><strong>内函数的输出就是外函数的输入</strong></li></ol><hr><h4 id="Redux-middleware"><a href="#Redux-middleware" class="headerlink" title="Redux middleware"></a>Redux middleware</h4><p>“It provides a third-party extension point between dispatching an action, and the moment it reaches the reducer.”<br>这是 Dan Abramov 对 middleware 的描述。它提供了一个分类处理 action 的机会。在 middleware 中，你可以检阅每一个流过的 action，挑选出特定类型的 action 进行相应操作，给你一次改变 action 的机会。</p><hr><h4 id="middleware-的由来"><a href="#middleware-的由来" class="headerlink" title="middleware 的由来"></a><strong>middleware</strong> 的由来</h4><p>图 5-2 表达的是 Redux 中一个简单的同步数据流动场景，点击 button 后，在回调中分发一个 action， reducer 收到 action 后，更新 state 并通知 view 重新渲染。单向数据流，看着没什么问题。但是，如果需要打印每一个 action 信息来调试，就得去改 dispatch 或者 reducer 实现，使其具有打印日志的功能。又比如，点击 button 后，需要先去服务端请求数据，只有等数据返回后，才能重新渲染 view，此时我们希望 dispatch 或 reducer 拥有异步请求的功能。再比如，需要异步请求<br>数据返回后，打印一条日志，再请求数据，再打印日志，再渲染。</p><p><strong>Redux同步数据流动</strong></p><p>面对多样的业务场景，单纯地修改 dispatch 或 reducer 的代码显然不具有普适性，我们需要的是可以组合的、自由插拔的插件机制，这一点 Redux 借鉴了 Koa （它是用于构建 Web 应用的 Node.js 框架）里 middleware 的思想，详情可查阅附录 A。另外，Redux 中 reducer 更关心的是数据的转化逻辑，所以 middleware 就是为了增强 dispatch 而出现的。<br>图 5-3 展示了应用 middleware 后 Redux 处理事件的逻辑，每一个 middleware 处理一个相对独立的业务需求，通过串联不同的 middleware 实现变化多样的功能。那么，后续我们就来讨论 middleware 是怎么写的，以及 Redux 是如何让 middleware 串联起来的。</p><img src="https://tva1.sinaimg.cn/large/006aANDQgy1h09k94e5buj30fe03g3z1.jpg" alt="应用中间件后的处理逻辑"><hr><hr><img src="https://babayetu-1309205424.cos.ap-shanghai.myqcloud.com/blogimgs/sp20220316_184550_438.png" alt="分析middleware运行原理"><h4 id="中间件的作用"><a href="#中间件的作用" class="headerlink" title="中间件的作用:"></a>中间件的作用:</h4><p>Redux 自身只能处理同步数据流，但是在实际项目开发中，状态的更新、获取，通常是使用异步操作来实现。</p><ul><li>问题：如何在 Redux 中进行异步操作呢?</li><li>回答：通过 Redux 中间件机制来实现。</li><li>中间件，可以理解为处理一个功能的中间环节，对于 Redux 中间件来说就是在数据到达 reducer 之前进行一系列的处理操作。</li></ul><p>触发时机:dispatching action 和到达reducer之间</p><hr><p>常见的中间间函数:</p><h5 id="Thunk-函数实现上就是针对多参数的-currying-以实现对函数的惰性求值。任何函数，只要参数有回调函数，就能写成-Thunk-函数的形式。"><a href="#Thunk-函数实现上就是针对多参数的-currying-以实现对函数的惰性求值。任何函数，只要参数有回调函数，就能写成-Thunk-函数的形式。" class="headerlink" title="Thunk 函数实现上就是针对多参数的 currying 以实现对函数的惰性求值。任何函数，只要参数有回调函数，就能写成 Thunk 函数的形式。"></a>Thunk 函数实现上就是针对多参数的 currying 以实现对函数的惰性求值。任何函数，只要参数有回调函数，就能写成 Thunk 函数的形式。</h5><img src="https://tva1.sinaimg.cn/large/006aANDQgy1h09llmmsagj30i7072jui.jpg" alt="redux-thunk源码"><hr><hr><p>参考:</p><p>&lt;深入React技术栈&gt;</p><p><a href="https://segmentfault.com/a/1190000023787306">详解redux中间件</a></p>]]></content>
      
      
      <categories>
          
          <category> Redux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redux中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 与面向对象</title>
      <link href="/2021/02/1950120.html"/>
      <url>/2021/02/1950120.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="TypeScript-与面向对象"><a href="#TypeScript-与面向对象" class="headerlink" title="TypeScript 与面向对象"></a>TypeScript 与面向对象</h2><p>面向对象是一种对像是世界理解和抽象的方法</p><p>TS是一种面向对象的编程语言.</p><p>面向对象的主要两个概念:对象和类</p><ul><li><p>对象:是类的一个实例,有状态和行为,即键(名)值对</p></li><li><p>类:是一个默默,是属性和值的集合,它描述一类对象的行为和状态,可以用于共享属性,为创建的实例对象使用</p></li><li><p>方法:函数和对象合写在一起就成了’’方法’’</p><hr></li></ul><h4 id="继承"><a href="#继承" class="headerlink" title="继承:"></a>继承:</h4><p>关键字继承extends,调用父类方法使用super</p><ul><li><p>private（private的成员不能被外部访问；比较带有<code>private</code>或<code>protected</code>成员的类型时，两个类型兼容的条件是private或protected的成员必须相同切来至同一个声明（同一个类））</p></li><li><p>protected（protected和private相似，但protected成员可以在派生类中访问（能被继承，但不能在实例中访问，若构造函数是protected，则不能被实例化，只能被继承））</p></li><li><p>readonly（设置属性为只读，必须在声明时或构造函数里初始化</p></li><li><p><strong>参数属性</strong>（参数属性通过给构造函数参数添加一个访问限定符来声明（public,private,protected）,把声明和赋值合并至一处）</p></li><li><p><strong>存取器（get、set   只带有 get不带有set的存取器自动被推断为readonly）</strong></p></li><li><p><strong>静态属性（static，不能被实例访问，在类里面访问时，需要加上类名）</strong></p></li></ul><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>        <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'动物在叫!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>        <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>        <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'yetu'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">在跑~~</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'铁憨憨'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>    dog<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">'喵喵侠'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>    cat<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'baba'</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类:"></a>抽象类:</h4><p><strong>抽象类</strong>（abstract，抽象类做为其它派生类的基类使用。 它们一般不会直接被实例化。抽象类中的抽象方法不包含具体实现并且必须在派生类中实现）</p><ul><li><p>抽象类专门用于给子类继承方法 ,没有方法体,抽象方法只能定义在抽象类中,子类对抽象方法进行了重写.</p></li><li><p>继承 类 作用: 给别人当爸爸.</p></li><li><p>抽象类和其他类区别,不能用于创建对象</p></li></ul><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 抽象类和其他类区别,不能用于创建对象</span>  <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    name<span class="token operator">:</span> <span class="token builtin">string</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token punctuation">}</span>    <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'爪巴'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> snake <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'铁憨憨'</span><span class="token punctuation">)</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>snake<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="接口"><a href="#接口" class="headerlink" title="接口:"></a>接口:</h4><p>接口定义一个类结构 :用于定义类应该包含那些属性和方法,同时接口也可以当作类型声明去使用,接口种的的所有方法都是抽象方法.</p><p>实现接口就是使类满足接口的要求.</p><p> 主要作用含义:类比usb type :接口实际上定义一个规范 只要实现这个规范,就可以在指定的场景使用,是对类的一个限制.</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">interface</span> <span class="token class-name">myInterface</span> <span class="token punctuation">{</span>    name<span class="token operator">:</span> <span class="token builtin">string</span>    age<span class="token operator">:</span> <span class="token builtin">number</span>  <span class="token punctuation">}</span>  <span class="token keyword">interface</span> <span class="token class-name">myInterface</span> <span class="token punctuation">{</span>    gender<span class="token operator">:</span> <span class="token builtin">string</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> obj2<span class="token operator">:</span> myInterface <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token operator">:</span> <span class="token string">'sss'</span><span class="token punctuation">,</span>    age<span class="token operator">:</span> <span class="token number">111</span><span class="token punctuation">,</span>    gender<span class="token operator">:</span> <span class="token string">'male'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span>  <span class="token comment">// 接口可以在定义类的时候去限制类的结构</span>  <span class="token comment">// 接口中所有的的属性不能有实际的值</span>  <span class="token comment">// 接口定义对象的结构,而不考虑实际值</span>  <span class="token comment">// 在接口中的所有方法都是抽象方法</span>  <span class="token keyword">interface</span> <span class="token class-name">myInter</span> <span class="token punctuation">{</span>    name<span class="token operator">:</span> <span class="token builtin">string</span>    <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>  <span class="token punctuation">}</span>  <span class="token comment">// 实现接口 用implements: 使类满足接口的要求</span>  <span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token keyword">implements</span> <span class="token class-name">myInter</span> <span class="token punctuation">{</span>    <span class="token comment">// 将所有属性和方法实现</span>    name<span class="token operator">:</span> <span class="token builtin">string</span>    <span class="token comment">// 补充构造函数 使属性初始化</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token punctuation">}</span>    <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'铁憨憨'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="泛型"><a href="#泛型" class="headerlink" title="泛型:"></a>泛型:</h4><p>在定义函数或者类的时候,遇到数据类型不明确的,需要根据实际调用的时候决定是什么数据类型的时候可以使用泛型.</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">描述类型用大写表示定义一个泛型函数<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">fn</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">K</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">//不指定泛型ts会 自动推断</span><span class="token comment">// 可以直接调用具有泛型的函数</span><span class="token keyword">let</span> res2 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">fn</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">'baba'</span><span class="token punctuation">)</span> <span class="token comment">//指定泛型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以同时定义多个泛型</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">fn2</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token keyword">return</span> a<span class="token punctuation">}</span><span class="token generic-function"><span class="token function">fn2</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">'yetu'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义一个函数 用于且实现 接口的类</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">fn3</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> Inter<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> a<span class="token punctuation">.</span>length<span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyClass<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token constant">T</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> mc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token string">'爸爸'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TS与面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解React setState</title>
      <link href="/2021/02/1513910.html"/>
      <url>/2021/02/1513910.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>整体流程:</p><img src="" alt="React生命周期整体流程图"><p>在 React 应用中，任何可变数据应当只有一个相对应的唯一“数据源”。</p><p>React 元素是<a href="https://en.wikipedia.org/wiki/Immutable_object">不可变对象</a>。一旦被创建，你就无法更改它的子元素或者属性。</p><p>一个元素就像电影的单帧：它代表了某个特定时刻的 UI。</p><p>通常，state 都是首先添加到需要渲染数据的组件中去。</p><p>然后，如果其他组件也需要这个 state，那么你可以将它提升至这些组件的最近共同父组件中。</p><p>你应当依靠<a href="https://zh-hans.reactjs.org/docs/state-and-lifecycle.html#the-data-flows-down">自上而下的数据流</a>，而不是尝试在不同组件间同步 state。</p><p>提升state方式比双向绑定方式需要编写更多的“样板”代码，但带来的好处是，排查和隔离 bug 所需的工作量将会变少</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>深入React技术栈</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> setState </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React性能优化</title>
      <link href="/2021/02/1058758.html"/>
      <url>/2021/02/1058758.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>长话短说:</p><ul><li><p>减少DOM跨节点操纵</p></li><li><p>发挥shouldComponentUpdate 的作用</p></li><li><p>避免更改你正用于 props 或 state 的值</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redux 缺点</title>
      <link href="/2021/02/0817051.html"/>
      <url>/2021/02/0817051.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Redux 缺点。如下：</p><ol><li><a href="https://www.zhihu.com/search?q=%E4%B8%AD%E9%97%B4%E4%BB%B6&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1517694160%7D">中间件</a>的基本能力还不够强</li><li>state很容易滥用</li><li>你的应用要使用纯函数去处理变化</li><li>应用中，状态很多都要抽象到 store，那么何时使用 local states 何时接入 Redux store</li><li>Redux 带来了<a href="https://www.zhihu.com/search?q=%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:274963347%7D">函数式编程</a>、不可变性思想等等，为了配合这些理念，开发者必须要写很多“模式代码（boilerplate）”，繁琐以及重复是开发者不愿意容忍的。当然也有很多 hack 旨在减少 boilerplate，但目前阶段，可以说 Redux 天生就附着繁琐</li><li>你的应用就要用 objects 或者 arrays 描述状态</li></ol><p>以上种种限制，都不是构建一个应用所必要的。而全部都是 Redux 所强加的，<strong>那么这样好吗？</strong></p><hr><p>对于很多应用，是没必要的。但是对于另外一些场景，<strong>这些限制也都会转化成闪光之处</strong>，缺点仿佛又成了优点，包括且不限于：</p><ul><li>便于调试，具体不再展开；</li><li>便于线上错误收集，只需要发送 states, actions 等快照即可；</li><li>结合 localStorage 初始化 store；</li><li>便于服务端渲染；</li><li>开发在线协作型应用的救命解药；</li><li>时光旅行 Undo／Redo；</li><li>便于测试</li></ul>]]></content>
      
      
      <categories>
          
          <category> Redux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 生成文件目录树</title>
      <link href="/2021/02/018570.html"/>
      <url>/2021/02/018570.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><a href="http://gnuwin32.sourceforge.net/packages/tree.htm">下载地址</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xt_xi@baba-yetu MINGW64 ~/Hexo <span class="token punctuation">(</span>master<span class="token punctuation">)</span>$ tree -L <span class="token number">1</span>Hexo├── _config.landscape.yml├── _config.yml├── db.json├── desktop.ini├── node_modules├── package-lock.json├── package.json├── public├── <span class="token builtin class-name">source</span>├── themes└── yarn.lock<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看帮助手册</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xt_xi@baba-yetu MINGW64 ~/Hexo <span class="token punctuation">(</span>master<span class="token punctuation">)</span>$ tree --helpUsage: tree <span class="token punctuation">[</span>options<span class="token punctuation">]</span>Options:  -V, --version           输出版本号  -a, --all-files         打印所有文件，包括隐藏文件。  --dirs-first            列出文件之前的目录。  -d, --dirs-only         仅列出目录。  -s, --sizes             以字节为单位打印每个文件的大小以及姓名。  -I, --exclude <span class="token punctuation">[</span>patterns<span class="token punctuation">]</span>排除匹配模式的文件。 <span class="token operator">|</span> 分开                             交替模式。 把你的整个图案包裹起来                             双引号。 例如。 `“节点模块<span class="token operator">|</span>覆盖”。  -L, --max-depth <span class="token operator">&lt;</span>n<span class="token operator">&gt;</span>     目录树的最大显示深度。.  -r, --reverse           按字母倒序对输出进行排序。  -F, --trailing-slash    为目录附加一个“/”。  -S, --line-ascii        打开 ASCII 线图形。  -h, --help                display <span class="token builtin class-name">help</span> <span class="token keyword">for</span> <span class="token builtin class-name">command</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基于 node 的 treer</p><p><a href="https://www.npmjs.com/package/tree-node-cli">npm文档</a></p><p>全局安装:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g treer<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React diff</title>
      <link href="/2021/02/0161006.html"/>
      <url>/2021/02/0161006.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="什么是-“React-Fiber”？"><a href="#什么是-“React-Fiber”？" class="headerlink" title="什么是 “React Fiber”？"></a>什么是 “React Fiber”？</h3><p>Fiber 是 React 16 中新的协调引擎。</p><p>它的主要目的是使 Virtual DOM 可以进行增量式渲染:能够将渲染工作分成块并将其分散到多个帧上。提高其在动画、布局和手势等领域的适用性。<a href="https://github.com/acdlite/react-fiber-architecture">了解更多</a>.</p><hr><p>React15diff算法:</p><ul><li>tree diff</li><li>component diff</li><li>element diff</li></ul><p>实现策略见深入React技术栈173-181,此处省略</p><hr><p>旧版 React 通过递归的方式进行渲染，使用的是 JS 引擎自身的函数调用栈，它会一直执行到栈空为止。</p><p>而<code>Fiber</code>实现了自己的组件调用栈，它以链表的形式遍历组件树，可以灵活的暂停、继续和丢弃执行的任务。</p><p>实现方式是使用了浏览器的<code>requestIdleCallback</code>这一 API。</p><p>官方的解释是这样的：</p><blockquote><p>window.requestIdleCallback()会在浏览器空闲时期依次调用函数，这就可以让开发者在主事件循环中执行后台或低优先级的任务，而且不会对像动画和用户交互这些延迟触发但关键的事件产生影响。函数一般会按先进先调用的顺序执行，除非函数在浏览器调用它之前就到了它的超时时间。</p></blockquote><p>Fiber 只是一个普通的js 对象Object, 其中包含有关组件、其输入和输出的信息。</p><p>一条 fiber对应于一个堆栈帧，是一个任务单元,它也对应于一个组件的实例,</p><p>并且与实例具有一对一的关系它管理实例的工作.为不同类型的更新分配优先级.</p><p>因此它跟踪那个实例用于使用属性的状态节点他还跟踪它与树中的其他fiber 关系<br>在更新之前已经有了fiber tree 在初始渲染期间构建,并且启动了一些 work in progress tree<br>并且从第一个fiber fiber 就是主机 drem 并且实际上它对应你在dom中主语以响应应用程序的容器它的第一个子项是列表.</p><p>从主机根目录到子列表直接的存在的关系,然后有一个关系从列表返回到作为返回关系的父项</p><p>React 去修复他所做的是切换指针,以便当前指针现在只想我们刚刚构建的工作进行中树,有一个很好的好处渲染虚拟树然后返回元素数组进行对比是否总可以重用意味着反应可以重用旧对象它可以重用工作进行中树中的东西，并且在下次必须构建时复制键值建立一个正在进行的工作树work in progress tree 称为双缓存,可以节省内存分配和垃圾回收的时间,</p><p>Fiber 架构将如何短期内使react 应用程序变得更好,它通过允许更高优先级的更新排成一列以条规较低优先级的更新之前,从而使更新更好<br>的协调工作,从而使UI更加流程和负责,他通过将工作分解成更小的工作单元来做到这一点,这些可以暂停,一边主线程了可以处理它需要的其他任务,这就是协调调度</p><p><a href="https://www.youtube.com/watch?v=ZCuYPiUIONs&amp;t=1571s">React conf 2017</a></p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> diff </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript入门</title>
      <link href="/2021/01/2033883.html"/>
      <url>/2021/01/2033883.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>​    具体添加如下内容:</p><ul><li><p>类型批注和编译时类型检查</p></li><li><p>类型推断</p></li><li><p>类型擦除</p></li><li><p>接口</p></li><li><p>枚举</p></li><li><p>Mixin</p></li><li><p>泛型编程</p></li><li><p>命名空间</p></li><li><p>元组</p></li><li><p>async/await</p><p>以下功能是从ECMA 2015反向移植而来：</p><ul><li><a href="https://zh.wikipedia.org/wiki/%E7%B1%BB_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)">类</a></li><li><a href="https://zh.wikipedia.org/wiki/%E6%A8%A1%E7%B5%84_(%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88)">模块</a>[<a href="https://zh.wikipedia.org/wiki/TypeScript#cite_note-28">28]</a></li><li><a href="https://zh.wikipedia.org/wiki/%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0">匿名函数</a>的箭头语法</li><li>可选参数以及<a href="https://zh.wikipedia.org/wiki/%E9%BB%98%E8%AA%8D%E5%8F%83%E6%95%B8">默认参数</a></li></ul></li></ul><hr><p>安装TS:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g typescripttsc -v //查看版本tsc app.ts //编译app 为js 代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>TypeScript 程序由以下几个部分组成：</p><ul><li>模块</li><li>函数</li><li>变量</li><li>语句和表达式</li><li>注释</li></ul><p>编写第一个TS程序</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> hello <span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">'hello world'</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>ts代码不能直接运行在浏览器端(目前),需要编译为JS格式后(通过tsc 命令进行编译</p><hr><h2 id="TypeScript-保留关键字"><a href="#TypeScript-保留关键字" class="headerlink" title="TypeScript 保留关键字"></a>TypeScript 保留关键字</h2><p>TypeScript 保留关键字如下表所示：</p><table><thead><tr><th>break</th><th>as</th><th>catch</th><th>switch</th></tr></thead><tbody><tr><td>case</td><td>if</td><td>throw</td><td>else</td></tr><tr><td>var</td><td>number</td><td>string</td><td>get</td></tr><tr><td>module</td><td>type</td><td>instanceof</td><td>typeof</td></tr><tr><td>public</td><td>private</td><td>enum</td><td>export</td></tr><tr><td>finally</td><td>for</td><td>while</td><td>void</td></tr><tr><td>null</td><td>super</td><td>this</td><td>new</td></tr><tr><td>in</td><td>return</td><td>true</td><td>false</td></tr><tr><td>any</td><td>extends</td><td>static</td><td>let</td></tr><tr><td>package</td><td>implements</td><td>interface</td><td>function</td></tr><tr><td>new</td><td>try</td><td>yield</td><td>const</td></tr><tr><td>continue</td><td>do</td><td></td><td></td></tr></tbody></table><h3 id="空白和换行"><a href="#空白和换行" class="headerlink" title="空白和换行"></a>空白和换行</h3><p>TypeScript 会忽略程序中出现的空格、制表符和换行符。</p><p>空格、制表符通常用来缩进代码，使代码易于阅读和理解。</p><h3 id="TypeScript-区分大小写"><a href="#TypeScript-区分大小写" class="headerlink" title="TypeScript 区分大小写"></a>TypeScript 区分大小写</h3><p>TypeScript 区分大写和小写字符。</p><h3 id="分号是可选的"><a href="#分号是可选的" class="headerlink" title="分号是可选的"></a>分号是可选的</h3><p>每行指令都是一段语句，你可以使用分号或不使用， 分号在 TypeScript 中是可选的，建议使用。</p><p>以下代码都是合法的：</p><pre class="line-numbers language-none"><code class="language-none">console.log("Runoob")console.log("Google");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果语句写在同一行则一定需要使用分号来分隔，否则会报错，如：</p><pre class="line-numbers language-none"><code class="language-none">console.log("Runoob");console.log("Google");<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="TypeScript-注释"><a href="#TypeScript-注释" class="headerlink" title="TypeScript 注释"></a>TypeScript 注释</h3><p>注释是一个良好的习惯，虽然很多程序员讨厌注释，但还是建议你在每段代码写上文字说明。</p><p>注释可以提高程序的可读性。</p><p>注释可以包含有关程序一些信息，如代码的作者，有关函数的说明等。</p><p>编译器会忽略注释。</p><h3 id="TypeScript-支持两种类型的注释"><a href="#TypeScript-支持两种类型的注释" class="headerlink" title="TypeScript 支持两种类型的注释"></a>TypeScript 支持两种类型的注释</h3><ul><li><strong>单行注释 ( // )</strong> − 在 // 后面的文字都是注释内容。</li><li><strong>多行注释 (/* */)</strong> − 这种注释可以跨越多行。</li></ul><p>注释实例：</p><pre class="line-numbers language-none"><code class="language-none">// 这是一个单行注释 /*  这是一个多行注释  这是一个多行注释  这是一个多行注释 */<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>state 和 props 区别</title>
      <link href="/2021/01/1834716.html"/>
      <url>/2021/01/1834716.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="状态和属性有什么区别"><a href="#状态和属性有什么区别" class="headerlink" title="状态和属性有什么区别?"></a>状态和属性有什么区别?</h3><p>state 和 props 都是普通的 JavaScript 对象。</p><p>虽然它们都保存着影响渲染输出的信息，但它们在组件方面的功能不同。</p><p>Props 以类似于函数参数的方式传递给组件，而状态则类似于在函数内声明变量并对它进行管理。</p><p>States vs Props</p><table><thead><tr><th>Conditions</th><th>States</th><th>Props</th></tr></thead><tbody><tr><td>可从父组件接收初始值</td><td>是</td><td>是</td></tr><tr><td>可在父组件中改变其值</td><td>否</td><td>是</td></tr><tr><td>在组件内设置默认值</td><td>是</td><td>是</td></tr><tr><td>在组件内可改变</td><td>是</td><td>否</td></tr><tr><td>可作为子组件的初始值</td><td>是</td><td>是</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> state &amp; props </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 高频问题</title>
      <link href="/2021/01/1515926.html"/>
      <url>/2021/01/1515926.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="1-react-什么时候使用状态管理器"><a href="#1-react-什么时候使用状态管理器" class="headerlink" title="1.react 什么时候使用状态管理器?"></a>1.react 什么时候使用状态管理器?</h4><p>从组件角度看<br>1.某个组件的状态，需要共享<br>2.某个状态需要在任何地方都可以拿到<br>3.一个组件需要改变全局状态<br>4.一个组件需要改变另一个组件的状态</p><p>当程序中出现大量不相干组件需要互相通信而现有的组件间通信技术（</p><p>状态提升、context、storage等）不能很好的解决时，一个状态管理器作为中间者，可以降低组件间通信的复杂度。（购房者、买房者、中介）一样的场景。</p><h4 id="2-render函数中return如果没有使用-会有什么问题？"><a href="#2-render函数中return如果没有使用-会有什么问题？" class="headerlink" title="2.render函数中return如果没有使用()会有什么问题？"></a>2.render函数中return如果没有使用()会有什么问题？</h4><p>在使用JSX语法书写react代码时，babel会将JSX语法编译成js，同时会在每行自动添加<strong>分号</strong>（；），如果<code>return</code>后换行了，那么就会变成 <code>return；</code> 一般情况下会报错：</p><ul><li><strong>Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.</strong></li></ul><p><strong>上面这段英文翻译成中文：</strong></p><ul><li>渲染没有返回任何内容。这通常意味着缺少return语句。或者，为了不渲染，返回null。</li></ul><p>为了代码可读性我们一般会在return后面添加括号这样代码可以折行书写，否则就在return 后面紧跟着语句，这样也是可以的。</p><p>举两个正确的书写例子：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">Nav</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>c_navbar<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token punctuation">{</span> some jsx magic here <span class="token punctuation">}</span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token function-variable function">Nav</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>c_navbar<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token punctuation">{</span> some jsx magic here <span class="token punctuation">}</span><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>错误的写法：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">Nav</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>c_navbar<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token punctuation">{</span> some jsx magic here <span class="token punctuation">}</span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[<a href="https://github.com/haizlin/fe-interview/issues/951#">react] componentWillUpdate可以直接修改state的值吗？</a></p><p>react组件在每次需要重新渲染时候都会调用<code>componentWillUpdate()</code>,</p><p>例如，我们调用 <code>this.setState()</code>时候</p><p>在这个函数中我们之所以不调用<code>this.setState()</code>是因为该方法会触发另一个<code>componentWillUpdate()</code>,如果我们<code>componentWillUpdate()</code>中触发状态更改,将会以无限循环结束.</p><p>引用<a href="https://zh-hans.reactjs.org/docs/react-component.html">文档原文</a>：“你也可以在 componentDidUpdate() 中直接调用 setState()，但请注意它必须被包裹在一个条件语句里，正如上述的例子那样进行处理，否则会导致死循环。它还会导致额外的重新渲染，虽然用户不可见，但会影响组件性能。”</p><h4 id="3-React-严格模式的用处"><a href="#3-React-严格模式的用处" class="headerlink" title="3.React 严格模式的用处"></a>3.React 严格模式的用处</h4><p>react的strictMode 是一个突出显示应用程序中潜在问题的工具，与Fragment一样，strictMode 不会渲染任何的可见UI，它为其后代元素触发额外的检查和警告。</p><p>注意：严格模式仅在开发模式下运行，它们不会影响生产构建</p><p>可以为程序的任何部分使用严格模式</p><p>有助于：</p><ul><li>识别不安全的生命周期</li><li>关于使用过时字符串 ref API 的警告</li><li>关于使用废弃的 findDOMNode 方法的警告</li><li>检测意外的副作用</li><li>检测过时的 context API</li></ul><p>4.除了实例的属性可以获取Context外哪些地方还能直接获取Context呢？</p><ul><li><a href="https://zh-hans.reactjs.org/docs/context.html#api">API</a><ul><li><a href="https://zh-hans.reactjs.org/docs/context.html#reactcreatecontext">React.createContext</a></li><li><a href="https://zh-hans.reactjs.org/docs/context.html#contextprovider">Context.Provider</a></li><li><a href="https://zh-hans.reactjs.org/docs/context.html#classcontexttype">Class.contextType</a></li><li><a href="https://zh-hans.reactjs.org/docs/context.html#contextconsumer">Context.Consumer</a></li><li><a href="https://zh-hans.reactjs.org/docs/context.html#contextdisplayname">Context.displayName</a></li></ul></li></ul><h4 id="4-React如何进行代码拆分？拆分的原则是什么？"><a href="#4-React如何进行代码拆分？拆分的原则是什么？" class="headerlink" title="4.React如何进行代码拆分？拆分的原则是什么？"></a>4.React如何进行代码拆分？拆分的原则是什么？</h4><p>我认为react的拆分前提是代码目录设计规范，模块定义规范，代码设计规范，符合程序设计的一般原则，例如高内聚、低耦合等等。</p><p>在我们的react项目中：<br>1、在 api 层面我们单独封装，对外暴露http请求的结果。<br>2、数据层我们使用的react-redux 异步中间件使用的是redux-thunk 分装处理异步请求，合业务逻辑处理。<br>3、视图层，尽量使用 redux 层面的传递过来的数据，修改逻辑 也是重新触发action 更改props。<br>4、静态类型的资源单独放置<br>5、公共组件、高阶组件、插件单独放置<br>6、工具类文件单独放置</p><h4 id="5-React组件的构造函数有什么作用？"><a href="#5-React组件的构造函数有什么作用？" class="headerlink" title="5.React组件的构造函数有什么作用？"></a>5.React组件的构造函数有什么作用？</h4><p>通常，在 React 中，构造函数仅用于以下两种情况：</p><ul><li>通过给 <code>this.state</code> 赋值对象来初始化<a href="https://zh-hans.reactjs.org/docs/state-and-lifecycle.html">内部 state</a>。</li><li>为<a href="https://zh-hans.reactjs.org/docs/handling-events.html">事件处理函数</a>绑定实例</li></ul><p>在 <code>constructor()</code> 函数中<strong>不要调用 setState() 方法</strong>。如果你的组件需要使用内部 state，请直接在构造函数中为 <strong>this.state 赋值初始 state</strong>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 不要在这里调用 this.setState()</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> counter<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>handleClick <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleClick</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只能在构造函数中直接为 <code>this.state</code> 赋值。如需在其他方法中赋值，你应使用 <code>this.setState()</code> 替代。</p><p>要避免在构造函数中引入任何副作用或订阅。如遇到此场景，请将对应的操作放置在 <code>componentDidMount</code> 中。</p><h4 id="6-React中在哪捕获错误？"><a href="#6-React中在哪捕获错误？" class="headerlink" title="6.React中在哪捕获错误？"></a>6.React中在哪捕获错误？</h4><p>错误边界组件</p><p>官网例子:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">ErrorBoundary</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> error<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> errorInfo<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token function">componentDidCatch</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> errorInfo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 捕获以下任何组件中的错误并使用错误消息重新呈现</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      error<span class="token operator">:</span> error<span class="token punctuation">,</span>      errorInfo<span class="token operator">:</span> errorInfo    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">//您还可以在此处将错误消息记录到错误报告服务 </span>  <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>errorInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// Error path</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>          <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>Something went wrong<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>          <span class="token operator">&lt;</span>details style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> whiteSpace<span class="token operator">:</span> <span class="token string">'pre-wrap'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>            <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>error <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>error<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>            <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">&gt;</span>            <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>errorInfo<span class="token punctuation">.</span>componentStack<span class="token punctuation">}</span>          <span class="token operator">&lt;</span><span class="token operator">/</span>details<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// Normally, just render children</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">BuggyCounter</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> counter<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleClick <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleClick</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>counter<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>      counter<span class="token operator">:</span> counter <span class="token operator">+</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>counter <span class="token operator">===</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// Simulate a JS error</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'I crashed!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1 onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>counter<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>b<span class="token operator">&gt;</span>          This is an example <span class="token keyword">of</span> error boundaries <span class="token keyword">in</span> React <span class="token number">16.</span>          <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">&gt;</span>          Click on the numbers to increase the counters<span class="token punctuation">.</span>          <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">&gt;</span>          The counter is programmed to <span class="token keyword">throw</span> when it reaches <span class="token number">5.</span> This simulates a JavaScript error <span class="token keyword">in</span> a component<span class="token punctuation">.</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>b<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>hr <span class="token operator">/</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>ErrorBoundary<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>These two counters are inside the same error boundary<span class="token punctuation">.</span> If one crashes<span class="token punctuation">,</span> the error boundary will replace both <span class="token keyword">of</span> them<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>BuggyCounter <span class="token operator">/</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>BuggyCounter <span class="token operator">/</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>ErrorBoundary<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>hr <span class="token operator">/</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>These two counters are each inside <span class="token keyword">of</span> their own error boundary<span class="token punctuation">.</span> So <span class="token keyword">if</span> one crashes<span class="token punctuation">,</span> the other is not affected<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>ErrorBoundary<span class="token operator">&gt;</span><span class="token operator">&lt;</span>BuggyCounter <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>ErrorBoundary<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>ErrorBoundary<span class="token operator">&gt;</span><span class="token operator">&lt;</span>BuggyCounter <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>ErrorBoundary<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-如何给非控组件设置默认的值？"><a href="#7-如何给非控组件设置默认的值？" class="headerlink" title="7.如何给非控组件设置默认的值？"></a>7.如何给非控组件设置默认的值？</h4><ul><li><p>表单元素依赖于状态(state)，表单元素需要默认值实时映射到状态的时候，就是受控组件</p></li><li><p>不通过state控制表单元素，而是通过ref来控制的表单元素就是非受控组件</p></li><li><p>给非受控组件设置defaultValue属性，给定默认值</p></li></ul><h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><p>在 React 渲染生命周期时，表单元素上的 <code>value</code> 将会覆盖 DOM 节点中的值。在非受控组件中，你经常希望 React 能赋予组件一个初始值，但是不去控制后续的更新。 在这种情况下, 你可以指定一个 <code>defaultValue</code> 属性，而不是 <code>value</code>。在一个组件已经挂载之后去更新 <code>defaultValue</code> 属性的值，不会造成 DOM 上值的任何更新。</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">onSubmit</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        Name:        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>          <span class="token attr-name">defaultValue</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Bob<span class="token punctuation">"</span></span>          <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>          <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>input<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Submit<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样，<code>&lt;input type="checkbox"&gt;</code> 和 <code>&lt;input type="radio"&gt;</code> 支持 <code>defaultChecked</code>，<code>&lt;select&gt;</code> 和 <code>&lt;textarea&gt;</code> 支持 <code>defaultValue</code>。</p><h4 id="8-使用Hooks要遵守哪些原则？"><a href="#8-使用Hooks要遵守哪些原则？" class="headerlink" title="8.使用Hooks要遵守哪些原则？"></a>8.使用Hooks要遵守哪些原则？</h4><p>1，只能在函数式组件中使用<br>2，不能在条件判断，循环体中使用<br>3，只能放在作用域最外层</p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="9-useEffect和useLayoutEffect有什么区别？"><a href="#9-useEffect和useLayoutEffect有什么区别？" class="headerlink" title="9.useEffect和useLayoutEffect有什么区别？"></a>9.useEffect和useLayoutEffect有什么区别？</h4><h4 id="10-怎样使用Hooks获取服务端数据？"><a href="#10-怎样使用Hooks获取服务端数据？" class="headerlink" title="10.怎样使用Hooks获取服务端数据？"></a>10.怎样使用Hooks获取服务端数据？</h4><p>要求函数式写法,不能是class写法</p><pre class="line-numbers language-none"><code class="language-none">///案例一const {data,setData} = useState({});//渲染值///页面初始化useEffect(()=&gt;{    axios.get().then(res =&gt; {        setData(res);    })},[]);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">///案例二const {data,setData} = useState({});//渲染值///条件调用const getPostData = ({data}) =&gt;{     axios.get(data).then(res =&gt; {        setData(res);    })}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="11-react中修改prop引发的生命周期有哪几个？"><a href="#11-react中修改prop引发的生命周期有哪几个？" class="headerlink" title="11.react中修改prop引发的生命周期有哪几个？"></a>11.react中修改prop引发的生命周期有哪几个？</h4><blockquote><p>React 16.4+</p></blockquote><ol><li><code>static getDerivedStateFromProps</code></li><li><code>shouldComponentUpdate</code></li><li><code>render</code></li><li><code>getSnapshotBeforeUpdate</code></li><li><code>componentDidUpdate</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 类组件和函数式组件的区别</title>
      <link href="/2021/01/1248530.html"/>
      <url>/2021/01/1248530.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>语法上:</p><p>函数组件式纯函数,需要接收props参数并且返回一个React元素.</p><p>类组件 需要继承React.Component,并且创建render函数,返回react 元素</p><p>调用方式:</p><p>函数组件可以直接调用,返回一个新的React元素</p><p>类组件在调用时创建一个实例,然后通过调用实例里的render方法返回一个React元素</p><p>状态管理:</p><p>函数式组件没有状态管理,16.8通过hook 钩子函数,useState 去管理state,</p><p>使用useEffect去使用生命周期函数</p><p>渲染时的差异值:</p><p>类组件的this是可变的,事件处理程序属于具有特定<code>props</code>和<code>state</code>的特定渲染,</p><p>当回调超时的话，<code>this.props</code>就会打破这种联系,在回调时没有绑定到任何特定的渲染，它会丢失真正的<code>props</code></p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 类区间与函数组件的区别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈HOC的优缺点</title>
      <link href="/2021/01/0550638.html"/>
      <url>/2021/01/0550638.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>HOC</strong><br>优点<br>通过传递props去影响内层组件的状态，不直接改变内层组件的状态，降低了耦合度<br>缺点<br>组件多层嵌套， 增加复杂度与理解成本<br>ref隔断， React.forwardRef 来解决<br>高阶组件多层嵌套，相同命名的props会覆盖老属性<br>不清楚props来源与哪个高阶组件</p><hr><p><strong>render props</strong><br>优点<br>props命名可修改，不存在相互覆盖<br>清楚props来源<br>不会出现组件多层嵌套<br>缺点<br>函数回调形式的嵌套<br>写法繁琐，没有hoc装饰器写法简单<br>无法在return以外的地方访问数据</p><hr><p> 组件状态复用问题:</p><p>  mixins:数据来源不清晰,命名冲突,</p><p>  HOC,render props  <strong>重构组件结构,导致组件形成JSX嵌套形成的JSX嵌套地狱问题</strong></p><ul><li><p>class组件自身的问题: </p></li><li><p>同一业务状态和业务逻辑被拆分到不同位置.</p><p>不利于代码压缩和优化,不利于TS类型推导</p></li></ul><hr><p><strong>hook</strong><br>优点<br>解决了hoc，render props的嵌套问题<br>可以在 return 之外使用数据<br>可以重命名，不存在覆盖，且清楚数据来源<br>缺点<br>在闭包场景可能会引用到旧的state、props值</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 为什么要用Hook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Hooks 入门</title>
      <link href="/2021/01/0133965.html"/>
      <url>/2021/01/0133965.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="开始使用useState-函数"><a href="#开始使用useState-函数" class="headerlink" title="开始使用useState 函数:"></a>开始使用useState 函数:</h4><p>当我们使用 <code>useState</code> 定义 state 变量时候，它返回一个有两个值的数组。</p><p>第一个值是当前的 state</p><p>第二个值是更新 state 的函数。</p><p>使用 <code>[0]</code> 和 <code>[1]</code> 来访问有点令人困惑，因为它们有特定的含义。这就是我们使用数组解构的原因。</p><h4 id="调用-useState-方法的时候做了什么"><a href="#调用-useState-方法的时候做了什么" class="headerlink" title="调用 useState 方法的时候做了什么?"></a><strong>调用 useState 方法的时候做了什么?</strong></h4><p>它定义一个 “state 变量”。我们的变量叫 <code>count</code>， 但是我们可以叫他任何名字，比如 <code>banana</code>。</p><p>这是一种在函数调用时保存变量的方式 —— <code>useState</code> 是一种新方法，它与 class 里面的 <code>this.state</code> 提供的功能完全相同。</p><p>一般来说，在函数退出后变量就会”消失”，而 state 中的变量会被 React 保留。</p><p>在app.js中,rfc快速创建片段</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 返回值:[状态/初始值,修改状态的方法]</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>h4<span class="token operator">&gt;</span>计数器<span class="token operator">:</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h4<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另一个写法比较好理解</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 返回值:[状态/初始值,修改状态的方法]</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token function-variable function">handlerClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">// setCount((prevCount)=&gt;prevCount+1) 同样是异步的表现</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>h4<span class="token operator">&gt;</span>计数器<span class="token operator">:</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h4<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>handlerClick<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>useState的初始值(参数)只会在组件第一次渲染时生效,只会走一次,React内部会存储state值,</p><p>再次渲染拿到的是新的state.</p><p>所以初始值是需要大量计算的才能拿到的话,更加建议写在useState(()=&gt;{}) 的回调函数里.</p><p>因为函数的初始值只在渲染一次,这样可以减少性能损耗.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'爪巴'</span><span class="token punctuation">)</span>   <span class="token keyword">let</span> initQuantity <span class="token operator">=</span> <span class="token number">0</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     initQuantity <span class="token operator">+=</span> i   <span class="token punctuation">}</span>   <span class="token keyword">return</span> initQuantity <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意项:</p><ul><li><p>提供的多个状态时,每一个调用返回的[state,setState]互不影响</p></li><li><p>不能嵌套在if for 或其他条件表达式(React hook 底层是基于链表（Array）实现，</p><p>每次组件被 render 的时候都会顺序执行所有的 hooks，因为底层是链表,</p><p>每一个 hook 的 next 是指向下一个 hook 的</p><p>所以要求开发者不能在不同 hooks 调用中使用判断条件，因为 if 会导致顺序不正确，从而导致报错</p></li></ul><hr><h4 id="开始使用useEffect函数"><a href="#开始使用useEffect函数" class="headerlink" title="开始使用useEffect函数"></a>开始使用useEffect函数</h4><p>Effect Hook可以让你在函数组件中执行副作用操作</p><h4 id="useEffect-做了什么？"><a href="#useEffect-做了什么？" class="headerlink" title="useEffect 做了什么？"></a><strong>useEffect 做了什么？</strong></h4><p>通过使用这个 Hook，你可以告诉 React 组件需要在渲染后执行某些操作。React 会保存你传递的函数（我们将它称之为 “effect”），并且在执行 DOM 更新之后调用它。在这个 effect 中，我们设置了 document 的 title 属性，不过我们也可以执行数据获取或调用其他命令式的 API。</p><h4 id="为什么在组件内部调用-useEffect？"><a href="#为什么在组件内部调用-useEffect？" class="headerlink" title="为什么在组件内部调用 useEffect？"></a><strong>为什么在组件内部调用 useEffect？</strong></h4><p>将 <code>useEffect</code> 放在组件内部让我们可以在 effect 中直接访问 <code>count</code> state 变量（或其他 props）。我们不需要特殊的 API 来读取它 —— 它已经保存在函数作用域中。Hook 使用了 JavaScript 的闭包机制，而不用在 JavaScript 已经提供了解决方案的情况下，还引入特定的 React API。</p><h4 id="useEffect-会在每次渲染后都执行吗？"><a href="#useEffect-会在每次渲染后都执行吗？" class="headerlink" title="useEffect 会在每次渲染后都执行吗？"></a><strong>useEffect 会在每次渲染后都执行吗？</strong></h4><p>是的，默认情况下，它在第一次渲染之后<em>和</em>每次更新之后都会执行。</p><p>（我们稍后会谈到<a href="https://zh-hans.reactjs.org/docs/hooks-effect.html#tip-optimizing-performance-by-skipping-effects">如何控制它</a>。）你可能会更容易接受 effect 发生在“渲染之后”这种概念,</p><p>不用再去考虑“挂载”还是“更新”。React 保证了每次运行 effect 的同时，DOM 都已经更新完毕。</p><hr><ul><li>推荐一个useEffect()回调里处理一个功能</li><li>第二个参数可以传递[args],指定生效的依赖性</li><li>传递空数组,执行时机:在初始化完成相当于 class compoentDidMount ,只执行一次,发请求,绑定事件</li><li>不传递args,则函数每次调用,都会执行这个业务逻辑</li></ul><hr><h4 id="提示-通过跳过-Effect-进行性能优化"><a href="#提示-通过跳过-Effect-进行性能优化" class="headerlink" title="提示: 通过跳过 Effect 进行性能优化"></a>提示: 通过跳过 Effect 进行性能优化</h4><p>在某些情况下，每次渲染后都执行清理或者执行 effect 可能会导致性能问题。在 class 组件中，我们可以通过在 <code>componentDidUpdate</code> 中添加对 <code>prevProps</code> 或 <code>prevState</code>  的比较逻辑解决：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token parameter">prevProps<span class="token punctuation">,</span> prevState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>prevState<span class="token punctuation">.</span>count <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">You clicked </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> times</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是很常见的需求，所以它被内置到了 <code>useEffect</code> 的 Hook API 中。如果某些特定值在两次重渲染之间没有发生变化，你可以通知 React <strong>跳过</strong>对 effect 的调用，只要传递数组作为 <code>useEffect</code> 的第二个可选参数即可：</p><pre class="line-numbers language-none"><code class="language-none">useEffect(() =&gt; {  document.title = `You clicked ${count} times`;}, [count]); // 仅在 count 更改时更新<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面这个示例中，我们传入 <code>[count]</code> 作为第二个参数。</p><p>这个参数是什么作用呢？如果 <code>count</code> 的值是 <code>5</code>，而且我们的组件重渲染的时候 <code>count</code> 还是等于 <code>5</code>，React 将对前一次渲染的 <code>[5]</code> 和后一次渲染的 <code>[5]</code> 进行比较。</p><p>因为数组中的所有元素都是相等的(<code>5 === 5</code>)，React 会跳过这个 effect，这就实现了性能的优化。</p><p>当渲染时，如果 <code>count</code> 的值更新成了 <code>6</code>，React 将会把前一次渲染时的数组 <code>[5]</code> 和这次渲染的数组 <code>[6]</code> 中的元素进行对比。</p><p>这次因为 <code>5 !== 6</code>，React 就会再次调用 effect。如果数组中有多个元素，即使只有一个元素发生变化，React 也会执行 effect。</p><p>对于有清除操作的 effect 同样适用：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">handleStatusChange</span><span class="token punctuation">(</span><span class="token parameter">status</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setIsOnline</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>isOnline<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  ChatAPI<span class="token punctuation">.</span><span class="token function">subscribeToFriendStatus</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">,</span> handleStatusChange<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    ChatAPI<span class="token punctuation">.</span><span class="token function">unsubscribeFromFriendStatus</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">,</span> handleStatusChange<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 仅在 props.friend.id 发生变化时，重新订阅</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>未来版本，可能会在构建时自动添加第二个参数。</p><blockquote><p>注意：</p><p>如果你要使用此优化方式，请确保数组中包含了<strong>所有外部作用域中会随时间变化并且在 effect 中使用的变量</strong>，否则你的代码会引用到先前渲染中的旧变量。参阅文档，了解更多关于<a href="https://zh-hans.reactjs.org/docs/hooks-faq.html#is-it-safe-to-omit-functions-from-the-list-of-dependencies">如何处理函数</a>以及<a href="https://zh-hans.reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often">数组频繁变化时的措施</a>内容。</p><p>如果想执行只运行一次的 effect（仅在组件挂载和卸载时执行），可以传递一个空数组（<code>[]</code>）作为第二个参数。</p><p>这就告诉 React 你的 effect 不依赖于 props 或 state 中的任何值，所以它永远都不需要重复执行。</p><p>这并不属于特殊情况 —— 它依然遵循依赖数组的工作方式。</p><p>如果你传入了一个空数组（<code>[]</code>），effect 内部的 props 和 state 就会一直拥有其初始值。</p><p>尽管传入 <code>[]</code> 作为第二个参数更接近大家更熟悉的 <code>componentDidMount</code> 和 <code>componentWillUnmount</code> 思维模式，但我们有<a href="https://zh-hans.reactjs.org/docs/hooks-faq.html#is-it-safe-to-omit-functions-from-the-list-of-dependencies">更好的</a><a href="https://zh-hans.reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often">方式</a>来避免过于频繁的重复调用 effect。</p><p>除此之外，请记得 React 会等待浏览器完成画面渲染之后才会延迟调用 <code>useEffect</code>，因此会使得额外操作很方便。</p><p>我们推荐启用 <a href="https://www.npmjs.com/package/eslint-plugin-react-hooks#installation"><code>eslint-plugin-react-hooks</code></a> 中的 <a href="https://github.com/facebook/react/issues/14920"><code>exhaustive-deps</code></a> 规则。此规则会在添加错误依赖时发出警告并给出修复建议。</p></blockquote><p>effect 的清除机制可以避免 <code>componentDidUpdate</code> 和 <code>componentWillUnmount</code> 中的重复，同时让相关的代码关联更加紧密，帮助我们避免一些 bug。</p><p>我们还看到了我们如何根据 effect 的功能分隔他们，这是在 class 中无法做到的。</p><h4 id="模拟componentWillUnmount"><a href="#模拟componentWillUnmount" class="headerlink" title="模拟componentWillUnmount"></a><strong>模拟componentWillUnmount</strong></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>        <span class="token operator">...</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>cosole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'组件死了'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>useEffect 函数返回的函数可以表示组件死亡 </p></blockquote><hr><p>总结useEffect:</p><ul><li>不传参: 模拟 componentDidMount 或者componentDidUpdate</li></ul><p>执行时机:初始化和数据变化的时候执行</p><ul><li>传空数组: </li></ul><p>表示只有在组件第一次渲染后执行，一般会进行<strong>事件绑定</strong>、<strong>发送请求</strong>等。</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hooks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redux 入门</title>
      <link href="/2020/12/2411950.html"/>
      <url>/2020/12/2411950.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="什么时候需要使用全局状态管理"><a href="#什么时候需要使用全局状态管理" class="headerlink" title="什么时候需要使用全局状态管理?"></a>什么时候需要使用全局状态管理?</h3><p>当状态提升提升不能够满足开发需求，状态树并不总是以一种线性的，单向的方式流动。就需要使用状态管理器。</p><h3 id="Redux状态管理器的核心思想"><a href="#Redux状态管理器的核心思想" class="headerlink" title="Redux状态管理器的核心思想:"></a>Redux状态管理器的核心思想:</h3><ul><li><p><code>store</code>状态树</p></li><li><p><code>action</code>行为状态对象</p></li><li><p><code>reducer</code>行为状态的处理</p><hr></li></ul><h3 id="Redux三大原则"><a href="#Redux三大原则" class="headerlink" title="Redux三大原则:"></a>Redux三大原则:</h3><ul><li>单一数据源</li><li>状态是只读的</li><li>状态修改均由纯函数完成</li></ul><hr><p>Redux核心API</p><p>是一个store,有Redux提供的createStore方法生成,想要生成store,必须要传入reducers.,同时也可以传入第二个可选参数初始化状态(initialState),了解redux之前必须知道reducers.</p><ul><li>reducer本质上是纯函数,负责响应action并修改数据的一个角色.</li><li>它有2个参数一个是action操纵指令,一个state当前的状态</li><li>Reducers 就像事件侦听器一样，当他们听到他们感兴趣的动作时，他们会更新状态作为响应。</li><li>Reducers 总是返回状态的累积（基于所有先前状态和当前 Action）。因此，它们充当了状态的 Reducer。每次调用 Redux reducer 时，状态和 Action 都将作为参数传递。然后基于该 Action 减少（或累积）该状态，然后返回下一状态。您可以<em>reduce</em>一组操作和一个初始状态（Store），在该状态下执行这些操作以获得最终的最终状态。</li></ul><p>combineReducers:通常会有多个redux,在这里我们合成为一个根reducer,向外暴露</p><p>Redux名字由来蛋自说的:源于Reduce+Flux,因此可见reducer在Redux架构中的作用</p><p>createStore是Redux中最核心的API:</p><ul><li>getState():获取store中当前的状态.</li><li>dispatch(action):分发action,并返回这个action,这是唯一能改变store数据的方式.</li><li>subscribe(listener):注册一个监听者,它在store发生变化时被调用.</li><li>replaceReducer(nextReducer):更新当前的store里的reducer,一般只会在开发模式中调用该方法</li></ul><p>常用的是getState(),和dispatch()这两个方法.至于另外两个方法,一般会在Redux与某个系统(如React)做桥接的时候使用</p><h3 id="Redux执行机制"><a href="#Redux执行机制" class="headerlink" title="Redux执行机制:"></a>Redux执行机制:</h3><p><img src="https://redux.js.org/assets/images/ReduxDataFlowDiagram-49fa8c3968371d9ef6f2a1486bd40a26.gif" alt="img"></p><hr><h4 id="1-视图层-view-通过store对象里的dispactch方法派发给action对象执行特定的修改State的操纵"><a href="#1-视图层-view-通过store对象里的dispactch方法派发给action对象执行特定的修改State的操纵" class="headerlink" title="1.视图层 view 通过store对象里的dispactch方法派发给action对象执行特定的修改State的操纵"></a>1.视图层 view 通过store对象里的dispactch方法派发给action对象执行特定的修改State的操纵</h4><h4 id="action返回状态给store再传递给reducer"><a href="#action返回状态给store再传递给reducer" class="headerlink" title="action返回状态给store再传递给reducer"></a>action返回状态给store再传递给reducer</h4><p><strong>更新状态的唯一方法是调用store.dispatch()并传入一个动作对象</strong></p><p>action:是个 want to do 的过程 (计划要做一个什么样的操作)通常做逻辑处理操纵</p><h4 id="2-store会将2个参数传递给reduers-即state-和action"><a href="#2-store会将2个参数传递给reduers-即state-和action" class="headerlink" title="2.store会将2个参数传递给reduers,即state,和action"></a>2.store会将2个参数传递给reduers,即state,和action</h4><p>store包裹了action和reducer,是个中间桥梁,将二者钩起来</p><h4 id="3-reducer-去加工处理数据-返回store生成-新的state-树"><a href="#3-reducer-去加工处理数据-返回store生成-新的state-树" class="headerlink" title="3.reducer 去加工处理数据,返回store生成 新的state 树"></a>3.reducer 去加工处理数据,返回store生成 新的state 树</h4><p>store 将运行它的 reducer 函数并将新的 state 值保存在里面，state是store是store某一个时间点的快照集合.</p><p>我们可以调用<code>getState()</code>来检索更新的值,</p><h4 id="4-通知视图层状态改变"><a href="#4-通知视图层状态改变" class="headerlink" title="4.通知视图层状态改变"></a>4.通知视图层状态改变</h4><p>state树发生变化后.store会调用监听函数render 更新UI</p><hr><h4 id="使用actionCreator-生成action"><a href="#使用actionCreator-生成action" class="headerlink" title="使用actionCreator 生成action"></a>使用actionCreator 生成action</h4><p>action 对象中必须拥有 type 字段，redux主要是根据该字段选择对应的 reducer 进行处理</p><hr><h3 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h3><p>reducer 处理函数必须 <a href="https://link.juejin.cn/?target=https://zh.wikipedia.org/wiki/%25E7%25BA%25AF%25E5%2587%25BD%25E6%2595%25B0">纯函数</a>， reducer 接收相应的<code>state</code>，经过处理后返回新的<code>state</code>。不允许返回<code>undefined</code>或者<code>null</code></p><p>数组中有一个reduce方法，其作用就是遍历数组，<strong>将上一次迭代的结果</strong>和<strong>数组中的元素</strong>作为参数传入，<strong>返回一个新的结果</strong>，并且<strong>将这个新的结果作为作为参数和数组的下一个元素进行下一次迭代</strong>。</p><p>我们可以把<strong>进行reduce操作的函数叫做reducer</strong>。</p><p>只不过，<strong>redux迭代的是一次又一次的action，每次action执行完成后都会返回一个新的状态，并且将这个新的状态和下一次action用于下一次迭代</strong>。</p><ul><li><p>reducer 第一次被调用的时候，state 的值是 undefined,可以用es6的默认参数的方式解决。</p></li><li><p>reducer 需要在 action 传入之前提供一个默认的 state 来处理这种情况。</p></li><li><p>reducer 需要当前的 state 和 dispatch 的 action 来决定需要做什么事。</p></li><li><p>假设需要更改数据，应该用更新后的数据创建新的对象或数组并返回它们，及所谓的<code>纯函数</code>，不对传入的state做任何修改。</p></li><li><p>如果没有什么更改，应该返回当前存在的 state 本身。</p></li></ul><p>当需要触发行为变更相关的状态树信息时，必须调用<code>dispatch</code>方法触发更新操作</p><p>决定状态树中内容的是 reducer 的返回值，并非 action 行为对象，因此如果没有对 action 进行 reducer 处理，即便使用<code>dispatch</code>触发更新，状态树也不会发生任何的变化</p><p><code>redux</code>是同步进行的，因此创建 action 行为、触发更新操作<code>dispatch</code>等方法都必须是同步操作，若需要支持异步操作时，需要增加中间件的支持，比如 <a href="https://link.juejin.cn/?target=https://github.com/redux-utilities/redux-promise">redux-promise</a>、<a href="https://link.juejin.cn/?target=https://github.com/reduxjs/redux-thunk">redux-thunk</a> 等</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://cn.redux.js.org/"><strong>Redux 中文官网</strong></a></p><p><a href="https://segmentfault.com/a/1190000022200527">从零实现redux和react-redux</a></p><p><a href="https://www.jianshu.com/p/69c36de6dba7">Reducer函数</a></p>]]></content>
      
      
      <categories>
          
          <category> Redux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React组件通讯</title>
      <link href="/2020/12/1550340.html"/>
      <url>/2020/12/1550340.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>在了解组件通讯,你必须先深入了解React里的<a href="https://segmentfault.com/a/1190000019885667">setState</a>.</p><p>React 官方是要求遵循数据的不可变性的原则,即单项数据流,单向数据流的设计模式，使状态更可预测,debug范围更小,开发效率更高。</p><p>React 组件都必须像纯函数一样保护它们的 props 不被更改。</p><p>将react组件理解成纯函数,数据流驱动,参数传入不允许做更改</p><p>扩展 :</p><p>state内容可以更改,但是不允许直接赋值,需要借助setState</p><p>props用于定义外部接口，state用于记录内部状态</p><p>props的赋值在于外部世界使用组件，state的赋值在于组件内部</p><p>组件不应该改变props的值，而state存在的目的就是让组件来修改的</p><p>state 只能在constructor中设置默认值</p><p>setState修改state的值是异步的</p><h4 id="父向子传值"><a href="#父向子传值" class="headerlink" title="父向子传值:"></a>父向子传值:</h4><h5 id="在父组件通过自定义属性提供数据"><a href="#在父组件通过自定义属性提供数据" class="headerlink" title="在父组件通过自定义属性提供数据:"></a><strong>在父组件通过自定义属性提供数据:</strong></h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> Child <span class="token keyword">from</span> <span class="token string">'./Child'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  state <span class="token operator">=</span> <span class="token punctuation">{</span>    salary<span class="token operator">:</span> <span class="token number">11460</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>        Parent        <span class="token operator">&lt;</span>hr <span class="token operator">/</span><span class="token operator">&gt;</span>        <span class="token punctuation">{</span><span class="token comment">/* //!#1 父组件通过自定义属性进行传递 */</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span>Child salary<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>salary<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="子组件通过this-props接收父组件的需要传递控制的数据"><a href="#子组件通过this-props接收父组件的需要传递控制的数据" class="headerlink" title="子组件通过this.props接收父组件的需要传递控制的数据"></a><strong>子组件通过this.props接收父组件的需要传递控制的数据</strong></h5><p>​    子组件接收的props,只具备读的权限,而props是只读的</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// !#2  子组件（类）通过 this.props 进行接收</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>Child<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>salary<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/* export default function Child(props) {  // !#2  子组件（函数组件）通过 props 进行接收  return &lt;div&gt;Child: {props.salary}&lt;/div&gt;} */</span><span class="token comment">/* export default function Child({ salary }) {  // !#2  子组件（函数组件）通过 props 进行接收  return &lt;div&gt;Child: {salary}&lt;/div&gt;} */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>react官方文档中说道，组件无论是使用函数声明还是通过class声明，都绝不能修改自身的props</p><p>props 作为组件对外通信的一个接口，为了保证组件像纯函数一样没有响应的副作用，所有的组件都必须像纯函数一样保护它们的props不被修改.</p><hr><h4 id="子向父传值"><a href="#子向父传值" class="headerlink" title="子向父传值:"></a>子向父传值:</h4><h5 id="在父组件中给对应的子组件’标签’提供一个回调函数-并定义在组件的顶层-接收子组件传递的args"><a href="#在父组件中给对应的子组件’标签’提供一个回调函数-并定义在组件的顶层-接收子组件传递的args" class="headerlink" title="在父组件中给对应的子组件’标签’提供一个回调函数,并定义在组件的顶层,接收子组件传递的args."></a><strong>在父组件中给对应的子组件’标签’提供一个回调函数,并定义在组件的顶层,接收子组件传递的args.</strong></h5><p>​    <strong>在子组件定义接收父组件的方法,将需要修改的数据状态变为可受控状态,并且提升到顶层,</strong></p><p>​    将需要传递的数据作为实参,传入回调函数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token comment">// !#2 子组件调用父组件传递过来的方法并通过实参传递数据</span>  <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">changeCar</span><span class="token punctuation">(</span><span class="token string">'奔驰'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>        Child<span class="token operator">:</span> <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span><span class="token operator">&gt;</span>奥拓变奔驰<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> Child <span class="token keyword">from</span> <span class="token string">'./Child'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  state <span class="token operator">=</span> <span class="token punctuation">{</span>    car<span class="token operator">:</span> <span class="token string">'奥拓'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span>  <span class="token comment">// !#1 父组件准备方法并传递给子组件</span>  <span class="token function-variable function">changeCar</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">car</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// !#3 在父组件提供的方法中通过形参拿到传递的数据，根据数据修改当前的 state</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> car <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment">// 思考：如果 changeCar 如下写法，思考内部的 this 是什么？</span>  <span class="token comment">// 答案：子组件实例的 props</span>  <span class="token comment">// changeCar() {}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>父组件：<span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>car<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>hr <span class="token operator">/</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>Child changeCar<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeCar<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React组件通讯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用React脚手架创建项目</title>
      <link href="/2020/12/0515122.html"/>
      <url>/2020/12/0515122.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>双向绑定是对表单来说的，表单的双向绑定，说到底不过是 value 的单向绑定 + onChange</strong> <strong>事件侦听的一个语法糖。这个并不是 React 和 Vue</strong> <strong>在理念上真正的差别体现。</strong>同时，<strong>单向数据流不是 Vue 或者 React 的差别，而是 Vue 和 React 的共同</strong>默契<strong>选择。</strong>单向数据流核心是在于避免组件的自身（未来可复用）状态设计，它强调把 state hoist 出来进行集中管理。</p><hr><p>React 推崇函数式，它直接进行<strong>局部重新刷新（或者重新渲染）</strong>，这样更粗暴，更简单，让我们的开发回到了上古时代，就是刷新呗，前端开发非常简单。<strong>但是 React 并不知道什么时候“应该去刷新”，触发局部重新变化是由开发者手动调用 setState</strong> <strong>完成。</strong></p><hr><p>React setState 引起局部重新刷新。为了达到更好的性能，React 暴漏给开发者 shouldComponentUpdate 这个生命周期 hook，来避免不需要的重新渲染（<strong>相比之下，Vue 由于采用依赖追踪，默认就是优化状态：你动了多少数据，就触发多少更新，不多也不少，而 React 对数据变化毫无感知，它就提供 React.createElement 调用已生成 virtual dom</strong>）。<br>另外 <strong>React 为了弥补不必要的更新，会对 setState</strong> <strong>的行为进行合并操作</strong>。因此 setState 有时候会是异步更新，但并不是总是“异步”</p><hr><p>Vue 的响应式理念，进行数据拦截和代理中不存在类似问题（当然也有 batch 的操作）。</p><p><strong>这个设计上的差别，直接影响了 hooks 的实现和表现。</strong></p><p>React hook 底层是基于链表（Array）实现，每次组件被 render 的时候都会顺序执行所有的 hooks，因为底层是链表，每一个 hook 的 next 是指向下一个 hook 的，所以要求开发者不能在不同 hooks 调用中使用判断条件，因为 if 会导致顺序不正确，从而导致报错。</p><p>vue hook 只会被注册调用一次<strong>，vue 之所以能避开这些麻烦的问题，根本原因在于它对数据的响应是基于响应式的，是对数据进行了代理的。他不需要链表进行 hooks 记录，它对数据直接代理观察。</strong></p><p><strong>但是 Vue 这种响应式的方案，也有自己的困扰。</strong>比如 useState() （实际上 evan 命名为 value()）返回的是一个 value wrapper （包装对象）。一个包装对象只有一个属性：.value ，该属性指向内部被包装的值。<strong>我们知道在 JavaScript 中，原始值类型如 string 和 number 是只有值，没有引用的。不管是使用 Object.defineProperty 还是 Proxy，我们无法追踪原始变量后续的变化。</strong>因此 Vue 不得不返回一个包装对象，不然对于基本类型，它无法做到数据的代理和拦截。这算是因为设计理念带来的一个非常非常微小的  side effect</p><hr><ul><li>Vue core 可以静态分析 template，在解析模版时，整个 parse 的过程是利用正则表达式顺序解析模板，当解析到开始标签、闭合标签、文本的时候都会分别执行对应的回调函数，来达到构造 AST 树的目的。</li><li>Vue 事件处理函数中<strong>的 this 默认指向组件实例。</strong>而React 中事件处理函数中<strong>的 this 默认不指向组件实例。</strong></li></ul><hr><p>创建项目:</p><p> 方式一:</p><pre class="line-numbers language-none"><code class="language-none">npm i -g create-react-app  或者 yarn global add create-react-app初始化项目create-react-app my-app，my-app 表示项目名称，可以修改。启动项目：yarn startor npm start缺点：全局安装命令无法保证命令一直是最新版本。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>推荐方式二:</p><pre class="line-numbers language-none"><code class="language-none">npx create-react-app 项目名yarn start 或者 npm start优点：npx 会调用最新的 create-react-app 直接创建 React 项目。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React脚手架创建项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React类组件</title>
      <link href="/2020/11/2550519.html"/>
      <url>/2020/11/2550519.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>VsCode识别当前语言为React 后直接rcc tabs</p><p>这样通过代码片段能快速生成一个React组件</p><pre class="line-numbers language-none"><code class="language-none">import React, { Component } from 'react'export default class request extends Component {  render() {    return (      &lt;div&gt;&lt;/div&gt;    )  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果未使用过ES6,你可以使用create-react-class模块:</p><pre class="line-numbers language-none"><code class="language-none">var createReactClass = require('create-react-class');var Greeting = createReactClass({  render: function() {    return &lt;h1&gt;Hello, {this.props.name}&lt;/h1&gt;;  }});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有以下几个区别值得注意:</p><h2 id="声明默认属性"><a href="#声明默认属性" class="headerlink" title="声明默认属性"></a>声明默认属性</h2><p>无论是函数组件还是 class 组件，都拥有 <code>defaultProps</code> 属性：</p><pre class="line-numbers language-none"><code class="language-none">class Greeting extends React.Component {  // ...}Greeting.defaultProps = {  name: 'Mary'};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果使用 <code>createReactClass()</code> 方法创建组件，那就需要在组件中定义 <code>getDefaultProps()</code> 函数：</p><pre class="line-numbers language-none"><code class="language-none">var Greeting = createReactClass({  getDefaultProps: function() {    return {      name: 'Mary'    };  },  // ...});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="初始化-State"><a href="#初始化-State" class="headerlink" title="初始化 State"></a>初始化 State</h2><p>如果使用 ES6 的 class 关键字创建组件，你可以通过给 <code>this.state</code> 赋值的方式来定义组件的初始 state：</p><pre class="line-numbers language-none"><code class="language-none">class Counter extends React.Component {  constructor(props) {    super(props);    this.state = {count: props.initialCount};  }  // ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果使用 <code>createReactClass()</code> 方法创建组件，你需要提供一个单独的 <code>getInitialState</code> 方法，让其返回初始 state：</p><pre class="line-numbers language-none"><code class="language-none">var Counter = createReactClass({  getInitialState: function() {    return {count: this.props.initialCount};  },  // ...});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自动绑定"><a href="#自动绑定" class="headerlink" title="自动绑定"></a>自动绑定</h2><p>对于使用 ES6 的 class 关键字创建的 React 组件，组件中的方法遵循与常规 ES6 class 相同的语法规则。这意味着这些方法不会自动绑定 <code>this</code> 到这个组件实例。 你需要在 constructor 中显式地调用 <code>.bind(this)</code>：</p><pre class="line-numbers language-none"><code class="language-none">class SayHello extends React.Component {  constructor(props) {    super(props);    this.state = {message: 'Hello!'};    // 这一行很重要！    this.handleClick = this.handleClick.bind(this);  }  handleClick() {    alert(this.state.message);  }  render() {    // 由于 `this.handleClick` 已经绑定至实例，因此我们才可以用它来处理点击事件    return (      &lt;button onClick={this.handleClick}&gt;        Say hello      &lt;/button&gt;    );  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果使用 <code>createReactClass()</code> 方法创建组件，组件中的方法会自动绑定至实例，所以不需要像上面那样做：</p><pre class="line-numbers language-none"><code class="language-none">var SayHello = createReactClass({  getInitialState: function() {    return {message: 'Hello!'};  },  handleClick: function() {    alert(this.state.message);  },  render: function() {    return (      &lt;button onClick={this.handleClick}&gt;        Say hello      &lt;/button&gt;    );  }});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这就意味着，如果使用 ES6 class 关键字创建组件，在处理事件回调时就要多写一部分代码。但对于大型项目来说，这样做可以提升运行效率。</p><p>如果你觉得上述写法很繁琐，那么可以尝试使用<strong>目前还处于试验性阶段</strong>的 Babel 插件 <a href="https://babeljs.io/docs/plugins/transform-class-properties/">Class Properties</a>。</p><pre class="line-numbers language-none"><code class="language-none">class SayHello extends React.Component {  constructor(props) {    super(props);    this.state = {message: 'Hello!'};  }  // 警告：这种语法还处于试验性阶段！  // 在这里使用箭头函数就可以把方法绑定给实例：  handleClick = () =&gt; {    alert(this.state.message);  }  render() {    return (      &lt;button onClick={this.handleClick}&gt;        Say hello      &lt;/button&gt;    );  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请注意，上面这种语法<strong>目前还处于试验性阶段</strong>，这意味着语法随时都可能改变，也存在最终不被列入框架标准的可能。</p><p>为了保险起见，以下三种做法都是可以的：</p><ul><li>在 constructor 中绑定方法。</li><li>使用箭头函数，比如：<code>onClick={(e) =&gt; this.handleClick(e)}</code>。</li><li>继续使用 <code>createReactClass</code>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 什么是类组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在 React 中发起 AJAX 请求</title>
      <link href="/2020/11/0418511.html"/>
      <url>/2020/11/0418511.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="如何在-React-中发起-AJAX-请求？"><a href="#如何在-React-中发起-AJAX-请求？" class="headerlink" title="如何在 React 中发起 AJAX 请求？"></a>如何在 React 中发起 AJAX 请求？</h3><p>在 React 开发中，你能使用任何你喜欢的 AJAX 库，比如社区比较流行的 <a href="https://github.com/axios/axios">Axios</a>，<a href="https://api.jquery.com/jQuery.ajax/">jQuery AJAX</a>，或者是浏览器内置的 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API">window.fetch</a>。</p><h3 id="应该在-React-组件的哪个生命周期函数中发起-AJAX-请求？"><a href="#应该在-React-组件的哪个生命周期函数中发起-AJAX-请求？" class="headerlink" title="应该在 React 组件的哪个生命周期函数中发起 AJAX 请求？"></a>应该在 React 组件的哪个生命周期函数中发起 AJAX 请求？</h3><p>我们推荐你在 <a href="https://zh-hans.reactjs.org/docs/react-component.html#mounting"><code>componentDidMount</code></a> 这个生命周期函数中发起 AJAX 请求。这样做你可以拿到 AJAX 请求返回的数据并通过 <code>setState</code> 来更新组件。</p><h3 id="示例：使用-AJAX-请求结果去改变组件内部-state"><a href="#示例：使用-AJAX-请求结果去改变组件内部-state" class="headerlink" title="示例：使用 AJAX 请求结果去改变组件内部 state"></a>示例：使用 AJAX 请求结果去改变组件内部 state</h3><p>下面这个组件演示了如何在 <code>componentDidMount</code> 中发起 AJAX 请求去更新组件的 state 。</p><p>示例 API 返回如下的 JSON 对象：</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">{  "items": [    { "id": 1, "name": "Apples",  "price": "$2" },    { "id": 2, "name": "Peaches", "price": "$5" }  ] }class MyComponent extends React.Component {  constructor(props) {    super(props);    this.state = {      error: null,      isLoaded: false,      items: []    };  }  componentDidMount() {    fetch("https://api.example.com/items")      .then(res =&gt; res.json())      .then(        (result) =&gt; {          this.setState({            isLoaded: true,            items: result.items          });        },        // 注意：需要在此处处理错误        // 而不是使用 catch() 去捕获错误        // 因为使用 catch 去捕获异常会掩盖掉组件本身可能产生的 bug        (error) =&gt; {          this.setState({            isLoaded: true,            error          });        }      )  }  render() {    const { error, isLoaded, items } = this.state;    if (error) {      return &lt;div&gt;Error: {error.message}&lt;/div&gt;;    } else if (!isLoaded) {      return &lt;div&gt;Loading...&lt;/div&gt;;    } else {      return (        &lt;ul&gt;          {items.map(item =&gt; (            &lt;li key={item.id}&gt;              {item.name} {item.price}            &lt;/li&gt;          ))}        &lt;/ul&gt;      );    }  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里与 <a href="https://zh-hans.reactjs.org/docs/hooks-intro.html">Hook</a> 的实现相同：</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">function MyComponent() {  const [error, setError] = useState(null);  const [isLoaded, setIsLoaded] = useState(false);  const [items, setItems] = useState([]);  // 注意：空的依赖数组 []  // 表示这个 useEffect  // 与 componentDidMount() 类似，只运行一次  useEffect(() =&gt; {    fetch("https://api.example.com/items")      .then(res =&gt; res.json())      .then(        (result) =&gt; {          setIsLoaded(true);          setItems(result);        },        // 注意：需要在此处处理错误        // 而不是使用 catch() 去捕获错误        // 因为使用 catch 去捕获异常会掩盖掉组件本身可能产生的 bug        (error) =&gt; {          setIsLoaded(true);          setError(error);        }      )  }, [])  if (error) {    return &lt;div&gt;Error: {error.message}&lt;/div&gt;;  } else if (!isLoaded) {    return &lt;div&gt;Loading...&lt;/div&gt;;  } else {    return (      &lt;ul&gt;        {items.map(item =&gt; (          &lt;li key={item.id}&gt;            {item.name} {item.price}          &lt;/li&gt;        ))}      &lt;/ul&gt;    );  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React中的ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 里使用refs</title>
      <link href="/2020/10/2447112.html"/>
      <url>/2020/10/2447112.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>字面上来说:ref 即reference(参考),组件被调用时会新建一个该组件的实例,而refs就会只想这个实例.</p><p>它可以是一个回调函数,这个回调函数会在组件被挂载后立即执行</p><h1 id="Refs-转发"><a href="#Refs-转发" class="headerlink" title="Refs 转发"></a>Refs 转发</h1><p>Ref 转发是一项将 <a href="https://zh-hans.reactjs.org/docs/refs-and-the-dom.html">ref</a> 自动地通过组件传递到其一子组件的技巧。对于大多数应用中的组件来说，这通常不是必需的。但其对某些组件，尤其是可重用的组件库是很有用的。最常见的案例如下所述。</p><h2 id="转发-refs-到-DOM-组件"><a href="#转发-refs-到-DOM-组件" class="headerlink" title="转发 refs 到 DOM 组件"></a>转发 refs 到 DOM 组件</h2><p>考虑这个渲染原生 DOM 元素 <code>button</code> 的 <code>FancyButton</code> 组件：</p><pre class="line-numbers language-none"><code class="language-none">function FancyButton(props) {  return (    &lt;button className="FancyButton"&gt;      {props.children}    &lt;/button&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>React 组件隐藏其实现细节，包括其渲染结果。其他使用 <code>FancyButton</code> 的组件<strong>通常不需要</strong>获取内部的 DOM 元素 <code>button</code> 的 <a href="https://zh-hans.reactjs.org/docs/refs-and-the-dom.html">ref</a>。这很好，因为这防止组件过度依赖其他组件的 DOM 结构。</p><p>虽然这种封装对类似 <code>FeedStory</code> 或 <code>Comment</code> 这样的应用级组件是理想的，但其对 <code>FancyButton</code> 或 <code>MyTextInput</code> 这样的高可复用“叶”组件来说可能是不方便的。这些组件倾向于在整个应用中以一种类似常规 DOM <code>button</code> 和 <code>input</code> 的方式被使用，并且访问其 DOM 节点对管理焦点，选中或动画来说是不可避免的。</p><p><strong>Ref 转发是一个可选特性，其允许某些组件接收 ref，并将其向下传递（换句话说，“转发”它）给子组件。</strong></p><p>在下面的示例中，<code>FancyButton</code> 使用 <code>React.forwardRef</code> 来获取传递给它的 <code>ref</code>，然后转发到它渲染的 DOM <code>button</code>：</p><pre class="line-numbers language-none"><code class="language-none">const FancyButton = React.forwardRef((props, ref) =&gt; (  &lt;button ref={ref} className="FancyButton"&gt;    {props.children}  &lt;/button&gt;));// 你可以直接获取 DOM button 的 ref：const ref = React.createRef();&lt;FancyButton ref={ref}&gt;Click me!&lt;/FancyButton&gt;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样，使用 <code>FancyButton</code> 的组件可以获取底层 DOM 节点 <code>button</code> 的 ref ，并在必要时访问，就像其直接使用 DOM <code>button</code> 一样。</p><p>以下是对上述示例发生情况的逐步解释：</p><ol><li>我们通过调用 <code>React.createRef</code> 创建了一个 <a href="https://zh-hans.reactjs.org/docs/refs-and-the-dom.html">React ref</a> 并将其赋值给 <code>ref</code> 变量。</li><li>我们通过指定 <code>ref</code> 为 JSX 属性，将其向下传递给 <code>&lt;FancyButton ref={ref}&gt;</code>。</li><li>React 传递 <code>ref</code> 给 <code>forwardRef</code> 内函数 <code>(props, ref) =&gt; ...</code>，作为其第二个参数。</li><li>我们向下转发该 <code>ref</code> 参数到 <code>&lt;button ref={ref}&gt;</code>，将其指定为 JSX 属性。</li><li>当 ref 挂载完成，<code>ref.current</code> 将指向 <code>&lt;button&gt;</code> DOM 节点。</li></ol><blockquote><p>注意</p><p>第二个参数 <code>ref</code> 只在使用 <code>React.forwardRef</code> 定义组件时存在。常规函数和 class 组件不接收 <code>ref</code> 参数，且 props 中也不存在 <code>ref</code>。</p><p>Ref 转发不仅限于 DOM 组件，你也可以转发 refs 到 class 组件实例中。</p></blockquote><h2 id="组件库维护者的注意事项"><a href="#组件库维护者的注意事项" class="headerlink" title="组件库维护者的注意事项"></a>组件库维护者的注意事项</h2><p><strong>当你开始在组件库中使用 forwardRef 时，你应当将其视为一个破坏性更改，并发布库的一个新的主版本。</strong> 这是因为你的库可能会有明显不同的行为（例如 refs 被分配给了谁，以及导出了什么类型），并且这样可能会导致依赖旧行为的应用和其他库崩溃。</p><p>出于同样的原因，当 <code>React.forwardRef</code> 存在时有条件地使用它也是不推荐的：它改变了你的库的行为，并在升级 React 自身时破坏用户的应用。</p><h2 id="在高阶组件中转发-refs"><a href="#在高阶组件中转发-refs" class="headerlink" title="在高阶组件中转发 refs"></a>在高阶组件中转发 refs</h2><p>这个技巧对<a href="https://zh-hans.reactjs.org/docs/higher-order-components.html">高阶组件</a>（也被称为 HOC）特别有用。让我们从一个输出组件 props 到控制台的 HOC 示例开始：</p><pre class="line-numbers language-none"><code class="language-none">function logProps(WrappedComponent) {  class LogProps extends React.Component {    componentDidUpdate(prevProps) {      console.log('old props:', prevProps);      console.log('new props:', this.props);    }    render() {      return &lt;WrappedComponent {...this.props} /&gt;;    }  }  return LogProps;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>“logProps” HOC 透传（pass through）所有 <code>props</code> 到其包裹的组件，所以渲染结果将是相同的。例如：我们可以使用该 HOC 记录所有传递到 “fancy button” 组件的 props：</p><pre class="line-numbers language-none"><code class="language-none">class FancyButton extends React.Component {  focus() {    // ...  }  // ...}// 我们导出 LogProps，而不是 FancyButton。// 虽然它也会渲染一个 FancyButton。export default logProps(FancyButton);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面的示例有一点需要注意：refs 将不会透传下去。这是因为 <code>ref</code> 不是 prop 属性。就像 <code>key</code> 一样，其被 React 进行了特殊处理。如果你对 HOC 添加 ref，该 ref 将引用最外层的容器组件，而不是被包裹的组件。</p><p>这意味着用于我们 <code>FancyButton</code> 组件的 refs 实际上将被挂载到 <code>LogProps</code> 组件：</p><pre class="line-numbers language-none"><code class="language-none">import FancyButton from './FancyButton';const ref = React.createRef();// 我们导入的 FancyButton 组件是高阶组件（HOC）LogProps。// 尽管渲染结果将是一样的，// 但我们的 ref 将指向 LogProps 而不是内部的 FancyButton 组件！// 这意味着我们不能调用例如 ref.current.focus() 这样的方法&lt;FancyButton  label="Click Me"  handleClick={handleClick}  ref={ref}/&gt;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>幸运的是，我们可以使用 <code>React.forwardRef</code> API 明确地将 refs 转发到内部的 <code>FancyButton</code> 组件。<code>React.forwardRef</code> 接受一个渲染函数，其接收 <code>props</code> 和 <code>ref</code> 参数并返回一个 React 节点。例如：</p><pre class="line-numbers language-none"><code class="language-none">function logProps(Component) {  class LogProps extends React.Component {    componentDidUpdate(prevProps) {      console.log('old props:', prevProps);      console.log('new props:', this.props);    }    render() {      const {forwardedRef, ...rest} = this.props;      // 将自定义的 prop 属性 “forwardedRef” 定义为 ref      return &lt;Component ref={forwardedRef} {...rest} /&gt;;    }  }  // 注意 React.forwardRef 回调的第二个参数 “ref”。  // 我们可以将其作为常规 prop 属性传递给 LogProps，例如 “forwardedRef”  // 然后它就可以被挂载到被 LogProps 包裹的子组件上。  return React.forwardRef((props, ref) =&gt; {    return &lt;LogProps {...props} forwardedRef={ref} /&gt;;  });}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="在-DevTools-中显示自定义名称"><a href="#在-DevTools-中显示自定义名称" class="headerlink" title="在 DevTools 中显示自定义名称"></a>在 DevTools 中显示自定义名称</h2><p><code>React.forwardRef</code> 接受一个渲染函数。React DevTools 使用该函数来决定为 ref 转发组件显示的内容。</p><p>例如，以下组件将在 DevTools 中显示为 “<em>ForwardRef</em>”：</p><pre class="line-numbers language-none"><code class="language-none">const WrappedComponent = React.forwardRef((props, ref) =&gt; {  return &lt;LogProps {...props} forwardedRef={ref} /&gt;;});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果你命名了渲染函数，DevTools 也将包含其名称（例如 “*ForwardRef(myFunction)*”）：</p><pre class="line-numbers language-none"><code class="language-none">const WrappedComponent = React.forwardRef(  function myFunction(props, ref) {    return &lt;LogProps {...props} forwardedRef={ref} /&gt;;  });<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你甚至可以设置函数的 <code>displayName</code> 属性来包含被包裹组件的名称：</p><pre class="line-numbers language-none"><code class="language-none">function logProps(Component) {  class LogProps extends React.Component {    // ...  }  function forwardRef(props, ref) {    return &lt;LogProps {...props} forwardedRef={ref} /&gt;;  }  // 在 DevTools 中为该组件提供一个更有用的显示名。  // 例如 “ForwardRef(logProps(MyComponent))”  const name = Component.displayName || Component.name;  forwardRef.displayName = `logProps(${name})`;  return React.forwardRef(forwardRef);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>React什么是渲染劫持</title>
      <link href="/2020/10/1546847.html"/>
      <url>/2020/10/1546847.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="在-React-中什么是渲染劫持"><a href="#在-React-中什么是渲染劫持" class="headerlink" title="在 React 中什么是渲染劫持?"></a>在 React 中什么是渲染劫持?</h3><p>渲染劫持的概念是控制一个组件将从另一个组件输出什么的能力。实际上，这意味着你可以通过将组件包装成高阶组件来装饰组件。通过包装，你可以注入额外的属性或产生其他变化，这可能会导致渲染逻辑的更改。实际上它不支持劫持，但通过使用 HOC，你可以使组件以不同的方式工作。</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渲染劫持是什么? </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>了解React memo</title>
      <link href="/2020/10/1423718.html"/>
      <url>/2020/10/1423718.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>当类组件的输入属性相同时，可以使用 <strong>pureComponent</strong> 或 <strong>shouldComponentUpdate</strong> 来避免组件的渲染。现在，你可以通过把函数组件包装在 <strong>React.memo</strong> 中来实现相同的功能。</p><h3 id="React-PureComponent"><a href="#React-PureComponent" class="headerlink" title="React.PureComponent"></a><code>React.PureComponent</code></h3><p><code>React.PureComponent</code> 与 <a href="https://zh-hans.reactjs.org/docs/react-api.html#reactcomponent"><code>React.Component</code></a> 很相似。两者的区别在于 <a href="https://zh-hans.reactjs.org/docs/react-api.html#reactcomponent"><code>React.Component</code></a> 并未实现 <a href="https://zh-hans.reactjs.org/docs/react-component.html#shouldcomponentupdate"><code>shouldComponentUpdate()</code></a>，而 <code>React.PureComponent</code> 中以浅层对比 prop 和 state 的方式来实现了该函数。</p><p>如果赋予 React 组件相同的 props 和 state，<code>render()</code> 函数会渲染相同的内容，那么在某些情况下使用 <code>React.PureComponent</code> 可提高性能。</p><blockquote><p>注意</p><p><code>React.PureComponent</code> 中的 <code>shouldComponentUpdate()</code> 仅作对象的浅层比较。如果对象中包含复杂的数据结构，则有可能因为无法检查深层的差别，产生错误的比对结果。仅在你的 props 和 state 较为简单时，才使用 <code>React.PureComponent</code>，或者在深层数据结构发生变化时调用 <a href="https://zh-hans.reactjs.org/docs/react-component.html#forceupdate"><code>forceUpdate()</code></a> 来确保组件被正确地更新。你也可以考虑使用 <a href="https://facebook.github.io/immutable-js/">immutable 对象</a>加速嵌套数据的比较。</p><p>此外，<code>React.PureComponent</code> 中的 <code>shouldComponentUpdate()</code> 将跳过所有子组件树的 prop 更新。因此，请确保所有子组件也都是“纯”的组件。</p></blockquote><hr><h3 id="React-memo"><a href="#React-memo" class="headerlink" title="React.memo"></a><code>React.memo</code></h3><pre class="line-numbers language-none"><code class="language-none">const MyComponent = React.memo(function MyComponent(props) {  /* 使用 props 渲染 */});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>React.memo</code> 为<a href="https://zh-hans.reactjs.org/docs/higher-order-components.html">高阶组件</a>。</p><p>如果你的组件在相同 props 的情况下渲染相同的结果，那么你可以通过将其包装在 <code>React.memo</code> 中调用，以此通过记忆组件渲染结果的方式来提高组件的性能表现。这意味着在这种情况下，React 将跳过渲染组件的操作并直接复用最近一次渲染的结果。</p><p><code>React.memo</code> 仅检查 props 变更。如果函数组件被 <code>React.memo</code> 包裹，且其实现中拥有 <a href="https://zh-hans.reactjs.org/docs/hooks-state.html"><code>useState</code></a>，<a href="https://zh-hans.reactjs.org/docs/hooks-reference.html#usereducer"><code>useReducer</code></a> 或 <a href="https://zh-hans.reactjs.org/docs/hooks-reference.html#usecontext"><code>useContext</code></a> 的 Hook，当 state 或 context 发生变化时，它仍会重新渲染。</p><p>默认情况下其只会对复杂对象做浅层对比，如果你想要控制对比过程，那么请将自定义的比较函数通过第二个参数传入来实现。</p><pre class="line-numbers language-none"><code class="language-none">function MyComponent(props) {  /* 使用 props 渲染 */}function areEqual(prevProps, nextProps) {  /*  如果把 nextProps 传入 render 方法的返回结果与  将 prevProps 传入 render 方法的返回结果一致则返回 true，  否则返回 false  */}export default React.memo(MyComponent, areEqual);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此方法仅作为<strong>性能优化</strong>的方式而存在。但请不要依赖它来“阻止”渲染，因为这会产生 bug。</p><blockquote><p>注意</p><p>与 class 组件中 <a href="https://zh-hans.reactjs.org/docs/react-component.html#shouldcomponentupdate"><code>shouldComponentUpdate()</code></a> 方法不同的是，如果 props 相等，<code>areEqual</code> 会返回 <code>true</code>；如果 props 不相等，则返回 <code>false</code>。这与 <code>shouldComponentUpdate</code> 方法的返回值相反。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>React函数式组件入门</title>
      <link href="/2020/10/0864380.html"/>
      <url>/2020/10/0864380.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><ul><li>React函数组件必须以<strong>大写字母</strong>开头( React 解析组件标签，发现是大写开头的会被当做组件进行解析，解析的时候又发现其是一个函数式组件，随后会调用此函数，将返回的虚拟 DOM 转为真实 DOM，并渲染到页面中。)</li><li>必须有返回值,返回值表示改组件的结构,如果不想渲染任何,则return null</li></ul><p>React中只有类组件有生命周期,定义函数组件方法:使用JS函数.</p><p>函数式组件是一个纯函数又被称为无状态组件,接收props对象返回一个react元素,不能在组件中使用setState(),因为所有生命周期钩子都来自继承的React.Component中.</p><p>而***<a href="https://react.docschina.org/docs/react-without-es6.html">类组件</a>**<em>需要去</em>继承React.Component 并且创建render函数返回react元素*.</p><pre class="line-numbers language-none"><code class="language-none">import React from 'reactconst Baba = (prop)=&gt;{    return &lt;h1&gt; {prop.name}&lt;/h1&gt;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>函数式组件中的this指向未undefined,因为Babel编译后的代码开启的 “use strict”</p><p>此处再总结下,<em><strong>JS在哪些情况 下返回值为undefined</strong></em>?</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1.</span>访问声明<span class="token punctuation">,</span>但没有初始化的变量<span class="token keyword">var</span> a <span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment">//undefined</span><span class="token number">2.</span>访问不存在的属性<span class="token keyword">var</span> a<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token comment">//undefined</span><span class="token number">3.</span>访问任何被设置为 <span class="token keyword">undefined</span> 值的变量<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//undefined </span><span class="token number">4.</span><span class="token function">访问函数的参数没有被显式的传递值</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">//undefined</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token number">5.</span>函数 <span class="token keyword">return</span> 没有显示返回任何内容<span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//undefined</span><span class="token number">6.</span>没有定义<span class="token keyword">return</span> 的函数隐式返回<span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 函数式组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是纯函数</title>
      <link href="/2020/10/0336592.html"/>
      <url>/2020/10/0336592.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="了解纯函数"><a href="#了解纯函数" class="headerlink" title="了解纯函数"></a>了解纯函数</h4><p>特点:</p><img src="https://babayetu-1309205424.cos.ap-shanghai.myqcloud.com/blogimgs/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220314225256.jpg"><blockquote><p>在程序设计中，若一个函数符合以下要求，则它可能被认为是纯函数：<br>此函數在相同的输入值時，需產生相同的輸出。函數的輸出和輸入值以外的其他隐藏信息或狀態無關，也和由I/O設備產生的外部輸出無關。<br>该函数不能有语义上可观察的函数副作用，诸如“触发事件”，使輸出設備輸出，或更改輸出值以外物件的內容等。<br>纯函数的輸出可以不用和所有的輸入值有關，甚至可以和所有的輸入值都無關。但纯函数的輸出不能和輸入值以外的任何資訊有關。纯函数可以傳回多個輸出值，但上述的原則需針對所有輸出值都要成立。若引數是传引用调用，若有對參數物件的更改，就會影響函數以外物件的內容，因此就不是纯函数。</p><p style="float:right">选自wiki</p></blockquote><ul><li>不得改写参数，不能使用全局变量.</li><li>不能调用Date.now() 或者 Math.random().</li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 纯函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是虚拟 DOM</title>
      <link href="/2020/10/0153718.html"/>
      <url>/2020/10/0153718.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="什么是-Virtual-DOM？"><a href="#什么是-Virtual-DOM？" class="headerlink" title="什么是 Virtual DOM？"></a>什么是 Virtual DOM？</h3><p>Virtual DOM 是一种编程概念。</p><p>在这个概念里， UI 以一种理想化的，或者说<strong>“虚拟的”表现形式被保存于内存中，并通过如 ReactDOM 等类库使之与“真实的” DOM 同步。这一过程叫做<a href="https://zh-hans.reactjs.org/docs/reconciliation.html">协调</a>。</strong></p><p>这种方式赋予了 React 声明式的 API：您告诉 React 希望让 UI 是什么状态，React 就确保 DOM 匹配该状态。</p><p>这使您可以从属性操作、事件处理和手动 DOM 更新这些在构建应用程序时必要的操作中解放出来。</p><p>与其将 “Virtual DOM” 视为一种技术，不如说它是一种模式，人们提到它时经常是要表达不同的东西。</p><p>在 React 的世界里，术语 “Virtual DOM” 通常与 <a href="https://zh-hans.reactjs.org/docs/rendering-elements.html">React 元素</a>关联在一起，因为它们都是代表了用户界面的对象。</p><p>而 React 也使用一个名为 “fibers” 的内部对象来存放组件树的附加信息。</p><p>上述二者也被认为是 React 中 “Virtual DOM” 实现的一部分。</p><p><em>Virtual DOM</em> (VDOM) 是 <em>Real DOM</em> 的内存表示形式。</p><p>UI 的展示形式被保存在内存中并与真实的 DOM 同步。</p><p>这是在调用的渲染函数和在屏幕上显示元素之间发生的一个步骤。整个过程被称为 <em>reconciliation</em>。</p><hr><p>  Real DOM vs Virtual DOM</p><table><thead><tr><th align="center">Real DOM</th><th align="center">Virtual DOM</th></tr></thead><tbody><tr><td align="center">更新较慢</td><td align="center">更新较快</td></tr><tr><td align="center">可以直接更新 HTML</td><td align="center">无法直接更新 HTML</td></tr><tr><td align="center">如果元素更新，则创建新的 DOM</td><td align="center">如果元素更新，则更新 JSX</td></tr><tr><td align="center">DOM 操作非常昂贵</td><td align="center">DOM 操作非常简单</td></tr><tr><td align="center">较多的内存浪费</td><td align="center">没有内存浪费</td></tr></tbody></table><p>  阅读资源：</p><ol><li><a href="https://www.zhihu.com/question/29504639">知乎 - 如何理解虚拟DOM?</a></li><li><a href="https://www.edureka.co/blog/interview-questions/react-interview-questions/">edureka - react-interview-questions</a></li></ol><hr><h3 id="Virtual-DOM-分为三个简单的步骤。"><a href="#Virtual-DOM-分为三个简单的步骤。" class="headerlink" title="Virtual DOM 分为三个简单的步骤。"></a><em>Virtual DOM</em> 分为三个简单的步骤。</h3><ol><li>每当任何底层数据发生更改时，整个 UI 都将以 Virtual DOM 的形式重新渲染。</li><li>然后计算先前 Virtual DOM 对象和新的 Virtual DOM 对象之间的差异。</li><li>一旦计算完成，真实的 DOM 将只更新实际更改的内容。</li></ol><hr><h4 id="React实现虚拟DOM"><a href="#React实现虚拟DOM" class="headerlink" title="React实现虚拟DOM:"></a>React实现虚拟DOM:</h4><p>createElement方法返回的对象记录了这个DOM节点所有的信息，换言之，通过它我们就可以生成真正的DOM，这个记录信息的对象我们称之为<strong>虚拟DOM</strong>。</p><p>在浏览器中无法直接使用 JSX，JSX是类XML语法,游览器只能解决原生JS.</p><p>所以大多数 React 开发者需依靠 Babel 或 TypeScript 来<strong>将 JSX 代码转换为 JavaScript</strong>。</p><p>许多包含预配置的工具，例如 Create React App 或 Next.js，在其内部也引入了 JSX 转换。</p><p><strong>.babelrc</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">{</span>    <span class="token string">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"env"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">[</span><span class="token string">"transform-react-jsx"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            <span class="token string">"pragma"</span><span class="token operator">:</span> <span class="token string">"React.createElement"</span>        <span class="token punctuation">}</span><span class="token punctuation">]</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个<code>transform-react-jsx</code>就是将jsx转换成js的babel插件，它有一个<code>pragma</code>项，可以定义jsx转换方法的名称，你也可以将它改成<code>h</code>（这是很多类React框架使用的名称）或别的。</p><p><strong>在定义React组件或者书写React相关代码，不管代码中有没有用到React这个对象，我们都必须将其import进来，这是为什么？</strong></p><p>例如：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>    <span class="token comment">// 下面的代码没有用到React对象，为什么也要将其import进来</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span> <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span> <span class="token string">'editor'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><details>    <summary>答案</summary>summary&gt;    <ul>    <li>JSX 转换**abstract dom tree的时候，需要 `React.createElement`</li>    </ul></details><p>React17版本后,<a href="https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html">官方</a>已经与babel合作<strong>提供了一个新的、重写的 JSX 转换版本。</strong></p><p>可以不导入React情况下使用JSX.</p><h4 id="ReactDOM-render实现真实DOM"><a href="#ReactDOM-render实现真实DOM" class="headerlink" title="ReactDOM.render实现真实DOM"></a>ReactDOM.render实现真实DOM</h4><p><code>render</code>的第一个参数实际上接受的是createElement返回的对象，也就是虚拟DOM<br>而第二个参数则是挂载的目标DOM</p><p>总而言之，render方法的作用就是<strong>将虚拟DOM渲染成真实的DOM</strong>面是它的实现：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span> <span class="token parameter">vnode<span class="token punctuation">,</span> container</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 当vnode为字符串时，渲染结果是一段文本</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token keyword">typeof</span> vnode <span class="token operator">===</span> <span class="token string">'string'</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> textNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span> vnode <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span> textNode <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span> vnode<span class="token punctuation">.</span>tag <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> vnode<span class="token punctuation">.</span>attrs <span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span> vnode<span class="token punctuation">.</span>attrs <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> <span class="token parameter">key</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> value <span class="token operator">=</span> vnode<span class="token punctuation">.</span>attrs<span class="token punctuation">[</span> key <span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token function">setAttribute</span><span class="token punctuation">(</span> dom<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置属性</span>        <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vnode<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> <span class="token parameter">child</span> <span class="token operator">=&gt;</span> <span class="token function">render</span><span class="token punctuation">(</span> child<span class="token punctuation">,</span> dom <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 递归渲染子节点</span>    <span class="token keyword">return</span> container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span> dom <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将渲染结果挂载到真正的DOM上</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Shadow-DOM-和-Virtual-DOM-是一回事吗？"><a href="#Shadow-DOM-和-Virtual-DOM-是一回事吗？" class="headerlink" title="Shadow DOM 和 Virtual DOM 是一回事吗？"></a>Shadow DOM 和 Virtual DOM 是一回事吗？</h3><p>不，他们不一样。Shadow DOM 是一种浏览器技术，主要用于在 web 组件中封装变量和 CSS。</p><p>Virtual DOM 则是一种由 Javascript 类库基于浏览器 API 实现的概念。</p><h3 id="什么是-“React-Fiber”？"><a href="#什么是-“React-Fiber”？" class="headerlink" title="什么是 “React Fiber”？"></a>什么是 “React Fiber”？</h3><p>Fiber 是 React 16 中新的协调引擎。</p><p>它的主要目的是使 Virtual DOM 可以进行增量式渲染。<a href="https://github.com/acdlite/react-fiber-architecture">了解更多</a>.</p><hr><h3 id="React高性能的原理："><a href="#React高性能的原理：" class="headerlink" title="React高性能的原理："></a>React高性能的原理：</h3><p>在Web开发中我们总需要将变化的数据实时反应到UI上，这时就需要对DOM进行操作。而复杂或频繁的DOM操作通常是性能瓶颈产生的原因（如何进行高性能的复杂DOM操作通常是衡量一个前端开发人员技能的重要指标）。</p><p>React为此引入了虚拟DOM（Virtual DOM）的机制：在浏览器端用Javascript实现了一套DOM API。基于React进行开发时所有的DOM构造都是通过虚拟DOM进行，每当数据变化时，React都会重新构建整个DOM树，然后React将当前整个DOM树和上一次的DOM树进行对比，得到DOM结构的区别，然后仅仅将需要变化的部分进行实际的浏览器DOM更新。而且React能够批处理虚拟DOM的刷新，在一个事件循环（Event Loop）内的两次数据变化会被合并，例如你连续的先将节点内容从A-B,B-A，React会认为A变成B，然后又从B变成A UI不发生任何变化，而如果通过手动控制，这种逻辑通常是极其复杂的。</p><p>尽管每一次都需要构造完整的虚拟DOM树，但是因为虚拟DOM是内存数据，性能是极高的，部而对实际DOM进行操作的仅仅是Diff分，因而能达到提高性能的目的。这样，在保证性能的同时，开发者将不再需要关注某个数据的变化如何更新到一个或多个具体的DOM元素，而只需要关心在任意一个数据状态下，整个界面是如何Render的。</p><h3 id="React-Fiber"><a href="#React-Fiber" class="headerlink" title="React Fiber:"></a>React Fiber:</h3><p>在react 16之后发布的一种react 核心算法，<strong>React Fiber是对核心算法的一次重新实现</strong>(官网说法)。之前用的是diff算法。</p><p>在之前React中，更新过程是同步的，这可能会导致性能问题。</p><p>当React决定要加载或者更新组件树时，会做很多事，比如调用各个组件的生命周期函数，计算和比对Virtual DOM，最后更新DOM树，这整个过程是同步进行的，也就是说只要一个加载或者更新过程开始，中途不会中断。因为JavaScript单线程的特点，如果组件树很大的时候，每个同步任务耗时太长，就会出现卡顿。</p><p>React Fiber的方法其实很简单——分片。把一个耗时长的任务分成很多小片，每一个小片的运行时间很短，虽然总时间依然很长，但是在每个小片执行完之后，都给其他任务一个执行的机会，这样唯一的线程就不会被独占，其他任务依然有运行的机会。</p><h3 id="React的特点和优势"><a href="#React的特点和优势" class="headerlink" title="React的特点和优势"></a>React的特点和优势</h3><ol><li><h4 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h4></li></ol><p>我们以前操作dom的方式是通过document.getElementById()的方式，这样的过程实际上是先去读取html的dom结构，将结构转换成变量，再进行操作</p><p>而reactjs定义了一套变量形式的dom模型，一切操作和换算直接在变量中，这样减少了操作真实dom，性能真实相当的高，和主流MVC框架有本质的区别，并不和dom打交道</p><ol><li><h4 id="组件系统"><a href="#组件系统" class="headerlink" title="组件系统"></a>组件系统</h4></li></ol><p>react最核心的思想是将页面中任何一个区域或者元素都可以看做一个组件 component</p><p>那么什么是组件呢？</p><p>组件指的就是同时包含了html、css、js、image元素的聚合体</p><p>使用react开发的核心就是将页面拆分成若干个组件，并且react一个组件中同时耦合了css、js、image，这种模式整个颠覆了过去的传统的方式</p><ol><li><h4 id="单向数据流"><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流</h4></li></ol><p>其实reactjs的核心内容就是数据绑定，所谓数据绑定指的是只要将一些服务端的数据和前端页面绑定好，开发者只关注实现业务就行了</p><ol><li><h4 id="JSX-语法"><a href="#JSX-语法" class="headerlink" title="JSX 语法"></a>JSX 语法</h4></li></ol><p>在vue中，我们使用render函数来构建组件的dom结构性能较高，因为省去了查找和编译模板的过程，但是在render中利用createElement创建结构的时候代码可读性较低，较为复杂，此时可以利用jsx语法来在render中创建dom，解决这个问题，但是前提是需要使用工具来编译jsx</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://zh-hans.reactjs.org/docs/faq-internals.html#what-is-the-virtual-dom">Virtual DOM 及内核</a></p><p><a href="https://github.com/hujiulong/blog/issues/4">从零开始实现一个React（一）：JSX和虚拟DOM </a></p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Virtual DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 类组件生命周期</title>
      <link href="/2020/09/2554232.html"/>
      <url>/2020/09/2554232.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="React类组件生命周期主要分三个阶段"><a href="#React类组件生命周期主要分三个阶段" class="headerlink" title="React类组件生命周期主要分三个阶段:"></a>React类组件生命周期主要分三个阶段:</h3><ul><li>挂载阶段</li><li>更新阶段</li><li>卸载阶段</li></ul><h3 id="挂载阶段"><a href="#挂载阶段" class="headerlink" title="挂载阶段"></a><strong>挂载阶段</strong></h3><table><thead><tr><th>钩子函数</th><th>触发时机</th><th>作用</th></tr></thead><tbody><tr><td>constructor</td><td>创建组件时，最先执行</td><td>1. 初始化 state 2. 创建 Ref 等</td></tr><tr><td>render</td><td>每次组件渲染都会触发</td><td>渲染 UI（<strong>注意： 不能调用 setState()</strong> ）</td></tr><tr><td>componentDidMount</td><td>组件挂载（完成 DOM 渲染）后</td><td>1. 发送网络请求 2.DOM 操作</td></tr></tbody></table><h3 id="更新阶段"><a href="#更新阶段" class="headerlink" title="更新阶段"></a><strong>更新阶段</strong></h3><table><thead><tr><th align="center">钩子函数</th><th>触发时机</th><th>作用</th></tr></thead><tbody><tr><td align="center">render</td><td>每次组件渲染都会触发</td><td>渲染 UI（与挂载阶段是同一个 render）</td></tr><tr><td align="center">componentDidUpdate</td><td>组件更新（完成 DOM 渲染）后</td><td>DOM 操作，可以获取到更新后的 DOM 内容，不要调用 setState</td></tr></tbody></table><h3 id="卸载阶段"><a href="#卸载阶段" class="headerlink" title="卸载阶段"></a><strong>卸载阶段</strong></h3><p>componentWillUnmount  组件卸载（从页面中消失）  执行清理工作（比如：清理定时器等、解绑事件等）</p><hr><p>当组件的 props 或 state 发生变化时会触发更新。</p><h3 id="组件更新的生命周期调用顺序如下："><a href="#组件更新的生命周期调用顺序如下：" class="headerlink" title="组件更新的生命周期调用顺序如下："></a><em><strong>组件更新的生命周期调用顺序如下</strong></em>：</h3><ul><li><a href="https://zh-hans.reactjs.org/docs/react-component.html#static-getderivedstatefromprops"><code>static getDerivedStateFromProps()</code></a></li><li><a href="https://zh-hans.reactjs.org/docs/react-component.html#shouldcomponentupdate"><code>shouldComponentUpdate()</code></a></li><li><a href="https://zh-hans.reactjs.org/docs/react-component.html#render"><strong>render()</strong></a></li><li><a href="https://zh-hans.reactjs.org/docs/react-component.html#getsnapshotbeforeupdate"><code>getSnapshotBeforeUpdate()</code></a></li><li><a href="https://zh-hans.reactjs.org/docs/react-component.html#componentdidupdate"><strong>componentDidUpdate()</strong></a></li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React生命周期 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSX入门</title>
      <link href="/2020/09/1053908.html"/>
      <url>/2020/09/1053908.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>JSX是JavaScript XML 的简写.使用JSX优势在于:能用声明式语法更直观,与HTML结构相同,提高开发效率.</p><p>JSX并不是标准ECMAScript 语法,再React中使用JSX需要配合Babel编译成React.createElement(),</p><p>并配合浏览器使用,create-react-app 脚手架中已经内置Babel相关配置.</p><hr><p>React推荐的做法是  </p><p>JSX + inline style, 也就是把HTML和CSS全都写进JavaScript了,即’all in  js’。</p><p>JSX实际就是一套使用XML语法，用于让我们更简单地去描述<a href="https://www.zhihu.com/search?q=%E6%A0%91%E7%8A%B6%E7%BB%93%E6%9E%84&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:815280420%7D">树状结构</a>的语法糖。</p><p>在react中，所有的组件的渲染功能都依靠JSX。</p><p>你可以在render()中编写类似XML的语法，它最终会被编译成原生JavaScript。</p><p>不仅仅是  HTML 可以用 JSX 来表达，现在的潮流也越来越多地将 CSS 也纳入到 JavaScript 中来处理。</p><p>JSX是基于 JS  之上的一套额外语法，学习使用起来有一定的成本.</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些Vue及原生js问题</title>
      <link href="/2020/07/094700.html"/>
      <url>/2020/07/094700.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前端常见高频面试题"><a href="#前端常见高频面试题" class="headerlink" title="前端常见高频面试题"></a>前端常见高频面试题</h1><p>[TOC]</p><h3 id="1、什么是mvvm-、-mvc-模型？"><a href="#1、什么是mvvm-、-mvc-模型？" class="headerlink" title="1、什么是mvvm  、 mvc 模型？"></a>1、什么是mvvm  、 mvc 模型？</h3><img src="https://tva1.sinaimg.cn/large/006aANDQly1gy8ory9uk0j31ew0l8k5a.jpg"><p><em>MVC</em>: MVC即model-view-controller（模型-视图-控制器）是项目的一种分层架构思想，它把复杂的业务逻辑，抽离为职能单一的小模块，每个模块看似相互独立，其实又各自有相互依赖关系。它的好处是：保证了模块的智能单一性，方便程序的开发、维护、耦合度低。</p><img src="https://tva1.sinaimg.cn/large/006aANDQly1gy8os4d81pj31gr0m5ww4.jpg"><p>mvvm: <em>MVVM</em>：MVVM即 <em>Model-View-ViewModel</em>，(模型-视图-控制器)它是一种双向数据绑定的模式，用viewModel来建立起model数据层和view视图层的连接，数据改变会影响视图，视图改变会影响数据</p><h3 id="2、vue双向数据绑定的原理？"><a href="#2、vue双向数据绑定的原理？" class="headerlink" title="2、vue双向数据绑定的原理？"></a>2、vue双向数据绑定的原理？</h3><p>　　vue.js 是采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。</p><p>　　具体步骤：</p><p>　　第一步：需要 observe 的数据对象进行递归遍历，包括子属性对象的属性，都加上 setter 和 getter<br>这样的话，给这个对象的某个值赋值，就会触发setter，那么就能监听到了数据变化</p><p>　　第二步：compile解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图</p><p>　　第三步：Watcher订阅者是Observer和Compile之间通信的桥梁，主要做的事情是:</p><p>　　1、在自身实例化时往属性订阅器(dep)里面添加自己</p><p>　　2、自身必须有一个update()方法</p><p>　　3、待属性变动dep.notice()通知时，能调用自身的 update() 方法，并触发Compile中绑定的回调，则功成身退。</p><p>　　第四步：MVVM作为数据绑定的入口，整合Observer、Compile和Watcher三者，通过Observer来监听自己的model数据变化，通过Compile来解析编译模板指令，最终利用Watcher搭起Observer和Compile之间的通信桥梁，达到数据变化 -&gt; 视图更新；视图交互变化(input) -&gt; 数据model变更的双向绑定效果。</p><h3 id="3、vue的生命周期有哪些？"><a href="#3、vue的生命周期有哪些？" class="headerlink" title="3、vue的生命周期有哪些？"></a>3、vue的生命周期有哪些？</h3><img src="https://tva1.sinaimg.cn/large/006aANDQly1gy8oqtoiyhj30fw0pjjyk.jpg"><p>　vue 实例从创建到销毁的过程就是生命周期。</p><p>　　也就是从开始创建、初始化数据、编译模板、挂在 dom -&gt; 渲染、更新 -&gt; 渲染、准备销毁、销毁在等一系列过程</p><p>vue的声明周期常见的主要分为4大阶段8大钩子函数</p><p>另外三个生命周期函数不常用</p><p>keep-alive 主要用于保留组件状态或避免重新渲染。</p><p>activated只有在keep-alive 组件激活时调用。</p><p>deactivated只有在keep-alive 组件停用时调用。</p><p>errorCapured 当捕获一个来自子孙组件的错误时被调用。此钩子会收到三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。此钩子可以返回 <code>false</code> 以阻止该错误继续向上传播。</p><p>一、创建前 / 后</p><p>在beforeCreate生命周期函数执行的时候，data和method 还没有初始化</p><p>在created 生命周期函数执行的时候，data和method已经初始化完成</p><p>二、渲染前/后</p><p>在beforeMount 生命周期函数执行的时候，已经编译好了模版字符串、但还没有真正渲染到页面中去</p><p>在mounted 生命周期函数执行的时候，已经渲染完，可以看到页面</p><p>三、数据更新前/后</p><p>在beforeUpdate生命周期函数执行的时候，已经可以拿到最新的数据，但还没渲染到视图中去。</p><p>在updated生命周期函数执行的时候，已经把更新后的数据渲染到视图中去了。</p><p>四、销毁前/后</p><p>在beforeDestroy 生命周期函数执行的时候，实例进入准备销毁的阶段、此时data 、methods 、指令等还是可用状态</p><p>在destroyed生命周期函数执行的时候，实例已经完成销毁、此时data 、methods 、指令等都不可用</p><h3 id="4、v-if-和v-show有什么区别？"><a href="#4、v-if-和v-show有什么区别？" class="headerlink" title="4、v-if 和v-show有什么区别？"></a>4、v-if 和v-show有什么区别？</h3><p><code>v-if</code> 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建，操作的实际上是dom元素的创建或销毁。</p><p>v-show  就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换 它操作的是display:none/block属性。</p><p>一般来说，<code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 <code>v-show</code> 较好；如果在运行时条件很少改变，则使用 <code>v-if</code> 较好。</p><h3 id="5、async-await-是什么？它有哪些作用？"><a href="#5、async-await-是什么？它有哪些作用？" class="headerlink" title="5、async    await  是什么？它有哪些作用？"></a>5、async    await  是什么？它有哪些作用？</h3><p>async await 是es7里面的新语法、它的作用就是 async 用于申明一个 function 是异步的，而 await 用于等待一个异步方法执行完成。它可以很好的替代promise 中的then</p><p><code>async</code>函数返回一个 Promise 对象，可以使用<code>then</code>方法添加回调函数。当函数执行的时候，一旦遇到<code>await</code>就会先返回，等到异步操作完成，再接着执行函数体内后面的语句。</p><h3 id="6、常用的数组方法有哪些？"><a href="#6、常用的数组方法有哪些？" class="headerlink" title="6、常用的数组方法有哪些？"></a>6、常用的数组方法有哪些？</h3><p> concat()  方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。</p><p> <code>**find()**</code> 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined"><code>undefined</code></a>。</p><p><code>**findIndex()**</code>方法返回数组中满足提供的测试函数的第一个元素的<strong>索引</strong>。否则返回-1。</p><p><code>**includes()**</code> 方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回false。</p><p><code>**indexOf()**</code>方法返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。 （通常用它判断数组中有没有这个元素）</p><p><code>**join()**</code> 方法将一个数组（或一个<a href="https://developer.mozilla.org/zh-CN//docs/Web/JavaScript/Guide/Indexed_collections#Working_with_array-like_objects">类数组对象</a>）的所有元素连接成一个字符串并返回这个字符串。如果数组只有一个项目，那么将返回该项目而不使用分隔符。</p><p><code>**pop()**</code>方法从数组中删除最后一个元素，并返回该元素的值。此方法更改数组的长度。</p><p><code>**push()**</code> 方法将一个或多个元素添加到数组的末尾，并返回该数组的新长度。</p><p><code>**shift()**</code> 方法从数组中删除<strong>第一个</strong>元素，并返回该元素的值。此方法更改数组的长度。</p><p><strong>unshift()</strong> 方法将一个或多个元素添加到数组的<strong>开头</strong>，并返回该数组的<strong>新长度(该</strong>方法修改原有数组**)**。</p><p><strong>splice()</strong> 方法通过删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容。此方法会改变原数组。</p><p>由被删除的元素组成的一个数组。如果只删除了一个元素，则返回只包含一个元素的数组。如果没有删除元素，则返回空数组。</p><p><code>**reverse()**</code> 方法将数组中元素的位置颠倒，并返回该数组。该方法会改变原数组。</p><p><code>**sort()**</code> 方法用<a href="https://en.wikipedia.org/wiki/In-place_algorithm">原地算法</a>对数组的元素进行排序，并返回数组。默认排序顺序是在将元素转换为字符串，然后比较它们的UTF-16代码单元值序列时构建的</p><h3 id="7、数组有哪几种循环方式？分别有什么作用？"><a href="#7、数组有哪几种循环方式？分别有什么作用？" class="headerlink" title="7、数组有哪几种循环方式？分别有什么作用？"></a>7、数组有哪几种循环方式？分别有什么作用？</h3><p><code>**every()**</code> 方法测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值。</p><p><code>**filter()**</code> 方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。</p><p><code>**forEach()**</code> 方法对数组的每个元素执行一次提供的函数。</p><p><code>**some()**</code> 方法测试是否至少有一个元素可以通过被提供的函数方法。该方法返回一个Boolean类型的值。</p><h3 id="8、常用的字符串方法有哪些？"><a href="#8、常用的字符串方法有哪些？" class="headerlink" title="8、常用的字符串方法有哪些？"></a>8、常用的字符串方法有哪些？</h3><p><strong>charAt()</strong> 方法从一个字符串中返回指定的字符。</p><p><strong>concat()</strong> 方法将一个或多个字符串与原字符串连接合并，形成一个新的字符串并返回。</p><p><strong>includes()</strong> 方法用于判断一个字符串是否包含在另一个字符串中，根据情况返回 true 或 false。</p><p>indexOf() 方法返回调用它的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/String"><code>String</code></a> 对象中第一次出现的指定值的索引，从 <code>fromIndex</code> 处进行搜索。如果未找到该值，则返回 -1。</p><p><strong>match()</strong> 方法检索返回一个字符串匹配正则表达式的的结果。</p><p><strong>padStart()</strong> 方法用另一个字符串填充当前字符串(重复，如果需要的话)，以便产生的字符串达到给定的长度。填充从当前字符串的开始(左侧)应用的。 (常用于时间补0)</p><p><strong>replace()</strong> 方法返回一个由替换值（<code>replacement</code>）替换一些或所有匹配的模式（<code>pattern</code>）后的新字符串。模式可以是一个字符串或者一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/RegExp">正则表达式</a>，替换值可以是一个字符串或者一个每次匹配都要调用的回调函数。</p><p>原字符串不会改变。</p><p><strong>slice()</strong> 方法提取某个字符串的一部分，并返回一个新的字符串，且不会改动原字符串。</p><p><code>**split()** </code>方法使用指定的分隔符字符串将一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/String"><code>String</code></a>对象分割成字符串数组，以将字符串分隔为子字符串，以确定每个拆分的位置。</p><p><code>**substr()**</code> 方法返回一个字符串中从指定位置开始到指定字符数的字符。</p><p><strong>trim()</strong> 方法会从一个字符串的两端删除空白字符。在这个上下文中的空白字符是所有的空白字符 (space, tab, no-break space 等) 以及所有行终止符字符（如 LF，CR）。</p><h3 id="9、什么是原型链？"><a href="#9、什么是原型链？" class="headerlink" title="9、什么是原型链？"></a>9、什么是原型链？</h3><p>每一个实例对象上有一个__proto__属性，指向的构造函数的原型对象，构造函数的原型</p><p>对象也是一个对象，也有<strong>proto</strong>属性，这样一层一层往上找的过程就形成了原型链。</p><h3 id="10、什么是闭包？手写一个闭包函数？-闭包有哪些优缺点？"><a href="#10、什么是闭包？手写一个闭包函数？-闭包有哪些优缺点？" class="headerlink" title="10、什么是闭包？手写一个闭包函数？ 闭包有哪些优缺点？"></a>10、什么是闭包？手写一个闭包函数？ 闭包有哪些优缺点？</h3><p>闭包（closure）指有权访问另一个函数作用域中变量的函数。简单理解就是 ，一个作用</p><p>域可以访问另外一个函数内部的局部变量。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> fun<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>作用：延长变量作用域、在函数的外部可以访问函数内部的局部变量，容易造成内层泄露，因为闭包中的局部变量永远不会被回收</p><h3 id="11、常见的继承有哪些？"><a href="#11、常见的继承有哪些？" class="headerlink" title="11、常见的继承有哪些？"></a>11、常见的继承有哪些？</h3><p><strong>一、原型链继承</strong></p><p>特点：1、实例可继承的属性有：实例的构造函数的属性，父类构造函数属性，父类原型的属性。（新实例不会继承父类实例的属性！</p><p>缺点：1、新实例无法向父类构造函数传参。</p><p>　　　2、继承单一。</p><p>　　　3、所有新实例都会共享父类实例的属性。（原型上的属性是共享的，一个实例修改了原型属性，另一个实例的原   型属性也会被修改！）</p><p><strong>二、借用构造函数继承</strong></p><p>重点：用.call()和.apply()将父类构造函数引入子类函数（在子类函数中做了父类函数的自执行（复制））</p><p>　　　　特点：1、只继承了父类构造函数的属性，没有继承父类原型的属性。</p><p>　　　　　　　2、解决了原型链继承缺点1、2、3。</p><p>　　　　　　　3、可以继承多个构造函数属性（call多个）。</p><p>　　　　　　　4、在子实例中可向父实例传参。</p><p>　　　　缺点：1、只能继承父类构造函数的属性。</p><p>　　　　　　　2、无法实现构造函数的复用。（每次用每次都要重新调用）</p><p>　　　　　　　3、每个新实例都有父类构造函数的副本，臃肿。</p><p><strong>三、组合继承（组合原型链继承和借用构造函数继承）（常用）</strong></p><p>重点：<strong>结合了两种模式的优点，传参和复用</strong></p><p>　　　　特点：1、可以继承父类原型上的属性，可以传参，可复用。</p><p>　　　　　　　2、每个新实例引入的构造函数属性是私有的。</p><p>　　　　缺点：调用了两次父类构造函数（耗内存），子类的构造函数会代替原型上的那个父类构造函数。</p><p><strong>四、原型式继承</strong></p><p>重点：用一个函数包装一个对象，然后返回这个函数的调用，这个函数就变成了个可以随意增添属性的实例或对象。object.create()就是这个原理。</p><p>　　　　特点：类似于复制一个对象，用函数来包装。</p><p>　　　　缺点：1、所有实例都会继承原型上的属性。</p><p>　　　　　　　2、无法实现复用。（新实例属性都是后面添加的）</p><p><strong>五、class类实现继承</strong></p><p>通过extends 和super 实现继承</p><p><strong>六、寄生式继承</strong></p><p>重点：就是给原型式继承外面套了个壳子。</p><p>　　　　优点：没有创建自定义类型，因为只是套了个壳子返回对象（这个），这个函数顺理成章就成了创建的新对象。</p><p>　　　　缺点：没用到原型，无法复用。</p><h3 id="12、后台管理系统中的权限管理是怎么实现的？"><a href="#12、后台管理系统中的权限管理是怎么实现的？" class="headerlink" title="12、后台管理系统中的权限管理是怎么实现的？"></a>12、后台管理系统中的权限管理是怎么实现的？</h3><p>登录：当用户填写完账号和密码后向服务端验证是否正确，验证通过之后，服务端会返回一个<strong>token</strong>，拿到token之后（我会将这个token存贮到cookie中，保证刷新页面后能记住用户登录状态），前端会根据token再去拉取一个 <strong>user_info</strong> 的接口来获取用户的详细信息（如用户权限，用户名等等信息）。</p><p>权限验证：通过token获取用户对应的 权限，动态根据用户的 权限算出其对应有权限的路由，通过 <strong>router.addRoutes</strong> 动态挂载这些路由。</p><p>具体思路：</p><p>登录成功后，服务端会返回一个 <strong>token</strong>（该token的是一个能唯一标示用户身份的一个key），之后我们将token存储在本地cookie之中，这样下次打开页面或者刷新页面的时候能记住用户的登录状态，不用再去登录页面重新登录了。</p><p>ps:为了保证安全性，我司现在后台所有token有效期(Expires/Max-Age)都是Session，就是当浏览器关闭了就丢失了。重新打开游览器都需要重新登录验证，后端也会在每周固定一个时间点重新刷新token，让后台用户全部重新登录一次，确保后台用户不会因为电脑遗失或者其它原因被人随意使用账号。</p><p>用户登录成功之后，我们会在全局钩子<code>router.beforeEach</code>中拦截路由，判断是否已获得token，在获得token之后我们就要去获取用户的基本信息了</p><p>页面会先从 cookie 中查看是否存有 token，没有，就走一遍上一部分的流程重新登录，如果有token,就会把这个 token 返给后端去拉取user_info，保证用户信息是最新的。 当然如果是做了单点登录得功能的话，用户信息存储在本地也是可以的。当你一台电脑登录时，另一台会被提下线，所以总会重新登录获取最新的内容。</p><p>先说一说我权限控制的主体思路，前端会有一份路由表，它表示了每一个路由可访问的权限。当用户登录之后，通过 <strong>token</strong> 获取用户的 <strong>role</strong> ，动态根据用户的 <strong>role</strong> 算出其对应有权限的路由，再通过<code>router.addRoutes</code>动态挂载路由。但这些控制都只是页面级的，说白了前端再怎么做权限控制都不是绝对安全的，后端的权限验证是逃不掉的。</p><p>我司现在就是前端来控制页面级的权限，不同权限的用户显示不同的侧边栏和限制其所能进入的页面(也做了少许按钮级别的权限控制)，后端则会验证每一个涉及请求的操作，验证其是否有该操作的权限，每一个后台的请求不管是 get 还是 post 都会让前端在请求 <code>header</code>里面携带用户的 <strong>token</strong>，后端会根据该 <strong>token</strong> 来验证用户是否有权限执行该操作。若没有权限则抛出一个对应的状态码，前端检测到该状态码，做出相对应的操作。</p><p>使用vuex管理路由表，根据vuex中可访问的路由渲染侧边栏组件。</p><p>具体实现：</p><p>创建vue实例的时候将vue-router挂载，但这个时候vue-router挂载一些登录或者不用权限的公用的页面。</p><p>当用户登录后，获取用role，将role和路由表每个页面的需要的权限作比较，生成最终用户可访问的路由表。</p><p>调用router.addRoutes(store.getters.addRouters)添加用户可访问的路由。</p><p>使用vuex管理路由表，根据vuex中可访问的路由渲染侧边栏组件。</p><h3 id="14、es6有哪些新特性？"><a href="#14、es6有哪些新特性？" class="headerlink" title="14、es6有哪些新特性？"></a>14、es6有哪些新特性？</h3><p>ES6是2015年推出的一个新的版本、这个版本相对于ES5的语法做了很多的优化、例如：新增了let、const</p><p>let和const具有块级作用域，不存在变量提升的问题。新增了箭头函数，简化了定义函数的写法，同时可以巧用箭头函数的this、（注意箭头函数本身没有this,它的this取决于外部的环境），新增了promise解决了回调地域的问题，新增了模块化、利用import 、export来实现导入、导出。新增了结构赋值，ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。新增了class类的概念，它类似于对象。</p><h3 id="15、v-for-循环为什么一定要绑定key"><a href="#15、v-for-循环为什么一定要绑定key" class="headerlink" title="15、v-for 循环为什么一定要绑定key ?"></a>15、v-for 循环为什么一定要绑定key ?</h3><p>页面上的标签都对应具体的虚拟dom对象(虚拟dom就是js对象), 循环中 ,如果没有唯一key , 页面上删除一条标签, 由于并不知道删除的是那一条! 所以要把全部虚拟dom重新渲染, 如果知道key为x标签被删除掉, 只需要把渲染的dom为x的标签去掉即可!</p><h3 id="16、组件中的data为什么要定义成一个函数而不是一个对象？"><a href="#16、组件中的data为什么要定义成一个函数而不是一个对象？" class="headerlink" title="16、组件中的data为什么要定义成一个函数而不是一个对象？"></a>16、组件中的data为什么要定义成一个函数而不是一个对象？</h3><p>每个组件都是 Vue 的实例。组件共享 data 属性，当 data 的值是同一个引用类型的值时，改变其中一个会影响其他</p><h3 id="17、常见的盒子垂直居中的方法有哪些请举例3种？"><a href="#17、常见的盒子垂直居中的方法有哪些请举例3种？" class="headerlink" title="17、常见的盒子垂直居中的方法有哪些请举例3种？"></a>17、常见的盒子垂直居中的方法有哪些请举例3种？</h3><p>利用子绝父相定位的方式来实现</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#container</span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span>500px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span>500px<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#center</span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span>    <span class="token property">hight</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span>     <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>     <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>     <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span>-50px<span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span>-50px<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用Css3的transform，可以轻松的在未知元素的高宽的情况下实现元素的垂直居中。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#container</span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#center</span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>flex</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#container</span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span>flex<span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span>    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#center</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="18、平时都是用什么实现跨域的？"><a href="#18、平时都是用什么实现跨域的？" class="headerlink" title="18、平时都是用什么实现跨域的？"></a>18、平时都是用什么实现跨域的？</h3><p>jsonp: 利用 <code>&lt;script&gt;</code> 标签没有跨域限制的漏洞，网页可以得到从其他来源动态产生的 JSON 数据。JSONP请求一定需要对方的服务器做支持才可以。</p><p>JSONP优点是简单兼容性好，可用于解决主流浏览器的跨域数据访问的问题。缺点是仅支持get方法具有局限性,不安全可能会遭受XSS攻击。</p><p>声明一个回调函数，其函数名(如show)当做参数值，要传递给跨域请求数据的服务器，函数形参为要获取目标数据(服务器返回的data)。</p><p>创建一个<code>&lt;script&gt;</code>标签，把那个跨域的API数据接口地址，赋值给<code>&lt;script&gt;</code>的src,还要在这个地址中向服务器传递该函数名（可以通过问号传参:?callback=show）。</p><p>服务器接收到请求后，需要进行特殊的处理：把传递进来的函数名和它需要给你的数据拼接成一个字符串,例如：传递进去的函数名是show，它准备好的数据是<code>show('我不爱你')</code>。</p><p>最后服务器把准备的数据通过HTTP协议返回给客户端，客户端再调用执行之前声明的回调函数（show），对返回的数据进行操作。</p><p>CORS：跨域资源共享（CORS）是一种机制；当一个资源访问到另外一个资源(这个资源放在</p><p>不同的域名或者不同的协议或者端口)，资源就会发起一个跨域的HTTP请求需要浏览器和服务器同时支持；</p><ol><li>整个CORS通信，都是浏览器自动完成。浏览器发现了AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉；</li><li>实现CORS的关键是服务器，只要服务器实现了CORS接口，就可以跨源通信</li><li>服务器对于不同的请求，处理方式不一样； 有简单请求和非简单请求</li></ol><h3 id="19、cookie-、localstorage-、-sessionstrorage-之间有什么区别？"><a href="#19、cookie-、localstorage-、-sessionstrorage-之间有什么区别？" class="headerlink" title="19、cookie 、localstorage 、 sessionstrorage 之间有什么区别？"></a>19、cookie 、localstorage 、 sessionstrorage 之间有什么区别？</h3><ul><li>与服务器交互：<ul><li>cookie 是网站为了标示用户身份而储存在用户本地终端上的数据（通常经过加密）</li><li>cookie 始终会在同源 http 请求头中携带（即使不需要），在浏览器和服务器间来回传递</li><li>sessionStorage 和 localStorage 不会自动把数据发给服务器，仅在本地保存</li></ul></li><li>存储大小：</li><li>cookie 数据根据不同浏览器限制，大小一般不能超过 4k</li><li>sessionStorage 和 localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大</li><li>有期时间：<ul><li>localStorage 存储持久数据，浏览器关闭后数据不丢失除非主动删除数据</li><li>sessionStorage 数据在当前浏览器窗口关闭后自动删除</li><li>cookie 设置的cookie过期时间之前一直有效，与浏览器是否关闭无关</li></ul></li></ul><h3 id="20、this-的指向有哪些？"><a href="#20、this-的指向有哪些？" class="headerlink" title="20、this 的指向有哪些？"></a>20、this 的指向有哪些？</h3><p>1、普通函数中的this指向window</p><p>2、定时器中的this指向window</p><p>3、箭头函数没有this,它的this指向取决于外部环境、</p><p>4、事件中的this指向事件的调用者</p><p>5、 构造函数中this和原型对象中的this,都是指向构造函数new 出来实例对象</p><p>6、类 class中的this  指向由constructor构造器new出来的实例对象</p><p>7、自调用函数中的this  指向window</p><h3 id="21、什么是递归，递归有哪些优点或缺点？"><a href="#21、什么是递归，递归有哪些优点或缺点？" class="headerlink" title="21、什么是递归，递归有哪些优点或缺点？"></a>21、什么是递归，递归有哪些优点或缺点？</h3><p>递归：如果一个函数在内部可以调用其本身，那么这个函数就是递归函数。简单理解:函</p><p>数内部自己调用自己, 这个函数就是递归函数</p><p>优点：结构清晰、可读性强</p><p>缺点：效率低、调用栈可能会溢出，其实每一次函数调用会在内存栈中分配空间，而每个进程的栈的容量是有限的，当调用的层次太多时，就会超出栈的容量，从而导致栈溢出。-&gt;性能</p><h3 id="22、谈谈你平时都用了哪些方法进行性能优化？"><a href="#22、谈谈你平时都用了哪些方法进行性能优化？" class="headerlink" title="22、谈谈你平时都用了哪些方法进行性能优化？"></a>22、谈谈你平时都用了哪些方法进行性能优化？</h3><p>减少http请求次数、打包压缩上线代码、使用懒加载、使用雪碧图、动态渲染组件、CDN加载包。</p><h3 id="23、vue实例是挂载到那个标签上的？"><a href="#23、vue实例是挂载到那个标签上的？" class="headerlink" title="23、vue实例是挂载到那个标签上的？"></a>23、vue实例是挂载到那个标签上的？</h3><p>vue实例最后会挂载在body标签里面，所以我们在vue中是获取不了body 标签的，如果要使用body标签的话需要用原生的方式获取</p><h3 id="24、什么是深拷贝、什么是浅拷贝？"><a href="#24、什么是深拷贝、什么是浅拷贝？" class="headerlink" title="24、什么是深拷贝、什么是浅拷贝？"></a>24、什么是深拷贝、什么是浅拷贝？</h3><p>浅拷贝：创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址 ，所以如果其中一个对象改变了这个地址，就会影响到另一个对象。</p><p>深拷贝会拷贝所有的属性，并拷贝属性指向的动态分配的内存。当对象和它所引用的对象一起拷贝时即发生深拷贝。深拷贝相比于浅拷贝速度较慢并且花销较大。拷贝前后两个对象互不影响。</p><h3 id="25、js的执行机制是怎么样的？"><a href="#25、js的执行机制是怎么样的？" class="headerlink" title="25、js的执行机制是怎么样的？"></a>25、js的执行机制是怎么样的？</h3><p>js是一个单线程、异步、非阻塞I/O模型、 event loop事件循环的执行机制</p><p>所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务。异步任务指的是，不进入主线程、而进入”任务队列”（task queue）的任务，只有”任务队列”通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。</p><h3 id="26、请写至少三种数组去重的方法？（原生js）"><a href="#26、请写至少三种数组去重的方法？（原生js）" class="headerlink" title="26、请写至少三种数组去重的方法？（原生js）"></a>26、请写至少三种数组去重的方法？（原生js）</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//利用filter</span><span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//当前元素，在原始数组中的第一个索引==当前索引值，否则返回当前元素</span>    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">===</span> index<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span><span class="token string">'NaN'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//利用ES6 Set去重（ES6中最常用）</span><span class="token keyword">function</span> <span class="token function">unique</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span><span class="token string">'NaN'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//[1, "true", true, 15, false, undefined, null, NaN, "NaN", 0, "a", {}, {}]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//利用for嵌套for，然后splice去重（ES5中最常用）</span><span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment">//第一个等同于第二个，splice方法删除第二个</span>                    arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    j<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span><span class="token string">'NaN'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">//[1, "true", 15, false, undefined, NaN, NaN, "NaN", "a", {…}, {…}]     //NaN和{}没有去重，两个null直接消失了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="27、请写出至少两种常见的数组排序的方法（原生js）"><a href="#27、请写出至少两种常见的数组排序的方法（原生js）" class="headerlink" title="27、请写出至少两种常见的数组排序的方法（原生js）"></a>27、请写出至少两种常见的数组排序的方法（原生js）</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//快速排序</span><span class="token keyword">function</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token parameter">elements</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>elements<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> elements<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token keyword">var</span> pivotIndex<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>elements<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> pivot<span class="token operator">=</span>elements<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>pivotIndex<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> left<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> right<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pivot<span class="token punctuation">)</span><span class="token punctuation">{</span>        left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>       right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token keyword">return</span>  <span class="token function">quickSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>pivot<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">quickSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//concat()方法用于连接两个或者多个数组；该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本。</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> elements<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token function">quickSort</span><span class="token punctuation">(</span>elements<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//插入排序</span><span class="token keyword">function</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token parameter">elements</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// 假设第0个元素是一个有序数列，第1个以后的是无序数列，</span>    <span class="token comment">// 所以从第1个元素开始将无序数列的元素插入到有序数列中去</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 升序</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> elements<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">// 取出无序数列中的第i个作为被插入元素</span>            <span class="token keyword">var</span> guard<span class="token operator">=</span>elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">//记住有序数列的最后一个位置，并且将有序数列的位置扩大一个</span>            <span class="token keyword">var</span> j<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>elements<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">// 比大小;找到被插入元素所在位置</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>j<span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> guard <span class="token operator">&lt;</span>elements<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                elements<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>elements<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                j<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            elements<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>guard<span class="token punctuation">;</span> <span class="token comment">//插入</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> elements<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'没调用之前：'</span><span class="token operator">+</span>elements<span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;br&gt;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sort</span><span class="token punctuation">(</span>elements<span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'被调用之后：'</span><span class="token operator">+</span>elements<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//冒泡排序</span><span class="token keyword">function</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token parameter">elements</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>elements<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>elements<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>elements<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> elements<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>               <span class="token keyword">var</span>  swap<span class="token operator">=</span>elements<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>               elements<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>elements<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>               elements<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>swap<span class="token punctuation">;</span>          <span class="token punctuation">}</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> elements<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'before'</span><span class="token operator">+</span>elements<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sort</span><span class="token punctuation">(</span>elements<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'after'</span><span class="token operator">+</span>elements<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="28、知道lodash吗？它有哪些常见的API-？"><a href="#28、知道lodash吗？它有哪些常见的API-？" class="headerlink" title="28、知道lodash吗？它有哪些常见的API   ？"></a>28、知道lodash吗？它有哪些常见的API   ？</h3><p>Lodash是一个一致性、模块化、高性能的 JavaScript 实用工具库。</p><p>​     _.cloneDeep     深度拷贝</p><p>_.reject    根据条件去除某个元素。</p><p>_.drop(array, [n=1] )   作用：将 <code>array</code> 中的前 <code>n</code> 个元素去掉，然后返回剩余的部分.</p><h3 id="29、http的请求方式有哪些？"><a href="#29、http的请求方式有哪些？" class="headerlink" title="29、http的请求方式有哪些？"></a>29、http的请求方式有哪些？</h3><p>get、post、put、delete等</p><h3 id="30、平时都是用那些工具进行打包的？babel是什么？"><a href="#30、平时都是用那些工具进行打包的？babel是什么？" class="headerlink" title="30、平时都是用那些工具进行打包的？babel是什么？"></a>30、平时都是用那些工具进行打包的？babel是什么？</h3><p>WebPack 是一个模块打包工具，你可以使用WebPack管理你的模块依赖，并编绎输出模块们所需的静态文件。它能够很好地管理、打包Web开发中所用到的HTML、Javascript、CSS以及各种静态文件（图片、字体等），让开发过程更加高效。对于不同类型的资源，webpack有对应的模块加载器。webpack模块打包器会分析模块间的依赖关系，最后 生成了优化且合并后的静态资源</p><p>babel可以帮助我们转换一些当前浏览器不支持的语法，它会把这些语法转换为低版本的语法以便浏览器识别。</p><h3 id="31、谈谈set-、-map-是什么？"><a href="#31、谈谈set-、-map-是什么？" class="headerlink" title="31、谈谈set 、 map 是什么？"></a>31、谈谈set 、 map 是什么？</h3><p>set 是es6 提供的一种新的数据结构，它类似于数组，但是成员的值都是唯一的。</p><p>map 是es6 提供的一种新的数据结构,它类似于对象，也是键值对的集合，但是键的范围不仅限于字符串，各种类型的值都可以当做键。也就是说，Object 结构提供了“字符串—值”的对应，Map 结构提供了“值—值”的对应，是一种更完善的 Hash 结构实现。如果你需要“键值对”的数据结构，Map 比 Object 更合适。</p><h3 id="32、清除浮动的方法有哪些？"><a href="#32、清除浮动的方法有哪些？" class="headerlink" title="32、清除浮动的方法有哪些？"></a>32、清除浮动的方法有哪些？</h3><p>为什么要清除浮动，因为浮动的盒子脱离标准流，如果父盒子没有设置高度的话，下面的盒子就会撑上来。</p><p>1.额外标签法（在最后一个浮动标签后，新加一个标签，给其设置clear：both；）（不推荐）</p><p>2.父级添加overflow属性（父元素添加overflow:hidden）（不推荐）</p><p>3.使用after伪元素清除浮动（推荐使用）</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">    <span class="token selector">.clearfix:after</span><span class="token punctuation">{</span><span class="token comment">/*伪元素是行内元素 正常浏览器清除浮动方法*/</span>        <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span>        <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">.clearfix</span><span class="token punctuation">{</span>        *<span class="token property">zoom</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token comment">/*ie6清除浮动的方式 *号只有IE6-IE7执行，其他浏览器不执行*/</span>｝<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.使用before和after双伪元素清除浮动</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.clearfix:after,.clearfix:before</span><span class="token punctuation">{</span>       <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>       <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token selector">.clearfix:after</span><span class="token punctuation">{</span>       <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token selector">.clearfix</span><span class="token punctuation">{</span>       *<span class="token property">zoom</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="33、常见的布局方法有哪些？他们的优缺点是什么？"><a href="#33、常见的布局方法有哪些？他们的优缺点是什么？" class="headerlink" title="33、常见的布局方法有哪些？他们的优缺点是什么？"></a>33、常见的布局方法有哪些？他们的优缺点是什么？</h3><p>页面布局常用的方法有浮动、定位、flex、grid网格布局、栅格系统布局</p><p>浮动：</p><ul><li>优点：兼容性好。</li><li>缺点：浮动会脱离标准文档流，因此要清除浮动。我们解决好这个问题即可。</li></ul><p>绝对定位</p><ul><li>优点：快捷。</li><li>缺点：导致子元素也脱离了标准文档流，可实用性差。</li></ul><p>flex 布局（CSS3中出现的）</p><ul><li>优点：解决上面两个方法的不足，flex布局比较完美。移动端基本用 flex布局。</li></ul><p>网格布局（grid）</p><ul><li>CSS3中引入的布局，很好用。代码量简化了很多。</li></ul><p>利用网格布局实现的一个左右300px中间自适应的布局</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">        <span class="token selector">html *</span> <span class="token punctuation">{</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">/* 重要：设置容器为网格布局，宽度为100% */</span>        <span class="token selector">.layout.grid .left-center-right</span> <span class="token punctuation">{</span>            <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>            <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 300px auto 300px<span class="token punctuation">;</span>  <span class="token comment">/* 重要：设置网格为三列，并设置每列的宽度。即可。*/</span>        <span class="token punctuation">}</span>        <span class="token selector">.layout.grid .left</span> <span class="token punctuation">{</span>            <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.layout.grid .center</span> <span class="token punctuation">{</span>            <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.layout.grid .right</span> <span class="token punctuation">{</span>            <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layout grid<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left-center-right<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                我是 left            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>网格布局解决方案<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>                我是 center            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                我是 right            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>栅格系统布局</p><p>​    优点：可以适用于多端设备</p><h3 id="34、图片懒加载是怎么实现的？"><a href="#34、图片懒加载是怎么实现的？" class="headerlink" title="34、图片懒加载是怎么实现的？"></a>34、图片懒加载是怎么实现的？</h3><p>就是我们先设置图片的data-set属性（当然也可以是其他任意的，只要不会发送http请求就行了，作用就是为了存取值）值为其图片路径，由于不是src，所以不会发送http请求。 然后我们计算出页面scrollTop的高度和浏览器的高度之和， 如果图片距离页面顶端的坐标Y（相对于整个页面，而不是浏览器窗口）小于前两者之和，就说明图片就要显示出来了（合适的时机，当然也可以是其他情况），这时候我们再将 data-set 属性替换为 src 属性即可。</p><h3 id="35、vue中computed-和watch-的区别是什么？"><a href="#35、vue中computed-和watch-的区别是什么？" class="headerlink" title="35、vue中computed 和watch 的区别是什么？"></a>35、vue中computed 和watch 的区别是什么？</h3><p>computed计算属性就是为了简化template里面模版字符串的计算复杂度、防止模版太过冗余。它具有缓存特性</p><p>computed用来监控自己定义的变量，该变量不在data里面声明，直接在computed里面定义，然后就可以在页面上进行双向数据绑定展示出结果或者用作其他处理；</p><p>​    watch主要用于监控vue实例的变化，它监控的变量当然必须在data里面声明才可以，它可以监控一个变量，也可以是一个对象，一般用于监控路由、input输入框的值特殊处理等等，它比较适合的场景是一个数据影响多个数据，它不具有缓存性</p><ul><li>watch：监测的是属性值， 只要属性值发生变化，其都会触发执行回调函数来执行一系列操作。</li><li>computed：监测的是依赖值，依赖值不变的情况下其会直接读取缓存进行复用，变化的情况下才会重新计算。</li></ul><p>除此之外，有点很重要的区别是：<strong>计算属性不能执行异步任务，计算属性必须同步执行</strong>。也就是说计算属性不能向服务器请求或者执行异步任务。如果遇到异步任务，就交给侦听属性。watch也可以检测computed属性。</p><h3 id="36、vue中是怎么实现父向子、子向父、兄弟之间的传值的？"><a href="#36、vue中是怎么实现父向子、子向父、兄弟之间的传值的？" class="headerlink" title="36、vue中是怎么实现父向子、子向父、兄弟之间的传值的？"></a>36、vue中是怎么实现父向子、子向父、兄弟之间的传值的？</h3><p>父向子传值主要通过的是props属性来传值，props只读</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ie=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>父组件向子组件传值--props<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./js/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>menu-item</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>来自父组件的值<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>menu-item</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--   在子组件身上绑定自定义属性来接收父组件data中的数据 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>menu-item</span> <span class="token attr-name">:tit</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>menu-item</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'menu-item'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    props<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'tit'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">//props用来接收父组件传过来的值</span>    <span class="token comment">//在props中使用驼峰形式，模版中要改为使用短横线拼接  props里面的值只读，不能修改</span>    <span class="token comment">//props是单向数据流</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    template<span class="token operator">:</span><span class="token string">'&lt;div&gt;{{tit}}&lt;/div&gt;'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> vm<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>           el<span class="token operator">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>           data<span class="token operator">:</span><span class="token punctuation">{</span>              title<span class="token operator">:</span><span class="token string">'我是父组件中的数据'</span>           <span class="token punctuation">}</span><span class="token punctuation">,</span>           methods<span class="token operator">:</span><span class="token punctuation">{</span>           <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>子向父传值   $emit</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--   父组件 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>{fontSize:fontSize+<span class="token punctuation">"</span>px<span class="token punctuation">"</span>}<span class="token punctuation">'</span></span><span class="token punctuation">&gt;</span></span>{{pmsg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>   <span class="token comment">&lt;!--  子组件 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>menu-item</span> <span class="token attr-name">:parr</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parr<span class="token punctuation">"</span></span> <span class="token attr-name">@aas</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>blune<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>menu-item</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">/*      子组件向父组件传值-基本用法      props传递数据原则：单向数据流    */</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'menu-item'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>     props<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'parr'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">return</span> <span class="token punctuation">{</span>               msg1<span class="token operator">:</span><span class="token string">'这是子组件传递过来的值'</span>           <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">        &lt;div&gt;          &lt;ul&gt;            &lt;li v-for="(item,index) in parr" :key="index"&gt;{{item}}&lt;/li&gt;          &lt;/ul&gt;          &lt;button @click='dd'&gt;扩大父组件中字体大小&lt;/button&gt;        &lt;/div&gt;      </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>      methods<span class="token operator">:</span><span class="token punctuation">{</span>          <span class="token function">dd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"aas"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>msg1<span class="token punctuation">)</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//$emit</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token operator">:</span> <span class="token punctuation">{</span>        pmsg<span class="token operator">:</span> <span class="token string">'父组件中内容'</span><span class="token punctuation">,</span>        parr<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span><span class="token string">'orange'</span><span class="token punctuation">,</span><span class="token string">'banana'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        fontSize<span class="token operator">:</span> <span class="token number">10</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      methods<span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token function">blune</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>fontSize<span class="token operator">+=</span><span class="token number">5</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>兄弟组件传值   事件总线</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ie=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./js/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>brother</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>brother</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sister</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sister</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">var</span> enveBus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'brother'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    kk<span class="token operator">:</span> <span class="token string">''</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            methods<span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token function">dd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    enveBus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"bTs"</span><span class="token punctuation">,</span> <span class="token string">'这是哥哥给妹妹的爱'</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">        &lt;div&gt;          &lt;button @click='dd'&gt;这是一个哥哥组件---{{kk}}&lt;/button&gt;        &lt;/div&gt;      </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>            <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                enveBus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'asd'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>kk <span class="token operator">=</span> result<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'sister'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    sis<span class="token operator">:</span> <span class="token string">''</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">   &lt;div&gt;     &lt;button @click="cc"&gt;这是一个妹妹组件---{{sis}}&lt;/button&gt;   &lt;/div&gt; </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>            <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                enveBus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'bTs'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>sis <span class="token operator">=</span> message                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            methods<span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token function">cc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    enveBus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'asd'</span><span class="token punctuation">,</span> <span class="token string">'这是妹妹对哥哥的爱'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>            data<span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            methods<span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="37、什么vuex-谈谈你对它的理解？"><a href="#37、什么vuex-谈谈你对它的理解？" class="headerlink" title="37、什么vuex ,谈谈你对它的理解？"></a>37、什么vuex ,谈谈你对它的理解？</h3><ol><li>首先vuex的出现是为了解决web组件化开发的过程中，各组件之间传值的复杂和混乱的问题</li><li>将我们在多个组件中需要共享的数据放到store中，</li><li>要获取或格式化数据需要使用getters，</li><li>改变store中的数据，使用mutation，但是只能包含同步的操作，在具体组件里面调用的方式<code>this.$store.commit('xxxx')</code></li><li>Action也是改变store中的数据，不过是提交的mutation，并且可以包含异步操作，在组件中的调用方式<code>this.$store.dispatch('xxx')</code>； 在actions里面使用的commit(‘调用mutation’)</li></ol><h3 id="38、数据类型的判断有哪些方法？他们的优缺点及区别是什么？"><a href="#38、数据类型的判断有哪些方法？他们的优缺点及区别是什么？" class="headerlink" title="38、数据类型的判断有哪些方法？他们的优缺点及区别是什么？"></a>38、数据类型的判断有哪些方法？他们的优缺点及区别是什么？</h3><p>然后判断数据类型的方法一般可以通过：typeof、instanceof、constructor、toString四种常用方法</p><table><thead><tr><th>不同类型的优缺点</th><th>typeof</th><th>instanceof</th><th>constructor</th><th>Object.prototype.toString.call</th></tr></thead><tbody><tr><td>优点</td><td>使用简单</td><td>能检测出引用类型</td><td>基本能检测所有的类型（除了null和undefined）</td><td>检测出所有的类型</td></tr><tr><td>缺点</td><td>只能检测出基本类型（出null）</td><td>不能检测出基本类型，且不能跨iframe</td><td>constructor易被修改，也不能跨iframe</td><td>IE6下，undefined和null均为Object</td></tr></tbody></table><h3 id="39、知道symbol-吗？"><a href="#39、知道symbol-吗？" class="headerlink" title="39、知道symbol 吗？"></a>39、知道symbol 吗？</h3><p>ES6 引入新的原始数据类型Symbol，表示独一无二的值</p><h3 id="40、请描述一下ES6中的class类"><a href="#40、请描述一下ES6中的class类" class="headerlink" title="40、请描述一下ES6中的class类?"></a>40、请描述一下ES6中的class类?</h3><p>es6中的class可以把它看成是es5中构造函数的语法糖，它简化了构造函数的写法， 类的共有属性放到 constructor 里面</p><ol><li>通过class 关键字创建类, 类名我们还是习惯性定义首字母大写</li><li>类里面有个constructor 函数,可以接受传递过来的参数,同时返回实例对象</li><li>constructor 函数 只要 new 生成实例时,就会自动调用这个函数, 如果我们不写这个函数,类也会自动生成这个函数</li><li>多个函数方法之间不需要添加逗号分隔</li><li>生成实例 new 不能省略</li><li>语法规范, 创建类 类名后面不要加小括号,生成实例 类名后面加小括号, 构造函数不需要加function<ol><li>继承中,如果实例化子类输出一个方法,先看子类有没有这个方法,如果有就先执行子类的</li><li>继承中,如果子类里面没有,就去查找父类有没有这个方法,如果有,就执行父类的这个方法(就近原则)</li><li>如果子类想要继承父类的方法,同时在自己内部扩展自己的方法,利用super 调用 父类的构造函数,super 必须在子类this之前调用</li></ol></li><li>时刻注意this的指向问题,类里面的共有的属性和方法一定要加this使用.<ol><li>constructor中的this指向的是new出来的实例对象</li><li>自定义的方法,一般也指向的new出来的实例对象</li><li>绑定事件之后this指向的就是触发事件的事件源</li><li>在 ES6 中类没有变量提升，所以必须先定义类，才能通过类实例化对象</li></ol></li></ol><h3 id="41、谈谈盒子模型？"><a href="#41、谈谈盒子模型？" class="headerlink" title="41、谈谈盒子模型？"></a>41、谈谈盒子模型？</h3><p>在<strong>标准盒子模型</strong>中，<strong>width 和 height 指的是内容区域</strong>的宽度和高度。增加内边距、边框和外边距不会影响内容区域的尺寸，但是会增加元素框的总尺寸。</p><p><strong>IE盒子模型</strong>中，<strong>width 和 height 指的是内容区域+border+padding</strong>的宽度和高度。</p><h3 id="42、promise是什么？它有哪些作用？"><a href="#42、promise是什么？它有哪些作用？" class="headerlink" title="42、promise是什么？它有哪些作用？"></a>42、promise是什么？它有哪些作用？</h3><blockquote><p>Promise 是异步编程的一种解决方案.简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，可以从改对象获取异步操作的消息。</p><p>它可以解决回调地狱的问题，也就是异步深层嵌套问题</p><h5 id="catch"><a href="#catch" class="headerlink" title=".catch()"></a>.catch()</h5><ul><li>获取异常信息</li></ul><h5 id="finally"><a href="#finally" class="headerlink" title=".finally()"></a>.finally()</h5><ul><li>成功与否都会执行（不是正式标准）</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*     1. Promise基本使用     我们使用new来构建一个Promise  Promise的构造函数接收一个参数，是函数，并且传入两个参数：   resolve，reject， 分别表示异步操作执行成功后的回调函数和异步操作执行失败后的回调函数*/</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//2. 这里用于实现异步任务  setTimeout</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//3. 正常情况</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token comment">//4. 异常情况</span>    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'出错了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//  5 Promise实例生成以后，可以用then方法指定resolved状态和reject状态的回调函数</span><span class="token comment">//  在then方法中，你也可以直接return数据而不是Promise对象，在后面的then中就可以接收到数据了</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">info</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>###43、vue-cli  2.0和3.0 有什么区别？</p><p>3.0 把配置webpack的文件隐藏了，如果需要配置它需要创建一个vue.config.js文件，3.0 是2018.10月出来的</p><h3 id="44、箭头函数有哪些特征，请简单描述一下它？"><a href="#44、箭头函数有哪些特征，请简单描述一下它？" class="headerlink" title="44、箭头函数有哪些特征，请简单描述一下它？"></a>44、箭头函数有哪些特征，请简单描述一下它？</h3><p>箭头函数没有自己的this，this指向<strong>定义</strong>箭头函数时所处的<strong>外部执行环境</strong>的this</p><p>即时调用call/apply/bind也无法改变箭头函数的this</p><p>箭头函数本身没有名字</p><p>箭头函数不能new，<strong>会报错</strong></p><p>箭头函数没有arguments，在箭头函数内访问这个变量访问的是<strong>外部执行环境</strong>的arguments</p><p>箭头函数没有prototype</p><h3 id="45、移动端有哪些常见的问题，都是怎么解决的？"><a href="#45、移动端有哪些常见的问题，都是怎么解决的？" class="headerlink" title="45、移动端有哪些常见的问题，都是怎么解决的？"></a>45、移动端有哪些常见的问题，都是怎么解决的？</h3><p>点击事件300MS延迟问题  解决方案：下载fastclick的包</p><p> <strong>H5页面窗口自动调整到设备宽度，并禁止用户缩放页面</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>忽略Android平台中对邮箱地址的识别</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>format-detection<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email=no<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>当网站添加到主屏幕快速启动方式，可隐藏地址栏，仅针对ios的safari</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- ios7.0版本以后，safari上已看不到效果 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>apple-mobile-web-app-capable<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yes<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="46、post和get-请求有哪些区别？"><a href="#46、post和get-请求有哪些区别？" class="headerlink" title="46、post和get 请求有哪些区别？"></a>46、post和get 请求有哪些区别？</h3><p>GET：一般用于信息获取，使用URL传递参数，对所发送信息的数量也有限制，一般在2000个字符</p><p>POST：一般用于修改服务器上的资源，对所发送的信息没有限制。</p><p>GET方式需要使用Request.QueryString来取得变量的值，而POST方式通过Request.Form来获取变量的值，也就是说Get是通过地址栏来传值，而Post是通过提交表单来传值。</p><p>然而，在以下情况中，请使用 POST 请求：</p><p>无法使用缓存文件（更新服务器上的文件或数据库）</p><p>向服务器发送大量数据（POST 没有数据量限制）</p><p>发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠</p><h3 id="47、什么是同源策略？"><a href="#47、什么是同源策略？" class="headerlink" title="47、什么是同源策略？"></a>47、什么是同源策略？</h3><p>所谓同源策略是浏览器的一种安全机制，来限制不同源的网站不能通信。同源就是域名、协议、端口一致。</p><h3 id="48、http状态码分别代表什么意思？"><a href="#48、http状态码分别代表什么意思？" class="headerlink" title="48、http状态码分别代表什么意思？"></a>48、http状态码分别代表什么意思？</h3><p>1xx    表示HTTP请求已经接受，继续处理请求<br>2xx    表示HTTP请求已经处理完成(200)<br>3xx    表示把请求访问的URL重定向到其他目录(304资源没有发生变化，会重定向到本地资源)<br>4xx    表示客户端出现错误(403禁止访问、404资源不存在)<br>5xx    表示服务端出现错误</p><h3 id="49、BFC是什么？"><a href="#49、BFC是什么？" class="headerlink" title="49、BFC是什么？"></a>49、BFC是什么？</h3><p>BFC（块级格式化上下文），一个创建了新的BFC的盒子是独立布局的，盒子内元素的布局不会影响盒子外面的元素。在同一个BFC中的两个相邻的盒子在垂直方向发生margin重叠的问题。</p><p>BFC是值浏览器中创建了一个独立的渲染区域，该区域内所有元素的布局不会影响到区域外元素的布局，这个渲染区域只对块级元素起作用</p><h3 id="50、token是什么？（加密）"><a href="#50、token是什么？（加密）" class="headerlink" title="50、token是什么？（加密）"></a>50、token是什么？（加密）</h3><ol><li><p>token也可以称做令牌，一般由 <code>uid+time+sign(签名)+[固定参数]</code> 组成</p><pre class="line-numbers language-none"><code class="language-none">uid: 用户唯一身份标识time: 当前时间的时间戳sign: 签名, 使用 hash/encrypt 压缩成定长的十六进制字符串，以防止第三方恶意拼接固定参数(可选): 将一些常用的固定参数加入到 token 中是为了避免重复查库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>token在客户端一般存放于localStorage，cookie，或sessionStorage中。在服务器一般存于数据库中</p></li><li><p>token 的认证流程</p><pre class="line-numbers language-none"><code class="language-none">用户登录，成功后服务器返回Token给客户端。客户端收到数据后保存在客户端客户端再次访问服务器，将token放入headers中 或者每次的请求 参数中服务器端采用filter过滤器校验。校验成功则返回请求数据，校验失败则返回错误码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>token可以抵抗csrf，cookie+session不行</p></li><li><p>session时有状态的，一般存于服务器内存或硬盘中，当服务器采用分布式或集群时，session就会面对负载均衡问题。负载均衡多服务器的情况，不好确认当前用户是否登录，因为多服务器不共享session</p></li><li><p>客户端登陆传递信息给服务端，服务端收到后把用户信息加密（token）传给客户端，客户端将token存放于localStroage等容器中。客户端每次访问都传递token，服务端解密token，就知道这个用户是谁了。通过cpu加解密，服务端就不需要存储session占用存储空间，就很好的解决负载均衡多服务器的问题了。这个方法叫做JWT(Json Web Token)</p></li></ol><h3 id="51、js的数据类型有哪些？"><a href="#51、js的数据类型有哪些？" class="headerlink" title="51、js的数据类型有哪些？"></a>51、js的数据类型有哪些？</h3><p>js的数据类型分为基本数据类型（string、number、boolean、null、undefined、symbol）和复杂数据类型</p><p>基本数据类型的特点：直接存储在栈中的数据</p><p>复杂数据类型的特点：存储的是该对象在栈中引用，真实的数据存放在堆内存里</p><h3 id="52、一个页面从输入-URL-到页面加载显示完成，这个过程中都发生了什么？"><a href="#52、一个页面从输入-URL-到页面加载显示完成，这个过程中都发生了什么？" class="headerlink" title="52、一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？"></a>52、<strong>一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？</strong></h3><p>01.浏览器查找域名对应的IP地址(DNS 查询：浏览器缓存-&gt;系统缓存-&gt;路由器缓存-&gt;ISP DNS 缓存-&gt;根域名服务器)</p><p>02.浏览器向 Web 服务器发送一个 HTTP 请求（TCP三次握手）</p><p>03.服务器 301 重定向（从 <a href="http://example.com/">http://example.com</a> 重定向到 <a href="http://www.example.com)/">http://www.example.com）</a></p><p>04.浏览器跟踪重定向地址，请求另一个带 www 的网址</p><p>05.服务器处理请求（通过路由读取资源）</p><p>06.服务器返回一个 HTTP 响应（报头中把 Content-type 设置为 ‘text/html’）</p><p>07.浏览器进 DOM 树构建</p><p>08.浏览器发送请求获取嵌在 HTML 中的资源（如图片、音频、视频、CSS、JS等）</p><p>09.浏览器显示完成页面</p><p>10.浏览器发送异步请求</p><h3 id="53、安全问题-：CSRF-和-XSS攻击？"><a href="#53、安全问题-：CSRF-和-XSS攻击？" class="headerlink" title="53、安全问题 ：CSRF 和 XSS攻击？"></a>53、安全问题 ：CSRF 和 XSS攻击？</h3><p><code>CSRF</code>（<code>Cross-site request forgery</code>）：<strong>跨站请求伪造</strong>。</p><p><strong>方法一、Token 验证：</strong>（用的最多）</p><ol><li>服务器发送给客户端一个<code>token</code>；</li><li>客户端提交的表单中带着这个<code>token</code>。</li><li>如果这个 <code>token</code> 不合法，那么服务器拒绝这个请求。</li></ol><p><strong>方法二：隐藏令牌：</strong></p><p>把 <code>token</code> 隐藏在 <code>http</code> 的 <code>head</code>头中。</p><p>方法二和方法一有点像，本质上没有太大区别，只是使用方式上有区别。</p><blockquote><p><strong>方法三、Referer 验证：</strong></p></blockquote><p><code>Referer</code> 指的是页面请求来源。意思是，<strong>只接受本站的请求，服务器才做响应</strong>；如果不是，就拦截</p><p>XSS（Cross Site Scripting）``：<strong>跨域脚本攻击</strong>。</p><p><strong>1. 编码</strong>：</p><p>对用户输入的数据进行<code>HTML Entity</code>编码。</p><p>如上图所示，把字符转换成 转义字符。</p><p>Encode<code>的作用是将</code>$var`等一些字符进行转化，使得浏览器在最终输出结果上是一样的。</p><p>比如说这段代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>若不进行任何处理，则浏览器会执行alert的js操作，实现XSS注入。进行编码处理之后，L在浏览器中的显示结果就是<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>，实现了将``$var<code>作为纯文本进行输出，且不引起J</code>avaScript`的执行。</p></blockquote><p><strong>2、过滤：</strong></p><ul><li>移除用户输入的和事件相关的属性。如<code>onerror</code>可以自动触发攻击，还有<code>onclick</code>等。（总而言是，过滤掉一些不安全的内容）</li><li>移除用户输入的<code>Style</code>节点、<code>Script</code>节点、<code>Iframe</code>节点。（尤其是<code>Script</code>节点，它可是支持跨域的呀，一定要移除）。</li></ul><p><strong>3、校正</strong></p><ul><li>避免直接对<code>HTML Entity</code>进行解码。</li><li>使用<code>DOM Parse</code>转换，校正不配对的<code>DOM</code>标签。</li></ul><p>备注：我们应该去了解一下<code>DOM Parse</code>这个概念，它的作用是把文本解析成<code>DOM</code>结构。</p><p>比较常用的做法是，通过第一步的编码转成文本，然后第三步转成<code>DOM</code>对象，然后经过第二步的过滤。</p><h3 id="54、CSRF-和-XSS-的区别"><a href="#54、CSRF-和-XSS-的区别" class="headerlink" title="54、CSRF 和 XSS 的区别"></a>54、CSRF 和 XSS 的区别</h3><p><strong>区别一：</strong></p><ul><li><code>CSRF</code>：需要用户先登录网站<code>A</code>，获取 <code>cookie</code></li><li><code>XSS</code>：不需要登录。</li></ul><p><strong>区别二：（原理的区别）</strong></p><ul><li><code>CSRF</code>：是利用网站<code>A</code>本身的漏洞，去请求网站<code>A</code>的<code>api</code>。</li><li><code>XSS</code>：是向网站 <code>A</code> 注入 <code>JS</code>代码，然后执行 <code>JS</code> 里的代码，篡改网站<code>A</code>的内容。</li></ul><h3 id="55、cookie和session-的区别"><a href="#55、cookie和session-的区别" class="headerlink" title="55、cookie和session 的区别"></a>55、cookie和session 的区别</h3><ul><li>1、cookie数据存放在客户的浏览器上，session数据放在服务器上。</li><li>2、cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗<ul><li>考虑到安全应当使用session。</li></ul></li><li>3、session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能<ul><li>考虑到减轻服务器性能方面，应当使用COOKIE。</li></ul></li><li>4、单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。</li><li>5、所以个人建议：<ul><li>将登陆信息等重要信息存放为SESSION</li><li>其他信息如果需要保留，可以放在COOKIE中</li></ul></li></ul><h3 id="56、call、apply、bind三者的异同"><a href="#56、call、apply、bind三者的异同" class="headerlink" title="56、call、apply、bind三者的异同"></a>56、call、apply、bind三者的异同</h3><p>共同点 : 都可以改变this指向;<br>不同点:<br>call 和 apply 会调用函数, 并且改变函数内部this指向.<br>call 和 apply传递的参数不一样,call传递参数使用逗号隔开,apply使用数组传递<br>bind 不会调用函数, 可以改变函数内部this指向.<br>应用场景</p><ol><li>call 经常做继承.</li><li>apply经常跟数组有关系. 比如借助于数学对象实现数组最大值最小值</li><li>bind 不调用函数,但是还想改变this指向. 比如改变定时器内部的this指向</li></ol><h3 id="57、-webpack-中-loader-和-plugin-的区别是什么"><a href="#57、-webpack-中-loader-和-plugin-的区别是什么" class="headerlink" title="57、 webpack 中 loader 和 plugin 的区别是什么?"></a>57、 webpack 中 loader 和 plugin 的区别是什么?</h3><p>loader，它是一个转换器，将A文件进行编译成B文件，比如：将A.less转换为A.css，单纯的文件转换过程。</p><p>plugin是一个扩展器，它丰富了webpack本身，针对是loader结束后，webpack打包的整个过程，它并不直接操作文件，而是基于事件机制工作，会监听webpack打包过程中的某些节点，执行广泛的任务</p><p>加载器被用来转换特定类型的模块，而插件可以被用来执行更广泛的任务，比如bundle优化、资产管理和环境变量的注入.</p><h3 id="58、弹性盒子中-flex-0-1-auto-表示什么意思"><a href="#58、弹性盒子中-flex-0-1-auto-表示什么意思" class="headerlink" title="58、弹性盒子中 flex: 0 1 auto 表示什么意思"></a>58、弹性盒子中 flex: 0 1 auto 表示什么意思</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">{</span><span class="token property">flex-grow</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> // 增长比例，子项合计宽度小于容器宽度，需要根据每个子项设置的此属性比例对剩下的长度进行分配<span class="token property">flex-shrink</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span> // 回缩比例，子项合计宽度大于容器宽度，需要根据每个子项设置的此属性比例对多出的长度进行分配<span class="token property">flex-basis</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span> // 设置了宽度跟宽度走，没设置宽度跟内容实际宽度走<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="59、Vue-中的-computed-和-watch-的区别在哪里"><a href="#59、Vue-中的-computed-和-watch-的区别在哪里" class="headerlink" title="59、Vue 中的 computed 和 watch 的区别在哪里"></a>59、Vue 中的 computed 和 watch 的区别在哪里</h3><p>computed：计算属性</p><p>计算属性是由data中的已知值，得到的一个新值。<br>这个新值只会根据已知值的变化而变化，其他不相关的数据的变化不会影响该新值。<br>计算属性不在data中，计算属性新值的相关已知值在data中。<br>别人变化影响我自己。<br>watch：监听数据的变化</p><p>监听data中数据的变化<br>监听的数据就是data中的已知值<br>我的变化影响别人</p><p>1.watch擅长处理的场景：一个数据影响多个数据</p><p>2.computed擅长处理的场景：一个数据受多个数据影响</p><h3 id="60、v-if、v-show、v-html-的原理是什么，它是如何封装的？"><a href="#60、v-if、v-show、v-html-的原理是什么，它是如何封装的？" class="headerlink" title="60、v-if、v-show、v-html 的原理是什么，它是如何封装的？"></a>60、v-if、v-show、v-html 的原理是什么，它是如何封装的？</h3><p>v-if：当隐藏结构时该结构会直接从整个dom树中移除；会调用addIfCondition方法，生成vnode的时候会忽略对应节点，render的时候就不会渲染；</p><p>v-show会生成vnode，render的时候也会渲染成真实节点，只是在render过程中会在节点的属性中修改show属性值，也就是常说的display；<br>v-html会先移除节点下的所有节点，调用html方法，通过addProp添加innerHTML属性，归根结底还是设置innerHTML为v-html的值</p><h4 id="61、将’10000000000’形式的字符串，以每3位进行分隔展示’10-000-000-000’-多种实现方式"><a href="#61、将’10000000000’形式的字符串，以每3位进行分隔展示’10-000-000-000’-多种实现方式" class="headerlink" title="61、将’10000000000’形式的字符串，以每3位进行分隔展示’10.000.000.000’,多种实现方式"></a>61、将’10000000000’形式的字符串，以每3位进行分隔展示’10.000.000.000’,多种实现方式</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> myNum <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'10000000000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//字符串转数字后就可以使用toLocaleString()啦~</span><span class="token keyword">var</span> num1Str <span class="token operator">=</span> myNum<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//"10,000,000,000"</span>num1Str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">,</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//"10.000.000.000"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> myNum <span class="token operator">=</span> <span class="token number">10000000000.</span><span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//字符串转数字后就可以使用toLocaleString()啦~</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myNum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> num2Str <span class="token operator">=</span> <span class="token string">'10000000000'</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\B(?=(\d{3})+(?!\d))</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num2Str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> num3Str <span class="token operator">=</span> <span class="token string">'10000000000'</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d)(?=(\d{3})+\b)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'$1.'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num3Str<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString">Number.prototype.toLocaleString()</a></p><h4 id="62、手写二进制转-Base64"><a href="#62、手写二进制转-Base64" class="headerlink" title="62、手写二进制转 Base64"></a>62、手写二进制转 Base64</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">node 端：toBase64<span class="token operator">:</span>Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">'base64'</span><span class="token punctuation">)</span>decode<span class="token operator">:</span>Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">'MTIz'</span><span class="token punctuation">,</span> <span class="token string">'base64'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>浏览器端：toBase64<span class="token function">btoa</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span>decode<span class="token function">atob</span><span class="token punctuation">(</span><span class="token string">'MTIz'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">base64encode</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> base64Code <span class="token operator">=</span> <span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> text<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> char1<span class="token punctuation">,</span> char2<span class="token punctuation">,</span> char3<span class="token punctuation">,</span> enc1<span class="token punctuation">,</span> enc2<span class="token punctuation">,</span> enc3<span class="token punctuation">,</span> enc4<span class="token punctuation">;</span>        <span class="token comment">// 三个字符一组，转二进制</span>    char1 <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     char2 <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    char3 <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    enc1 <span class="token operator">=</span> char1 <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 取第 1 字节的前 6 位</span>        <span class="token comment">// 三个一组处理</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>char2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 只有 1 字节的时候</span>      enc2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>char1 <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 第65个字符用来代替补位的 = 号</span>      enc3 <span class="token operator">=</span> enc4 <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>char3<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 只有 2 字节的时候</span>      enc2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>char1 <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>char2 <span class="token operator">&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      enc3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>char2 <span class="token operator">&amp;</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&gt;&gt;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      enc4 <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      enc2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>char1 <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>char2 <span class="token operator">&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 取第 1 个字节的后 2 位(3 = 11 &lt;&lt; 4 = 110000) + 第 2 个字节的前 4 位</span>      enc3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>char2 <span class="token operator">&amp;</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>char3 <span class="token operator">&gt;&gt;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 取第 2 个字节的后 4 位 (15 = 1111 &lt;&lt; 2 = 111100) + 第 3 个字节的前 2 位</span>      enc4 <span class="token operator">=</span> char3 <span class="token operator">&amp;</span> <span class="token number">63</span><span class="token punctuation">;</span> <span class="token comment">// 取最后一个字节的最后 6 位 (63 = 111111)</span>    <span class="token punctuation">}</span>        <span class="token comment">// 转base64</span>    res <span class="token operator">+=</span> base64Code<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>enc1<span class="token punctuation">)</span> <span class="token operator">+</span> base64Code<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>enc2<span class="token punctuation">)</span> <span class="token operator">+</span> base64Code<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>enc3<span class="token punctuation">)</span> <span class="token operator">+</span> base64Code<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>enc4<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">字符转Base64<span class="token operator">-</span>最优解（window<span class="token punctuation">.</span>btoa，window<span class="token punctuation">.</span>atob）✅✅✅<span class="token keyword">let</span> encodedData <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">btoa</span><span class="token punctuation">(</span><span class="token string">"this is a example"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>encodedData<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// dGhpcyBpcyBhIGV4YW1wbGU=</span><span class="token keyword">let</span> decodeData <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">atob</span><span class="token punctuation">(</span>encodedData<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>decodeData<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// this is a example</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="63、用最精炼的代码实现数组非零非负最小值-index"><a href="#63、用最精炼的代码实现数组非零非负最小值-index" class="headerlink" title="63、用最精炼的代码实现数组非零非负最小值 index"></a>63、用最精炼的代码实现数组非零非负最小值 index</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">findMinimumIndex</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item <span class="token operator">===</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">findMinimumIndex</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token keyword">let</span> minNum<span class="token keyword">let</span> minIndex <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>minNum<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> minNum <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>minNum <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>minIndex <span class="token operator">=</span> i<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>minNum <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>minIndex <span class="token operator">=</span> i<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>minIndex<span class="token punctuation">,</span> minNum<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">minIndex</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">num<span class="token punctuation">,</span> v<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> v <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> v <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">?</span> i <span class="token operator">:</span> num<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>初始值为<span class="token operator">-</span><span class="token number">1</span>的话是没法找到最小值的，经测试这条式子有点问题，做了一点调整，代码如下<span class="token comment">// 先找到第一个非负非零的值的下标</span><span class="token keyword">function</span> <span class="token function">findInitialValue</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">minIndex</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> first <span class="token operator">=</span> <span class="token function">findInitialValue</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 无非负非零的数，直接返回-1</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span><span class="token parameter">num<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> curIndex</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>cur <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> cur <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">?</span> curIndex <span class="token operator">:</span> num<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">// 关键是reduce的初始值</span>    first  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">minIndex</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>reduce用法相关参考链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>aotu<span class="token punctuation">.</span>io<span class="token operator">/</span>notes<span class="token operator">/</span><span class="token number">2016</span><span class="token operator">/</span><span class="token number">04</span><span class="token operator">/</span><span class="token number">14</span><span class="token operator">/</span>js<span class="token operator">-</span>reduce<span class="token operator">/</span>index<span class="token punctuation">.</span>html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-64-题：二分查找如何定位左边界和右边界"><a href="#第-64-题：二分查找如何定位左边界和右边界" class="headerlink" title="第 64 题：二分查找如何定位左边界和右边界"></a>第 64 题：二分查找如何定位左边界和右边界</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//递归查找</span><span class="token keyword">function</span> <span class="token function">erfen_digui</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> val<span class="token punctuation">,</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&gt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> cent <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">+</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>cent<span class="token punctuation">]</span> <span class="token operator">===</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">最终查找结果下标为</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>cent<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>cent<span class="token punctuation">]</span> <span class="token operator">&gt;</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>          right <span class="token operator">=</span> cent <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          left <span class="token operator">=</span> cent <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">erfen_digui</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> val<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token comment">//非递归查找</span>      <span class="token keyword">function</span> <span class="token function">erfen_feidigui</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>          right <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">let</span> cent <span class="token operator">=</span> left <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>cent<span class="token punctuation">]</span> <span class="token operator">===</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">最终查找结果下标为</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>cent<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>cent<span class="token punctuation">]</span> <span class="token operator">&gt;</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            right <span class="token operator">=</span> cent <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            left <span class="token operator">=</span> cent <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token comment">//左边界查找（查找第一个元素）</span><span class="token keyword">function</span> <span class="token function">erfen_digui</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> val<span class="token punctuation">,</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&gt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> cent <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">+</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>cent<span class="token punctuation">]</span> <span class="token operator">===</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment">/****************改动点********************/</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>cent <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            right <span class="token operator">=</span> cent <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">最终查找结果下标为</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>cent<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment">/*****************************************/</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>cent<span class="token punctuation">]</span> <span class="token operator">&gt;</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>          right <span class="token operator">=</span> cent <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          left <span class="token operator">=</span> cent <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">erfen_digui</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> val<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token comment">// 二分查找右边界（查找最后一个元素）</span><span class="token keyword">function</span> <span class="token function">erfen_digui</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> val<span class="token punctuation">,</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&gt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> cent <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">+</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>cent<span class="token punctuation">]</span> <span class="token operator">===</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment">/****************改动点********************/</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>cent <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            left <span class="token operator">=</span> cent <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">最终查找结果下标为</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>cent<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment">/*****************************************/</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>cent<span class="token punctuation">]</span> <span class="token operator">&gt;</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>          right <span class="token operator">=</span> cent <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          left <span class="token operator">=</span> cent <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">erfen_digui</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> val<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-65-题：Vue-中的-computed-和-watch-的区别在哪里"><a href="#第-65-题：Vue-中的-computed-和-watch-的区别在哪里" class="headerlink" title="第 65 题：Vue 中的 computed 和 watch 的区别在哪里"></a>第 65 题：Vue 中的 computed 和 watch 的区别在哪里</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html">computed：计算属性计算属性是由data中的已知值，得到的一个新值。这个新值只会根据已知值的变化而变化，其他不相关的数据的变化不会影响该新值。计算属性不在data中，计算属性新值的相关已知值在data中。别人变化影响我自己。watch：监听数据的变化监听data中数据的变化监听的数据就是data中的已知值我的变化影响别人watch擅长处理的场景：一个数据影响多个数据computed擅长处理的场景：一个数据受多个数据影响功能上：computed是计算属性，也就是依赖其它的属性计算所得出最后的值。watch是去监听一个值的变化，然后执行相对应的函数使用上：computed中的函数必须要用return返回；watch的回调里面会传入监听属性的新旧值，通过这两个值可以做一些特定的操作，不是必须要用return性能上：computed中的函数所依赖的属性没有发生变化，那么调用当前的函数的时候会从缓存中读取，而watch在每次监听的值发生变化的时候都会执行回调场景上：computed：当一个属性受多个属性影响的时候，例子：购物车商品结算；watch：当一条数据影响多条数据的时候，例子：搜索框<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">vue<span class="token operator">:</span><span class="token number">2.6</span><span class="token number">.10</span><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"container"</span> id<span class="token operator">=</span><span class="token string">"home"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>a<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>b<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>d<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"change"</span><span class="token operator">&gt;</span>改变a<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                b<span class="token operator">:</span> <span class="token number">2</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        watch<span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'watch a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        computed<span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'computed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>watch<span class="token operator">:</span> a属性变化时打印<span class="token punctuation">.</span>computed<span class="token operator">:</span> <span class="token punctuation">(</span>a<span class="token operator">|</span>b<span class="token punctuation">)</span>属性变化时打印<span class="token punctuation">.</span>这个例子change一直都是<span class="token number">5</span><span class="token punctuation">,</span>实际上不会一直执行打印<span class="token punctuation">,</span>都有缓存<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-66-题：谈一谈-nextTick-的原理"><a href="#第-66-题：谈一谈-nextTick-的原理" class="headerlink" title="第 66 题：谈一谈 nextTick 的原理"></a>第 66 题：谈一谈 nextTick 的原理</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>number<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div @click<span class="token operator">=</span><span class="token string">"handleClick"</span><span class="token operator">&gt;</span>click<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            number<span class="token operator">:</span> <span class="token number">0</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token function">handleClick</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>number<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>当我们按下 click 按钮的时候，number 会被循环增加<span class="token number">1000</span>次。那么按照之前的理解，每次 number 被 <span class="token operator">+</span><span class="token number">1</span> 的时候，都会触发 number 的 setter 方法，从而根据上面的流程一直跑下来最后修改真实 <span class="token constant">DOM</span>。那么在这个过程中，<span class="token constant">DOM</span> 会被更新 <span class="token number">1000</span> 次！那怎么办？Vue<span class="token punctuation">.</span>js中的 nextTick 函数，会传入一个 cb ，这个 cb 会被存储到一个队列中，在下一个 tick 时触发队列中的所有 cb 事件。Vue<span class="token punctuation">.</span>js 肯定不会以如此低效的方法来处理。Vue<span class="token punctuation">.</span>js在默认情况下，每次触发某个数据的 setter 方法后，对应的 Watcher 对象其实会被 push 进一个队列 queue 中，在下一个 tick 的时候将这个队列 queue 全部拿出来 run（ Watcher 对象的一个方法，用来触发 patch 操作） 一遍。因为目前浏览器平台并没有实现 nextTick 方法，所以 Vue<span class="token punctuation">.</span>js 源码中分别用 Promise、setTimeout、setImmediate 等方式在 microtask（或是task）中创建一个事件，目的是在当前调用栈执行完毕以后（不一定立即）才会去执行这个事件。<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">nextTick</span> <span class="token punctuation">(</span><span class="token parameter">cb<span class="token operator">?</span><span class="token operator">:</span> Function<span class="token punctuation">,</span> ctx<span class="token operator">?</span><span class="token operator">:</span> Object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> _resolve  callbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token function">cb</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">handleError</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> ctx<span class="token punctuation">,</span> <span class="token string">'nextTick'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>_resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">_resolve</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pending<span class="token punctuation">)</span> <span class="token punctuation">{</span>    pending <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token function">timerFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment">// $flow-disable-line</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cb <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> Promise <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      _resolve <span class="token operator">=</span> resolve    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>首先定义一个 callbacks 数组用来存储 nextTick，在下一个 tick 处理这些回调函数之前，所有的 cb 都会被存在这个 callbacks 数组中。pending 是一个标记位，代表一个等待的状态。这里用setTimeout做描述（真实源码里更复杂）：setTimeout 会在 task 中创建一个事件 flushCallbacks ，flushCallbacks 则会在执行时将 callbacks 中的所有 cb 依次执行。watcher上面例子中，当我们将 number 增加 <span class="token number">1000</span> 次时，先将对应的 Watcher 对象给 push 进一个队列 queue 中去，等下一个 tick 的时候再去执行，这样做是对的。但是有没有发现，另一个问题出现了？因为 number 执行 <span class="token operator">++</span> 操作以后对应的 Watcher 对象都是同一个，我们并不需要在下一个 tick 的时候执行 <span class="token number">1000</span> 个同样的 Watcher 对象去修改界面，而是只需要执行一个 Watcher 对象，使其将界面上的 <span class="token number">0</span> 变成 <span class="token number">1000</span> 即可。那么，我们就需要执行一个过滤的操作，同一个的 Watcher 在同一个 tick 的时候应该只被执行一次，也就是说队列 queue 中不应该出现重复的 Watcher 对象。那么我们可以用 id 来标记每一个 Watcher 对象，让他们看起来不太一样。我们再回过头聊一下第一个例子， number 会被不停地进行 <span class="token operator">++</span> 操作，不断地触发它对应的 Dep 中的 Watcher 对象的 update 方法。然后最终 queue 中因为对相同 id 的 Watcher 对象进行了筛选，从而 queue 中实际上只会存在一个 number 对应的 Watcher 对象。在下一个 tick 的时候（此时 number 已经变成了 <span class="token number">1000</span>），触发 Watcher 对象的 run 方法来更新视图，将视图上的 number 从 <span class="token number">0</span> 直接变成 <span class="token number">1000</span>。nextTick好处<span class="token operator">:</span> 碰到太频繁的js操作<span class="token punctuation">,</span>只需要显示最后一次的数据的视图<span class="token punctuation">,</span>如果每次都实时更新视图<span class="token punctuation">,</span>会消耗太多性能<span class="token punctuation">.</span>当数据发生变化的时候<span class="token punctuation">,</span>将需要通知更新的watcher收集到一个队列中<span class="token punctuation">,</span>然后在nextTick函数里会遍历执行watcher的更新<span class="token punctuation">,</span><span class="token function">nextTick相当于创建了一个异步任务</span><span class="token punctuation">(</span>可能是异步微任务也可能是异步宏任务<span class="token punctuation">)</span><span class="token punctuation">,</span>然后在下一个event loop执行这些异步任务<span class="token punctuation">.</span>我的理解<span class="token punctuation">,</span>就是讲同步代码里的所有数据更改需要通知更新的操作都收集起来<span class="token punctuation">,</span>放到一个异步任务中<span class="token punctuation">,</span>统一处理<span class="token punctuation">.</span>避免了频繁的更新视图这样耗费性能的操作<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现原理:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* @flow */</span><span class="token comment">/* globals MutationObserver */</span><span class="token keyword">import</span> <span class="token punctuation">{</span> noop <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'shared/util'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> handleError <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./error'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> isIE<span class="token punctuation">,</span> isIOS<span class="token punctuation">,</span> isNative <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./env'</span><span class="token keyword">export</span> <span class="token keyword">let</span> isUsingMicroTask <span class="token operator">=</span> <span class="token boolean">false</span><span class="token keyword">const</span> callbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">let</span> pending <span class="token operator">=</span> <span class="token boolean">false</span><span class="token keyword">function</span> <span class="token function">flushCallbacks</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  pending <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token keyword">const</span> copies <span class="token operator">=</span> callbacks<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  callbacks<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> copies<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    copies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// Here we have async deferring wrappers using microtasks.</span><span class="token comment">// In 2.5 we used (macro) tasks (in combination with microtasks).</span><span class="token comment">// However, it has subtle problems when state is changed right before repaint</span><span class="token comment">// (e.g. #6813, out-in transitions).</span><span class="token comment">// Also, using (macro) tasks in event handler would cause some weird behaviors</span><span class="token comment">// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).</span><span class="token comment">// So we now use microtasks everywhere, again.</span><span class="token comment">// A major drawback of this tradeoff is that there are some scenarios</span><span class="token comment">// where microtasks have too high a priority and fire in between supposedly</span><span class="token comment">// sequential events (e.g. #4521, #6690, which have workarounds)</span><span class="token comment">// or even between bubbling of the same event (#6566).</span><span class="token keyword">let</span> timerFunc<span class="token comment">// The nextTick behavior leverages the microtask queue, which can be accessed</span><span class="token comment">// via either native Promise.then or MutationObserver.</span><span class="token comment">// MutationObserver has wider support, however it is seriously bugged in</span><span class="token comment">// UIWebView in iOS &gt;= 9.3.3 when triggered in touch event handlers. It</span><span class="token comment">// completely stops working after triggering a few times... so, if native</span><span class="token comment">// Promise is available, we will use it:</span><span class="token comment">/* istanbul ignore next, $flow-disable-line */</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> Promise <span class="token operator">!==</span> <span class="token string">'undefined'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isNative</span><span class="token punctuation">(</span>Promise<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token function-variable function">timerFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>flushCallbacks<span class="token punctuation">)</span>    <span class="token comment">// In problematic UIWebViews, Promise.then doesn't completely break, but</span>    <span class="token comment">// it can get stuck in a weird state where callbacks are pushed into the</span>    <span class="token comment">// microtask queue but the queue isn't being flushed, until the browser</span>    <span class="token comment">// needs to do some other work, e.g. handle a timer. Therefore we can</span>    <span class="token comment">// "force" the microtask queue to be flushed by adding an empty timer.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isIOS<span class="token punctuation">)</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>noop<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  isUsingMicroTask <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isIE <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> MutationObserver <span class="token operator">!==</span> <span class="token string">'undefined'</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>  <span class="token function">isNative</span><span class="token punctuation">(</span>MutationObserver<span class="token punctuation">)</span> <span class="token operator">||</span>  <span class="token comment">// PhantomJS and iOS 7.x</span>  MutationObserver<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object MutationObserverConstructor]'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// Use MutationObserver where native Promise is not available,</span>  <span class="token comment">// e.g. PhantomJS, iOS7, Android 4.4</span>  <span class="token comment">// (#6466 MutationObserver is unreliable in IE11)</span>  <span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token number">1</span>  <span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutationObserver</span><span class="token punctuation">(</span>flushCallbacks<span class="token punctuation">)</span>  <span class="token keyword">const</span> textNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">)</span>  observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>textNode<span class="token punctuation">,</span> <span class="token punctuation">{</span>    characterData<span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token function-variable function">timerFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    counter <span class="token operator">=</span> <span class="token punctuation">(</span>counter <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span>    textNode<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  isUsingMicroTask <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> setImmediate <span class="token operator">!==</span> <span class="token string">'undefined'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isNative</span><span class="token punctuation">(</span>setImmediate<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// Fallback to setImmediate.</span>  <span class="token comment">// Technically it leverages the (macro) task queue,</span>  <span class="token comment">// but it is still a better choice than setTimeout.</span>  <span class="token function-variable function">timerFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token function">setImmediate</span><span class="token punctuation">(</span>flushCallbacks<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment">// Fallback to setTimeout.</span>  <span class="token function-variable function">timerFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>flushCallbacks<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">nextTick</span> <span class="token punctuation">(</span><span class="token parameter">cb<span class="token operator">?</span><span class="token operator">:</span> Function<span class="token punctuation">,</span> ctx<span class="token operator">?</span><span class="token operator">:</span> Object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> _resolve  callbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token function">cb</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">handleError</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> ctx<span class="token punctuation">,</span> <span class="token string">'nextTick'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>_resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">_resolve</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pending<span class="token punctuation">)</span> <span class="token punctuation">{</span>    pending <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token function">timerFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment">// $flow-disable-line</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cb <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> Promise <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      _resolve <span class="token operator">=</span> resolve    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第67题-写-React-Vue-项目时为什么要在组件中写-key，其作用是什么"><a href="#第67题-写-React-Vue-项目时为什么要在组件中写-key，其作用是什么" class="headerlink" title="第67题:写 React / Vue 项目时为什么要在组件中写 key，其作用是什么"></a>第67题:写 React / Vue 项目时为什么要在组件中写 key，其作用是什么</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">基于没有key的情况diff速度会更快。确实，没有绑定key的情况下，并且在遍历模板简单的情况下，会导致虚拟新旧节点对比更快，节点也会复用。而这种复用是就地复用，一种鸭子辩型的复用。以下为简单的例子<span class="token operator">:</span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"i in dataList"</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span> i <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  data<span class="token operator">:</span> <span class="token punctuation">{</span>    dataList<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>以上的例子，v<span class="token operator">-</span><span class="token keyword">for</span>的内容会生成以下的dom节点数组，我们给每一个节点标记一个身份id：  <span class="token punctuation">[</span>    <span class="token string">'&lt;div&gt;1&lt;/div&gt;'</span><span class="token punctuation">,</span> <span class="token comment">// id： A</span>    <span class="token string">'&lt;div&gt;2&lt;/div&gt;'</span><span class="token punctuation">,</span> <span class="token comment">// id:  B</span>    <span class="token string">'&lt;div&gt;3&lt;/div&gt;'</span><span class="token punctuation">,</span> <span class="token comment">// id:  C</span>    <span class="token string">'&lt;div&gt;4&lt;/div&gt;'</span><span class="token punctuation">,</span> <span class="token comment">// id:  D</span>    <span class="token string">'&lt;div&gt;5&lt;/div&gt;'</span>  <span class="token comment">// id:  E</span>  <span class="token punctuation">]</span>改变dataList数据，进行数据位置替换，对比改变后的数据 vm<span class="token punctuation">.</span>dataList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment">// 数据位置替换</span> <span class="token comment">// 没有key的情况， 节点位置不变，但是节点innerText内容更新了</span>  <span class="token punctuation">[</span>    <span class="token string">'&lt;div&gt;4&lt;/div&gt;'</span><span class="token punctuation">,</span> <span class="token comment">// id： A</span>    <span class="token string">'&lt;div&gt;1&lt;/div&gt;'</span><span class="token punctuation">,</span> <span class="token comment">// id:  B</span>    <span class="token string">'&lt;div&gt;3&lt;/div&gt;'</span><span class="token punctuation">,</span> <span class="token comment">// id:  C</span>    <span class="token string">'&lt;div&gt;5&lt;/div&gt;'</span><span class="token punctuation">,</span> <span class="token comment">// id:  D</span>    <span class="token string">'&lt;div&gt;2&lt;/div&gt;'</span>  <span class="token comment">// id:  E</span>  <span class="token punctuation">]</span>  <span class="token comment">// 有key的情况，dom节点位置进行了交换，但是内容没有更新</span>  <span class="token comment">// &lt;div v-for="i in dataList" :key='i'&gt;{{ i }}&lt;/div&gt;</span>  <span class="token punctuation">[</span>    <span class="token string">'&lt;div&gt;4&lt;/div&gt;'</span><span class="token punctuation">,</span> <span class="token comment">// id： D</span>    <span class="token string">'&lt;div&gt;1&lt;/div&gt;'</span><span class="token punctuation">,</span> <span class="token comment">// id:  A</span>    <span class="token string">'&lt;div&gt;3&lt;/div&gt;'</span><span class="token punctuation">,</span> <span class="token comment">// id:  C</span>    <span class="token string">'&lt;div&gt;5&lt;/div&gt;'</span><span class="token punctuation">,</span> <span class="token comment">// id:  E</span>    <span class="token string">'&lt;div&gt;2&lt;/div&gt;'</span>  <span class="token comment">// id:  B</span>  <span class="token punctuation">]</span>增删dataList列表项  vm<span class="token punctuation">.</span>dataList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span> <span class="token comment">// 数据进行增删</span>  <span class="token comment">// 1. 没有key的情况， 节点位置不变，内容也更新了</span>  <span class="token punctuation">[</span>    <span class="token string">'&lt;div&gt;3&lt;/div&gt;'</span><span class="token punctuation">,</span> <span class="token comment">// id： A</span>    <span class="token string">'&lt;div&gt;4&lt;/div&gt;'</span><span class="token punctuation">,</span> <span class="token comment">// id:  B</span>    <span class="token string">'&lt;div&gt;5&lt;/div&gt;'</span><span class="token punctuation">,</span> <span class="token comment">// id:  C</span>    <span class="token string">'&lt;div&gt;6&lt;/div&gt;'</span><span class="token punctuation">,</span> <span class="token comment">// id:  D</span>    <span class="token string">'&lt;div&gt;7&lt;/div&gt;'</span>  <span class="token comment">// id:  E</span>  <span class="token punctuation">]</span>  <span class="token comment">// 2. 有key的情况， 节点删除了 A, B 节点，新增了 F, G 节点</span>  <span class="token comment">// &lt;div v-for="i in dataList" :key='i'&gt;{{ i }}&lt;/div&gt;</span>  <span class="token punctuation">[</span>    <span class="token string">'&lt;div&gt;3&lt;/div&gt;'</span><span class="token punctuation">,</span> <span class="token comment">// id： C</span>    <span class="token string">'&lt;div&gt;4&lt;/div&gt;'</span><span class="token punctuation">,</span> <span class="token comment">// id:  D</span>    <span class="token string">'&lt;div&gt;5&lt;/div&gt;'</span><span class="token punctuation">,</span> <span class="token comment">// id:  E</span>    <span class="token string">'&lt;div&gt;6&lt;/div&gt;'</span><span class="token punctuation">,</span> <span class="token comment">// id:  F</span>    <span class="token string">'&lt;div&gt;7&lt;/div&gt;'</span>  <span class="token comment">// id:  G</span>  <span class="token punctuation">]</span>从以上来看，不带有key，并且使用简单的模板，基于这个前提下，可以更有效的复用节点，diff速度来看也是不带key更加快速的，因为带key在增删节点上有耗时。这就是vue文档所说的默认模式。但是这个并不是key作用，而是没有key的情况下可以对节点就地复用，提高性能。这种模式会带来一些隐藏的副作用，比如可能不会产生过渡效果，或者在某些节点有绑定数据（表单）状态，会出现状态错位。<span class="token constant">VUE</span>文档也说明了 这个默认的模式是高效的，但是只适用于不依赖子组件状态或临时 <span class="token constant">DOM</span> <span class="token function">状态</span> <span class="token punctuation">(</span>例如：表单输入值<span class="token punctuation">)</span> 的列表渲染输出楼下 @yeild 也提到，在不带key的情况下，对于简单列表页渲染来说diff节点更快是没有错误的。但是这并不是key的作用呀。但是key的作用是什么？我重新梳理了一下文字，可能这样子会更好理解一些。key是给每一个vnode的唯一id<span class="token punctuation">,</span>可以依靠key<span class="token punctuation">,</span>更准确<span class="token punctuation">,</span> 更快的拿到oldVnode中对应的vnode节点。<span class="token number">1.</span> 更准确因为带key就不是就地复用了，在sameNode函数 a<span class="token punctuation">.</span>key <span class="token operator">===</span> b<span class="token punctuation">.</span>key对比中可以避免就地复用的情况。所以会更加准确。<span class="token number">2.</span> 更快<span class="token function">利用key的唯一性生成map对象来获取对应节点，比遍历方式更快。</span><span class="token punctuation">(</span>这个观点，就是我最初的那个观点。从这个角度看，map会比遍历更快。<span class="token punctuation">)</span>原答案 <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>vue和react都是采用diff算法来对比新旧虚拟节点，从而更新节点。在vue的diff函数中（建议先了解一下diff算法过程）。<span class="token parameter">在交叉对比中，当新节点跟旧节点头尾交叉对比没有结果时，会根据新节点的key去对比旧节点数组中的key，从而找到相应旧节点（这里对应的是一个key</span> <span class="token operator">=&gt;</span> index 的map映射）。如果没找到就认为是一个新增节点。而如果没有key，那么就会采用遍历查找的方式去找到对应的旧节点。一种一个map映射，另一种是遍历查找。相比而言。map映射的速度更快。vue部分源码如下：<span class="token comment">// vue项目  src/core/vdom/patch.js  -488行</span><span class="token comment">// 以下是为了阅读性进行格式化后的代码</span><span class="token comment">// oldCh 是一个旧虚拟节点数组</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>oldKeyToIdx<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  oldKeyToIdx <span class="token operator">=</span> <span class="token function">createKeyToOldIdx</span><span class="token punctuation">(</span>oldCh<span class="token punctuation">,</span> oldStartIdx<span class="token punctuation">,</span> oldEndIdx<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>newStartVnode<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// map 方式获取</span>  idxInOld <span class="token operator">=</span> oldKeyToIdx<span class="token punctuation">[</span>newStartVnode<span class="token punctuation">.</span>key<span class="token punctuation">]</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment">// 遍历方式获取</span>  idxInOld <span class="token operator">=</span> <span class="token function">findIdxInOld</span><span class="token punctuation">(</span>newStartVnode<span class="token punctuation">,</span> oldCh<span class="token punctuation">,</span> oldStartIdx<span class="token punctuation">,</span> oldEndIdx<span class="token punctuation">)</span><span class="token punctuation">}</span>创建map函数<span class="token keyword">function</span> <span class="token function">createKeyToOldIdx</span> <span class="token punctuation">(</span><span class="token parameter">children<span class="token punctuation">,</span> beginIdx<span class="token punctuation">,</span> endIdx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> i<span class="token punctuation">,</span> key  <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> beginIdx<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> endIdx<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    key <span class="token operator">=</span> children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> map<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> i  <span class="token punctuation">}</span>  <span class="token keyword">return</span> map<span class="token punctuation">}</span>遍历寻找<span class="token comment">// sameVnode 是对比新旧节点是否相同的函数</span> <span class="token keyword">function</span> <span class="token function">findIdxInOld</span> <span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> oldCh<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> c <span class="token operator">=</span> oldCh<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">sameVnode</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> i    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第68题-在-Vue-中，子组件为何不可以修改父组件传递的-Prop，如果修改了，Vue-是如何监控到属性的修改并给出警告的"><a href="#第68题-在-Vue-中，子组件为何不可以修改父组件传递的-Prop，如果修改了，Vue-是如何监控到属性的修改并给出警告的" class="headerlink" title="第68题:在 Vue 中，子组件为何不可以修改父组件传递的 Prop，如果修改了，Vue 是如何监控到属性的修改并给出警告的"></a>第68题:在 Vue 中，子组件为何不可以修改父组件传递的 Prop，如果修改了，Vue 是如何监控到属性的修改并给出警告的</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">子组件为何不可以修改父组件传递的 Prop单向数据流，易于监测数据的流动，出现了错误可以更加迅速的定位到错误发生的位置。如果修改了，Vue 是如何监控到属性的修改并给出警告的。<span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> hyphenatedKey <span class="token operator">=</span> <span class="token function">hyphenate</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isReservedAttribute</span><span class="token punctuation">(</span>hyphenatedKey<span class="token punctuation">)</span> <span class="token operator">||</span>          config<span class="token punctuation">.</span><span class="token function">isReservedAttr</span><span class="token punctuation">(</span>hyphenatedKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">warn</span><span class="token punctuation">(</span>          <span class="token punctuation">(</span><span class="token string">"\""</span> <span class="token operator">+</span> hyphenatedKey <span class="token operator">+</span> <span class="token string">"\" is a reserved attribute and cannot be used as component prop."</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          vm        <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">defineReactive$$1</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isRoot <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isUpdatingChildComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">warn</span><span class="token punctuation">(</span>            <span class="token string">"Avoid mutating a prop directly since the value will be "</span> <span class="token operator">+</span>            <span class="token string">"overwritten whenever the parent component re-renders. "</span> <span class="token operator">+</span>            <span class="token string">"Instead, use a data or computed property based on the prop's "</span> <span class="token operator">+</span>            <span class="token string">"value. Prop being mutated: \""</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">,</span>            vm          <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>在initProps的时候，在defineReactive时通过判断是否在开发环境，如果是开发环境，会在触发<span class="token keyword">set</span>的时候判断是否此key是否处于updatingChildren中被修改，如果不是，说明此修改来自子组件，触发warning提示。需要特别注意的是，当你从子组件修改的prop属于基础类型时会触发提示。 这种情况下，你是无法修改父组件的数据源的， 因为基础类型赋值时是值拷贝。你直接将另一个非基础类型（Object<span class="token punctuation">,</span> <span class="token function">array）赋值到此key时也会触发提示</span><span class="token punctuation">(</span>但实际上不会影响父组件的数据源<span class="token punctuation">)</span>， 当你修改object的属性时不会触发提示，并且会修改父组件数据源的数据。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第69题-TypeScript中的never类型具体有什么用？"><a href="#第69题-TypeScript中的never类型具体有什么用？" class="headerlink" title="第69题:TypeScript中的never类型具体有什么用？"></a>第69题:TypeScript中的never类型具体有什么用？</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">举个具体点的例子，当你有一个 union type<span class="token operator">:</span><span class="token keyword">interface</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>  type<span class="token operator">:</span> <span class="token string">'foo'</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Bar</span> <span class="token punctuation">{</span>  type<span class="token operator">:</span> <span class="token string">'bar'</span><span class="token punctuation">}</span>type All <span class="token operator">=</span> Foo <span class="token operator">|</span> Bar在 <span class="token keyword">switch</span> 当中判断 type，<span class="token constant">TS</span> <span class="token function">是可以收窄类型的</span> <span class="token punctuation">(</span>discriminated union<span class="token punctuation">)</span>：<span class="token keyword">function</span> <span class="token function">handleValue</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token operator">:</span> All</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>val<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">'foo'</span><span class="token operator">:</span>      <span class="token comment">// 这里 val 被收窄为 Foo</span>      <span class="token keyword">break</span>    <span class="token keyword">case</span> <span class="token string">'bar'</span><span class="token operator">:</span>      <span class="token comment">// val 在这里是 Bar</span>      <span class="token keyword">break</span>    <span class="token keyword">default</span><span class="token operator">:</span>      <span class="token comment">// val 在这里是 never</span>      <span class="token keyword">const</span> exhaustiveCheck<span class="token operator">:</span> never <span class="token operator">=</span> val      <span class="token keyword">break</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>注意在 <span class="token keyword">default</span> 里面我们把被收窄为 never 的 val 赋值给一个显式声明为 never 的变量。如果一切逻辑正确，那么这里应该能够编译通过。但是假如后来有一天你的同事改了 All 的类型：type All <span class="token operator">=</span> Foo <span class="token operator">|</span> Bar <span class="token operator">|</span> Baz然而他忘记了在 handleValue 里面加上针对 Baz 的处理逻辑，这个时候在 <span class="token keyword">default</span> branch 里面 val 会被收窄为 Baz，导致无法赋值给 never，产生一个编译错误。所以通过这个办法，你可以确保 handleValue <span class="token function">总是穷尽</span> <span class="token punctuation">(</span>exhaust<span class="token punctuation">)</span> 了所有 All 的可能类型。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第70题:用css画一个三角形</p><p>实现效果:</p><p><img src="https://camo.githubusercontent.com/3cb290ba547c9b541704c60584a1dddbf0a016370f02201d40783ae9bfa1827c/687474703a2f2f7265736f757263652e6d757969792e636e2f696d6167652f32303231303732373233303535332e706e67"></p><img src="https://camo.githubusercontent.com/0e558cd1380280cd205498095c1dac1b51f20fd56a3a21abfcbef15b5d952e85/687474703a2f2f7265736f757263652e6d757969792e636e2f696d6167652f32303231303732383037333935302e706e67"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">实心三角形步骤一：正方形先画个正方形：&lt;div class="filled-triangle"&gt;&lt;/div&gt;&lt;div class="margin-triangle"&gt;hi, sister&lt;/div&gt;&lt;div class="rounded-triangle"&gt;&lt;/div&gt;&lt;style&gt;  .filled-triangle</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 1px solid cyan<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token selector">&lt;/style&gt;CSS 如何实现一个加载中动画？步骤二：加大 border将 border 的值加大，并设为不同的颜色&lt;style&gt;  .filled-triangle</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">border-bottom</span><span class="token punctuation">:</span> 50px solid cyan<span class="token punctuation">;</span>    <span class="token property">border-top</span><span class="token punctuation">:</span> 50px solid blueviolet<span class="token punctuation">;</span>    <span class="token property">border-left</span><span class="token punctuation">:</span> 50px solid chartreuse<span class="token punctuation">;</span>    <span class="token property">border-right</span><span class="token punctuation">:</span> 50px solid gold<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token selector">&lt;/style&gt;步骤三：宽高均设为 0然后把它的高度和宽度去掉，剩下四个border，就变成了：&lt;style&gt;  .filled-triangle</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>    <span class="token property">border-bottom</span><span class="token punctuation">:</span> 50px solid cyan<span class="token punctuation">;</span>    <span class="token property">border-top</span><span class="token punctuation">:</span> 50px solid blueviolet<span class="token punctuation">;</span>    <span class="token property">border-left</span><span class="token punctuation">:</span> 50px solid chartreuse<span class="token punctuation">;</span>    <span class="token property">border-right</span><span class="token punctuation">:</span> 50px solid gold<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token selector">&lt;/style&gt;可以看到，我们现在已经得到四个三角形了步骤四：保留唯一颜色（等腰三角形）想要哪个三角形，就保留哪个三角形的颜色，其他的都设置为透明&lt;style&gt;  .filled-triangle</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>    <span class="token property">border-bottom</span><span class="token punctuation">:</span> 50px solid cyan<span class="token punctuation">;</span>    <span class="token property">border-top</span><span class="token punctuation">:</span> 50px solid transparent<span class="token punctuation">;</span>    <span class="token property">border-left</span><span class="token punctuation">:</span> 50px solid transparent<span class="token punctuation">;</span>    <span class="token property">border-right</span><span class="token punctuation">:</span> 50px solid transparent<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token selector">&lt;/style&gt;这样我们就得到了一个等腰三角形简化代码其实，我们不需要把四个 border 都设置一遍，只需设置你想要画的三角形所涉及到的三条边的 border 即可以上步的画最上面的三角形为例，只需设置下、左、右三条边即可&lt;style&gt;  .filled-triangle</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>    <span class="token property">border-bottom</span><span class="token punctuation">:</span> 50px solid cyan<span class="token punctuation">;</span>    <span class="token property">border-left</span><span class="token punctuation">:</span> 50px solid transparent<span class="token punctuation">;</span>    <span class="token property">border-right</span><span class="token punctuation">:</span> 50px solid transparent<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token selector">&lt;/style&gt;不等腰三角形上图为等腰三角形，之所以为等腰，是因为所有的边框宽度是一样的，如果我们将边框宽度设置为不同，那会怎样？例如：&lt;style&gt;  .filled-triangle</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>    <span class="token property">border-bottom</span><span class="token punctuation">:</span> 100px solid cyan<span class="token punctuation">;</span>    <span class="token property">border-top</span><span class="token punctuation">:</span> 100px solid transparent<span class="token punctuation">;</span>    <span class="token property">border-left</span><span class="token punctuation">:</span> 50px solid transparent<span class="token punctuation">;</span>    <span class="token property">border-right</span><span class="token punctuation">:</span> 50px solid transparent<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token selector">&lt;/style&gt;我们可以不局限于保留一条边框，我们可以保留两条，于是我们可以告别等腰，得到更加锐利的三角：&lt;style&gt;  .filled-triangle</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>    <span class="token property">border-bottom</span><span class="token punctuation">:</span> 50px solid cyan<span class="token punctuation">;</span>    <span class="token property">border-top</span><span class="token punctuation">:</span> 50px solid transparent<span class="token punctuation">;</span>    <span class="token property">border-left</span><span class="token punctuation">:</span> 50px solid cyan<span class="token punctuation">;</span>    <span class="token property">border-right</span><span class="token punctuation">:</span> 50px solid transparent<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token selector">&lt;/style&gt;上面都是底边在水平线上；当底边与水平线不重合时，可以利用宽高比和CSS3中的 transform 属性和 rotate 相结合，来实现我们想要呈现的三角形效果气泡聊天框（带边缘色的三角形）步骤一：画圆角矩形&lt;div class="margin-triangle"&gt;hi, sister&lt;/div&gt;&lt;style&gt;  .margin-triangle</span> <span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>     <span class="token property">height</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>     <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 1px solid cyan<span class="token punctuation">;</span>     <span class="token property">border-radius</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token selector">&lt;/style&gt;步骤二：加尖角三角形1. 画一个深色的三角形先画一个深色的三角形，然后再画一个同样大小白色的三角形盖在它上面，两个三角形错位 2 个像素，这样深色三角形的边缘就刚好露出一个像素.margin-triangle::before</span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>     <span class="token property">top</span><span class="token punctuation">:</span> 34px<span class="token punctuation">;</span>     <span class="token property">left</span><span class="token punctuation">:</span> -10px<span class="token punctuation">;</span>     <span class="token property">border-top</span><span class="token punctuation">:</span> 6px solid transparent<span class="token punctuation">;</span>     <span class="token property">border-bottom</span><span class="token punctuation">:</span> 6px solid transparent<span class="token punctuation">;</span>     <span class="token property">border-right</span><span class="token punctuation">:</span> 10px solid cyan<span class="token punctuation">;</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token selector">2. 画一个白色的三角形盖上去，错位 2 个像素.margin-triangle::after</span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>     <span class="token property">top</span><span class="token punctuation">:</span> 34px<span class="token punctuation">;</span>     <span class="token property">left</span><span class="token punctuation">:</span> -8px<span class="token punctuation">;</span>     <span class="token property">border-top</span><span class="token punctuation">:</span> 6px solid transparent<span class="token punctuation">;</span>     <span class="token property">border-bottom</span><span class="token punctuation">:</span> 6px solid transparent<span class="token punctuation">;</span>     <span class="token property">border-right</span><span class="token punctuation">:</span> 10px solid #fff<span class="token punctuation">;</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token selector">圆角三角形步骤一：画一个正方形&lt;div class="rounded-triangle"&gt;&lt;/div&gt;&lt;style&gt;  .rounded-triangle</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span>  50px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> cyan<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token selector">&lt;/style&gt;步骤二：画一个菱形利用 CSS transform 属性旋转、倾斜、缩放&lt;style&gt;  .rounded-triangle</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span>  50px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> cyan<span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-60deg<span class="token punctuation">)</span> <span class="token function">skewX</span><span class="token punctuation">(</span>-30deg<span class="token punctuation">)</span> <span class="token function">scale</span><span class="token punctuation">(</span>1<span class="token punctuation">,</span> 0.866<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token selector">&lt;/style&gt;步骤三：设置一个角为圆角.rounded-triangle:after</span> <span class="token punctuation">{</span>    <span class="token property">border-top-right-radius</span><span class="token punctuation">:</span> 30%<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token selector">步骤四：拼接 3 个带圆角的菱形&lt;div class="rounded-triangle"&gt;&lt;/div&gt;&lt;style&gt;  .rounded-triangle</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span>  50px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>    <span class="token property">border-top-right-radius</span><span class="token punctuation">:</span> 30%<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> cyan<span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-60deg<span class="token punctuation">)</span> <span class="token function">skewX</span><span class="token punctuation">(</span>-30deg<span class="token punctuation">)</span> <span class="token function">scale</span><span class="token punctuation">(</span>1<span class="token punctuation">,</span>.866<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.rounded-triangle:before,  .rounded-triangle:after</span> <span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> inherit<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span>  50px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>    <span class="token property">border-top-right-radius</span><span class="token punctuation">:</span> 30%<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.rounded-triangle:before</span> <span class="token punctuation">{</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-135deg<span class="token punctuation">)</span> <span class="token function">skewX</span><span class="token punctuation">(</span>-45deg<span class="token punctuation">)</span> <span class="token function">scale</span><span class="token punctuation">(</span>1.414<span class="token punctuation">,</span> .707<span class="token punctuation">)</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>-50%<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.rounded-triangle:after</span> <span class="token punctuation">{</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>135deg<span class="token punctuation">)</span> <span class="token function">skewY</span><span class="token punctuation">(</span>-45deg<span class="token punctuation">)</span> <span class="token function">scale</span><span class="token punctuation">(</span>.707<span class="token punctuation">,</span> 1.414<span class="token punctuation">)</span> <span class="token function">translate</span><span class="token punctuation">(</span>50%<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第71题-CSS-如何实现一个加载中动画？"><a href="#第71题-CSS-如何实现一个加载中动画？" class="headerlink" title="第71题:CSS 如何实现一个加载中动画？"></a>第71题:CSS 如何实现一个加载中动画？</h3><img src="https://camo.githubusercontent.com/b11b31789c519c91561c8017fd3b2ba7ee767cc2e809425d84e4d163fc358a9e/687474703a2f2f7265736f757263652e6d757969792e636e2f696d6167652f32303231303732393036333230362e676966"><p><a href="https://codepen.io/jh3y/pen/VwLdVoZ">https://codepen.io/jh3y/pen/VwLdVoZ</a></p><h3 id="第72题-CSS-会阻塞-DOM-解析吗？"><a href="#第72题-CSS-会阻塞-DOM-解析吗？" class="headerlink" title="第72题:CSS 会阻塞 DOM 解析吗？"></a>第72题:CSS 会阻塞 DOM 解析吗？</h3><ul><li>css加载不会阻塞DOM树的解析</li><li>css加载会阻塞DOM树的渲染</li><li>css加载会阻塞后面js语句的执行</li></ul><p>浏览器的渲染流程如下：</p><img src="https://camo.githubusercontent.com/cc5ea1fcc59ecca2d7535f35efbaeec2e788c91d2a5a9b3c5d964fed6eaa3c33/687474703a2f2f7265736f757263652e6d757969792e636e2f696d6167652f32303231303730373036323033362e706e67"><p>WebKit 主流程:</p><img src="https://camo.githubusercontent.com/8c9169642c59773422687d8244a65ac01a9955d322ee11f71f6ec4218ff0e479/687474703a2f2f7265736f757263652e6d757969792e636e2f696d6167652f32303231303730373036323032332e6a7067"><p>图：Mozilla 的 Gecko 呈现引擎主流程（3.6）</p><p>结合上图，一个完整的渲染流程如下：</p><ul><li>渲染进程解析 HTML 内容转换为能够读懂的 DOM 树结构，解析 CSS 为 CSSDOM</li><li>把 DOM 和 CSSOM 结合起来生成渲染树(Render Tree)</li><li>渲染树构建好了之后，将会执行布局过程，它将确定每个节点在屏幕上的确切坐标</li><li>把渲染树展示到屏幕上。再下一步就是绘制，即遍历渲染树，并使用UI后端层绘制每个节点。</li></ul><p><strong>值得注意的是：</strong></p><p>关键的点在于上述的 4 步并不是以严格顺序执行的。渲染引擎会以最快的速度展示内容，也就是说，浏览器一边解析 HTML，一边构建渲染树，构建一部分，就会把当前已有的元素渲染出来。如果这个时候外部样式并没有加载完成，渲染出来的就是浏览器默认样式了。</p><p>其它阶段也是如此。由于浏览器会尝试尽快展示内容，所以内容有时会在样式还没有加载的时候展示出来。这就是经常发生的FOCU(flash of unstyled content)或白屏问题。</p><p><strong>CSS</strong> <strong>加载不会阻塞 DOM 树的解析</strong></p><p>由浏览器的渲染流程图可知，DOM 解析和 CSS 解析是两个并行的进程，所以 CSS 加载不会阻塞 DOM 树的解析</p><p><strong>CSS 加载会阻塞 DOM</strong> <strong>树的渲染</strong></p><p>Render Tree是依赖于 DOM Tree 和 CSSOM Tree 的，所以无论 DOM Tree 是否已经完成，它都必须等待到 CSSOM Tree 构建完成，即 CSS 加载完成（或 CSS 加载失败）后，才能开始渲染。</p><p>因此，CSS加载是会阻塞 DOM 树的渲染</p><pre class="line-numbers language-none"><code class="language-none">&lt;head&gt;    &lt;script&gt;        document.addEventListener('DOMContentLoaded', () =&gt; {            var p = document.querySelector('p')            console.log(p)        })    &lt;/script&gt;    &lt;link rel="stylesheet" href="./static/style.css?sleep=3000"&gt;&lt;/head&gt;&lt;body&gt;    &lt;p&gt;hello world&lt;/p&gt;&lt;/body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://camo.githubusercontent.com/d8541ff67086bed2040c1690b13c475b2d24005c620164a6cc686b5c37104a69/687474703a2f2f7265736f757263652e6d757969792e636e2f696d6167652f32303231303730373037313532382e676966"><p>案例来源：<a href="https://juejin.cn/post/6973949865130885157">关于 JS 与 CSS 是否阻塞 DOM 的渲染和解析</a></p><p>CSS 的加载并没有阻塞 DOM 树的解析，p 标签是正常解析的，但 p 标签加载完后，页面是迟迟没有渲染的，是因为 CSS 还没有请求完成，在 CSS 请求完成后，hello world 才被渲染出来，所以 CSS 会阻塞页面渲染</p><blockquote><p>DOMContentLoaded：只有当纯 HTML 被完全加载以及解析时，<strong>DOMContentLoaded</strong> 事件会被触发，它不会等待样式表，图片或者子框架完成加载</p></blockquote><p>CSS 加载会阻塞其后的 JS 执行</p><p>由浏览器的渲染流程图可知，JS 的加载、解析与执行会阻塞 DOM 的构建，也就是说，在构建 DOM 时，HTML 解析器若遇到了 JS，那么它会暂停构建 DOM ，将控制权移交给JS引擎，等 JS 引擎运行完毕，浏览器再从中断的地方恢复 DOM 构建。</p><p>这也是建议将 script 标签放在 body 标签底部的原因。</p><p>由浏览器的渲染流程图可知，DOM 和 CSSOM 的构建是互不影响，但如果在 JS 脚本前引入外部 CSS 文件喃？</p><pre class="line-numbers language-none"><code class="language-none">&lt;html&gt;    &lt;head&gt;            &lt;link href="theme.css" rel="stylesheet"&gt;    &lt;/head&gt;    &lt;body&gt;            &lt;div&gt;hello world&lt;/div&gt;            &lt;script&gt;                    console.log('hello world')            &lt;/script&gt;            &lt;div&gt;hello world&lt;/div&gt;    &lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它的执行流程：</p><img src="https://camo.githubusercontent.com/ac7ebbb06f81ababd70a18048afff15251f89491f335f5f8eef89cdf5810c59c/687474703a2f2f7265736f757263652e6d757969792e636e2f696d6167652f32303231303730373037343031332e706e67"><p>此时 CSS 也阻塞 DOM 的生成</p><p>这是因为 JS 不只是可以改 DOM ，它还可以更改样式，也就是它可以更改 CSSOM 。而不完整的 CSSOM 是无法使用的， JS 中想访问 CSSOM 并更改它，那么在执行 JS 时，必须要能拿到完整的CSSOM。</p><p>所以就导致了一个现象，如果浏览器尚未完成 CSSOM 的下载和构建，而我们却想在此时运行脚本，那么浏览器将延迟脚本执行和 DOM 构建，直至其完成 CSSOM 的下载和构建。也就是说，在这种情况下，浏览器会先下载和构建 CSSOM ，然后再执行JS脚本，最后在继续构建 DOM 。</p><p>如果也有 JS 加载喃？</p><pre class="line-numbers language-none"><code class="language-none">&lt;head&gt;    &lt;script&gt;        document.addEventListener('DOMContentLoaded', () =&gt; {            var p = document.querySelector('p')            console.log(p)        })    &lt;/script&gt;    &lt;link rel="stylesheet" href="./static/style.css?sleep=3000"&gt;    &lt;script src="./static/index.js"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;p&gt;hello world&lt;/p&gt;&lt;/body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以一般将 <code>&lt;script&gt;</code> 放在 <code>&lt;link&gt;</code> 标签前面</p><p>如何优化渲染流程?</p><p>即如何减少白屏时间？</p><ul><li>使用内联 JS、CSS ，减少 JS 、 CSS 文件的下载</li><li>webpack 等工具对 JS、CSS 文件压缩，减少文件大小</li><li>使用 async 或者 defer</li><li>使用 CDN 等</li></ul><h4 id="第73题-px、rem、em-的区别"><a href="#第73题-px、rem、em-的区别" class="headerlink" title="第73题:px、rem、em 的区别?"></a>第73题:px、rem、em 的区别?</h4><ul><li><p>px：绝对长度单位，来描述一个元素的宽高以及定位信息</p></li><li><p>rpx：微信小程序独有的、解决屏幕自适应的尺寸单位</p></li><li><p>em：相对单位，基准点为父节点字体的大小，如果自身定义了font-size按自身来计算（浏览器默认16px）em作为字体单位，相对于父元素字体大小；em作为行高单位时，相对于自身字体大小，整个页面内 1em 不是一个固定的值。</p></li><li><p>rem：相对单位，可理解为”root em”，相对根节点html的字体大小来计算，CSS3新加属性，rem作用于非根元素时，相对于根元素字体大小；rem作用于根元素字体大小时，相对于其出初始字体大小。rem布局的本质是等比缩放，一般是基于宽度，试想一下如果UE图能够等比缩放，那该多么美好啊</p></li><li><p>vw/vh：viewpoint width / viewpoint height，vw 相对于视窗的宽度，vh 相对于视窗的高度，1vw等于视窗宽度的1%</p></li><li><p>百分比：1% 对不同属性有不同的含义。 font-size: 200% 和font-size: 2em 一样，表示字体大小是默认（继承自父亲）字体大小的2倍。 line-height: 200% 表示行高是自己字体大小的 2 倍。 width: 100%表示自己 content 的宽度等于父亲 content 宽度的1倍。</p></li><li><p>绝对长度单位，根据维基百科解释：它是图像显示的基本单元，既不是一个确定的物理量，也不是一个点或者小方块，而是一个抽象概念。很多时候，px 也常被称为 CSS 像素，在 PC 中，通常认为 1px 的真实长度是固定的</p><p><strong>那 px 真的是一个设备无关，跟长度单位米和分米一样是固定大小的吗？</strong></p><blockquote><p>一个像素表示了计算机屏幕所能显示的最小区域，像素分为两种类型：</p><ul><li>CSS 像素：为 Web 开发者提供，在 CSS 中使用的一个抽象单位</li><li>物理像素：只与设备的硬件密度有关，任何设备的物理像素都是固定的</li></ul><p>转换关系：CSS像素 = 物理像素／分辨率</p><p>假设PC 端：750 * 1134的视觉稿： 1 CSS像素 = 物理像素／分辨率 = 750 ／ 980 =0.76</p><p>假设移动端（iphone6为例），分辨率为375 * 667：1 CSS像素 = 物理像素 ／分辨率 = 750 ／ 375 = 2</p><p>所以 PC 端，一个CSS像素可以用0.76个物理像素来表示，而iphone6中 一个CSS像素表示了2个物理像素。此外不同的移动设备分辨率不同，也就是1个CSS像素可以表示的物理像素是不同的</p></blockquote><p>注意，当浏览器页面缩放时，px 并不能跟随变大。当前网页的布局就会被打破。</p><p><strong>rpx</strong></p><ul><li>rpx是微信小程序独有的、解决屏幕自适应的尺寸单位</li><li>可以根据屏幕宽度进行自适应，不论大小屏幕，规定屏幕宽为 750rpx</li><li>通过 rpx 设置元素和字体的大小，小程序在不同尺寸的屏幕下，可以实现自动适配</li></ul><p><strong>rpx 和 px之间的区别：</strong></p><ul><li>在普通网页开发中，最常用的像素单位是px</li><li>在小程序开发中，推荐使用 rpx 这种响应式的像素单位进行开发</li></ul><p>设计师在出设计稿的时候，出的都是二倍图，也就是说如果在这个设计稿上有一个宽高为 200px 的盒子，那么它最终画到页面上实际上是一个宽高为 100px 的盒子，那么再换算成 rpx 需要乘以 2 ，就又变成了 200rpx ，跟设计稿上的数字是一样的，所以我们可以保持数字不变，直接将单位 px 替换成 rpx</p><p><strong>em</strong></p><p>相对长度单位，em 是相对于当前元素的父元素的 <code>font-size</code> 进行计算,如果当前元素未设置则相对于浏览器的默认字体尺寸。</p><pre class="line-numbers language-none"><code class="language-none">&lt;div class="a"&gt;A    &lt;div class="b"&gt;B        &lt;div class="c"&gt;C&lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;&lt;style&gt;.a{ font-size:16px;}.b{ font-size:2em;} /* 相当于32px */.c{ font-size:1em;} /* 相当于32px */&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://camo.githubusercontent.com/76f832190f5a88cac6d3fa49b04636d22554e4a31ec72cb151db36f5233e35ee/687474703a2f2f7265736f757263652e6d757969792e636e2f696d6167652f32303231303730383037303433332e706e67"><img src="/687474703a2f2f7265736f757263652e6d757969792e636e2f696d6167652f32303231303730383037303433332e706e67.png" alt="img"></a></p><p><strong>rem</strong></p><p>相对长度单位，CSS3 新增的一个相对单位，rem 是相对于根元素（html）的 <code>font-size</code> 进行计算，rem 不仅可设置字体大小，也可以设置元素宽高属性。</p><pre class="line-numbers language-none"><code class="language-none">&lt;div class="a"&gt;A    &lt;div class="b"&gt;B        &lt;div class="c"&gt;C&lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;&lt;style&gt;    html{ font-size:16px;}    .a{ font-size:3rem;} /* 相当于48px */    .b{ font-size:2rem;} /* 相当于32px */    .c{ font-size:1rem;} /* 相当于16px */&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://camo.githubusercontent.com/0769609502496c1c405429299112f595065586f7931ef1802a172631f679a6e6/687474703a2f2f7265736f757263652e6d757969792e636e2f696d6167652f32303231303730383037303833392e706e67"><img src="/687474703a2f2f7265736f757263652e6d757969792e636e2f696d6167652f32303231303730383037303833392e706e67.png" alt="img"></a></p><p><strong>px 与 rem 的区别：</strong></p><ul><li>px 对于只需要适配少量设备，且分辨率对页面影响不大的，使用 px 即可， px 设置更为精准 。</li><li>随着 rem 在众多的浏览器都得到支持，有需要考虑到对多设备，多分辨率的自适应，无疑这时候 rem 是最合适的（如：移动端的开发）。</li></ul><p><strong>vw/vh</strong></p><p>CSS3 特性 vh 和 vw：</p><ul><li>vh 相对于视窗的高度，视窗高度是100vh</li><li>vw 相对于视窗的宽度，视窗宽度是100vw</li></ul><p>这里是视窗指的是浏览器内部的可视区域大小，即 window.innerWidth/window.innerHeight 大小，不包含任务栏标题栏以及底部工具栏的浏览器区域大小。</p><p><strong>百分比</strong></p><p>通常认为子元素的百分比完全相对于直接父元素：</p><pre class="line-numbers language-none"><code class="language-none">&lt;div class="a"&gt;    &lt;div class="b"&gt;&lt;/div&gt;&lt;/div&gt;&lt;style&gt;    .a{ width:200px; height:100px; background-color: aqua; }     .b{ width:50%; height:50%; background-color: blueviolet; }&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://camo.githubusercontent.com/ee7e116b2a7ac4e14914157dc70ddd46cccc3138f9819fd547d397eb29516351/687474703a2f2f7265736f757263652e6d757969792e636e2f696d6167652f32303231303730383037333234312e706e67"><img src="/687474703a2f2f7265736f757263652e6d757969792e636e2f696d6167652f32303231303730383037333234312e706e67.png" alt="img"></a></p><p>需要注意的是，如果设置了top、margin、padding等：</p><ul><li>子元素的 top 和 bottom 如果设置百分比，则相对于直接非 static 定位(默认定位)的父元素的高度</li><li>子元素的 left 和 right 如果设置百分比，则相对于直接非 static 定位(默认定位的)父元素的宽度</li><li>子元素的 padding/margin 如果设置百分比，不论是垂直方向或者是水平方向，都相对于直接父亲元素的 padding/margin ，而与父元素的 height 无关。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记忆知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue路由守卫</title>
      <link href="/2020/06/309905.html"/>
      <url>/2020/06/309905.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Vue-Router :提供的导航守卫主要用来通过跳转或取消的方式守卫导航。有多种机会植入路由导航过程中：全局的, 单个路由独享的, 或者组件级的。</p><p>路由守卫钩子函数一共七个</p><ul><li><strong>router.beforeEach</strong></li><li><strong>router.beforeResolve</strong></li><li><strong>router.afterEach</strong></li><li><strong>beforeEnter</strong></li><li><strong>beforeRouteEnter</strong></li><li><strong>beforeRouteUpdate (2.2 新增)</strong></li><li><strong>beforeRouteLeave</strong></li></ul><hr><p>每个守卫方法接收三个参数:</p><p>to:要去哪个页面;</p><p>from:从哪里来(当前导航正要离开的路由)</p><p>next:它是一个函数。</p><hr><h1 id="全局前置守卫router-beforeEach"><a href="#全局前置守卫router-beforeEach" class="headerlink" title="全局前置守卫router.beforeEach"></a>全局前置守卫router.beforeEach</h1><p>当一个导航触发时，全局前置守卫按照创建顺序调用,守卫是异步解析执行，此时导航在所有守卫 resolve 完之前一直处于 <strong>等待中</strong>。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>next():如果要放行,进行下一个钩子</p><p>next(其他页):跳转其他页面</p><p>守卫函数中,一定要调用next();</p><p>to.path:是一个路由对象,path即路径,是他的一个属性.</p><hr><h1 id="全局解析守卫router-beforeResolve"><a href="#全局解析守卫router-beforeResolve" class="headerlink" title="全局解析守卫router.beforeResolve"></a>全局解析守卫router.beforeResolve</h1><p>和router.beforeEach不同的是:</p><p>导航被确认之前,同时在所有组件内守卫和异步路由组件被解析之后，解析守卫就被调用。</p><hr><h1 id="全局后置router-afterEach"><a href="#全局后置router-afterEach" class="headerlink" title="全局后置router.afterEach"></a><a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%85%A8%E5%B1%80%E5%90%8E%E7%BD%AE%E9%92%A9%E5%AD%90">全局后置</a>router.afterEach</h1><p>这些钩子不会接收next函数,也不会改变导航本身:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">router<span class="token punctuation">.</span><span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">// ...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h1 id="路由独享的守卫"><a href="#路由独享的守卫" class="headerlink" title="路由独享的守卫"></a>路由独享的守卫</h1><p>可以直接在路由配置上定义beforeEnter守卫:</p><pre class="line-numbers language-none"><code class="language-none">const router = new VueRouter({  routes: [    {      path: '/foo',      component: Foo,      beforeEnter: (to, from, next) =&gt; {        // ...      }    }  ]})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="组件内的守卫"><a href="#组件内的守卫" class="headerlink" title="组件内的守卫"></a>组件内的守卫</h1><p>最后，你可以在路由组件内直接定义以下路由导航守卫：</p><ul><li><code>beforeRouteEnter</code></li><li><code>beforeRouteUpdate</code> (2.2 新增)</li><li><code>beforeRouteLeave</code></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> Foo <span class="token operator">=</span> <span class="token punctuation">{</span>  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">...</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>  <span class="token function">beforeRouteEnter</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 在渲染该组件的对应路由被 confirm 前调用</span>    <span class="token comment">// 不！能！获取组件实例 `this`</span>    <span class="token comment">// 因为当守卫执行前，组件实例还没被创建</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeRouteUpdate</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 在当前路由改变，但是该组件被复用时调用</span>    <span class="token comment">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span>    <span class="token comment">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span>    <span class="token comment">// 可以访问组件实例 `this`</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeRouteLeave</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 导航离开该组件的对应路由时调用</span>    <span class="token comment">// 可以访问组件实例 `this`</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>beforeRouteEnter</code> 守卫 <strong>不能</strong> 访问 <code>this</code>，因为守卫在导航确认前被调用，因此即将登场的新组件还没被创建。</p><p>不过，你可以通过传一个回调给 <code>next</code>来访问组件实例。在导航被确认的时候执行回调，并且把组件实例作为回调方法的参数。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">beforeRouteEnter</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token parameter">vm</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 通过 `vm` 访问组件实例</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意 <code>beforeRouteEnter</code> 是支持给 <code>next</code> 传递回调的唯一守卫。对于 <code>beforeRouteUpdate</code> 和 <code>beforeRouteLeave</code> 来说，<code>this</code> 已经可用了，所以<strong>不支持</strong>传递回调，因为没有必要了。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">beforeRouteUpdate</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// just use `this`</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> to<span class="token punctuation">.</span>params<span class="token punctuation">.</span>name  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个离开守卫通常用来禁止用户在还未保存修改前突然离开。该导航可以通过 <code>next(false)</code> 来取消。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">beforeRouteLeave</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> answer <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">'Do you really want to leave? you have unsaved changes!'</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>answer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="完整的导航解析流程"><a href="#完整的导航解析流程" class="headerlink" title="完整的导航解析流程"></a><a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%AE%8C%E6%95%B4%E7%9A%84%E5%AF%BC%E8%88%AA%E8%A7%A3%E6%9E%90%E6%B5%81%E7%A8%8B">完整的导航解析流程</a></h2><ol><li>导航被触发。</li><li>在失活的组件里调用 <code>beforeRouteLeave</code> 守卫。</li><li>调用全局的 <code>beforeEach</code> 守卫。</li><li>在重用的组件里调用 <code>beforeRouteUpdate</code> 守卫 (2.2+)。</li><li>在路由配置里调用 <code>beforeEnter</code>。</li><li>解析异步路由组件。</li><li>在被激活的组件里调用 <code>beforeRouteEnter</code>。</li><li>调用全局的 <code>beforeResolve</code> 守卫 (2.5+)。</li><li>导航被确认。</li><li>调用全局的 <code>afterEach</code> 钩子。</li><li>触发 DOM 更新。</li><li>调用 <code>beforeRouteEnter</code> 守卫中传给 <code>next</code> 的回调函数，创建好的组件实例会作为回调函数的参数传入。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue Router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅拷贝和深拷贝的方法</title>
      <link href="/2020/05/0415150.html"/>
      <url>/2020/05/0415150.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>js数据类型</p><ul><li><em>基本数据类型(存放在栈空间)</em></li><li><em>引用数据类型(存放在堆空间)</em><br>js里面的对象是引用类型，我们在把变量a赋值给变量b的时候，赋值过去的其实是a的引用地址，b有了相同的引用地址，那a跟b指向的都是同一块内存空间，操作b的属性，其实就是操作了这块内存，因为a也指向这块内存，所以a的属性也变了。这其实就是一个浅拷贝。</li><li>拷贝的栈中的地址。修改拷贝后的数据，原数据会改变</li><li>拷贝的是堆中的数据。<hr></li></ul><h1 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h1><p>方式1: 遍历</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> target <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">'John'</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>  friend<span class="token operator">:</span> <span class="token punctuation">{</span>    name<span class="token operator">:</span> <span class="token string">'lee'</span><span class="token punctuation">,</span>    age<span class="token operator">:</span> <span class="token number">30</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token function-variable function">shallowCopy</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">// 判断参数是数组还是对象</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 使用hasOwnProperty来判断是否是自身属性</span>    <span class="token comment">// 只拷贝自身属性，不拷贝原型链上的属性，即继承属性</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> newObj <span class="token operator">=</span> <span class="token function">shallowCopy</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>newObj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>age<span class="token punctuation">,</span> newObj<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//20, 50</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>方式2:<p>ES6: Object.assign()</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> target <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">'John'</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>  friend<span class="token operator">:</span> <span class="token punctuation">{</span>    name<span class="token operator">:</span> <span class="token string">'lee'</span><span class="token punctuation">,</span>    age<span class="token operator">:</span> <span class="token number">30</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> newObj<span class="token operator">=</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>target<span class="token punctuation">)</span>newObj<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'baba'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newObj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//{ name: 'John', age: 20, friend: { name: 'baba', age: 30 } }</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>方式3:扩展运算符...<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> target <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">'John'</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>  friend<span class="token operator">:</span> <span class="token punctuation">{</span>    name<span class="token operator">:</span> <span class="token string">'lee'</span><span class="token punctuation">,</span>    age<span class="token operator">:</span> <span class="token number">30</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> newObj <span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">...</span>target<span class="token punctuation">}</span>newObj<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newObj<span class="token punctuation">)</span> <span class="token comment">//{ name: 'John', age: 20, friend: { name: 'lee', age: 18 } }</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h1><p>方式1:<br>序列化与反序列化</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>           name<span class="token operator">:</span> <span class="token string">"jack"</span><span class="token punctuation">,</span>           age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>           hobby<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"sing"</span><span class="token punctuation">,</span> <span class="token string">'dance'</span><span class="token punctuation">]</span>       <span class="token punctuation">}</span>   <span class="token comment">//  :</span>   <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>   <span class="token keyword">var</span> o   <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>     o<span class="token punctuation">.</span>hobby<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'code'</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//{ name: 'jack', age: 18, hobby: [ 'code', 'dance' ] }</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//{ name: 'jack', age: 18, hobby: [ 'sing', 'dance' ] }</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方式2:<br>引入<a href="https://www.bootcdn.cn/lodash.js/">loadsh.js</a></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.bootcdn.net/ajax/libs/lodash.js/4.17.21/lodash.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">"jack"</span><span class="token punctuation">,</span>age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>hobby<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"sing"</span><span class="token punctuation">,</span> <span class="token string">'dance'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">let</span> o <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">cloneDeep</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>o<span class="token punctuation">.</span>hobby<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'code'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://tva1.sinaimg.cn/large/006aANDQly1gy1qlj54y6j309y05bgn2.jpg"><hr><p>方式3:</p><p><a href="https://cdn.bootcdn.net/ajax/libs/underscore.js/1.13.2/underscore-min.js/">引入underscore.js</a>,这个库里有一个pick函数<br>可以实现深拷贝</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.bootcdn.net/ajax/libs/underscore.js/1.13.2/underscore-min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">'Jhon'</span><span class="token punctuation">,</span>age<span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">}</span><span class="token keyword">let</span> age <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">pick</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {age: 25}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://tva1.sinaimg.cn/large/006aANDQly1gy2hi9ueplj308z01jgln.jpg">方式4:递归遍历<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> oldObj <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">"Baba"</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>  weather<span class="token operator">:</span> <span class="token punctuation">{</span>    today<span class="token operator">:</span> <span class="token string">"sun"</span><span class="token punctuation">,</span>    tomorrow<span class="token operator">:</span> <span class="token string">"rain"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> newObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">newObj<span class="token punctuation">,</span> oldObj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token keyword">in</span> oldObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> el <span class="token operator">=</span> oldObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>el <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      newObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token function">deepClone</span><span class="token punctuation">(</span>newObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> el<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>el <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      newObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token function">deepClone</span><span class="token punctuation">(</span>newObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> el<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      newObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> el<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> newObj<span class="token punctuation">;</span><span class="token punctuation">}</span>newObj <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>newObj<span class="token punctuation">,</span> oldObj<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>deepClone<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>deepClone<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"-----------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>newObj<span class="token punctuation">.</span>say <span class="token operator">=</span> <span class="token string">"我是新对象:怎么呢?"</span><span class="token punctuation">;</span>newObj<span class="token punctuation">.</span>weather<span class="token punctuation">.</span>today <span class="token operator">=</span> <span class="token string">"我是新对象:怎么呢?"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newObj<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>oldObj<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浅拷贝 &amp; 深拷贝 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解析ES6数组的解构赋值</title>
      <link href="/2020/03/2521103.html"/>
      <url>/2020/03/2521103.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>基本用法</p><p>ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。<br>以前，为变量赋值，只能直接指定值。</p><hr><h4 id="数组的解构赋值"><a href="#数组的解构赋值" class="headerlink" title="数组的解构赋值"></a>数组的解构赋值</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>ES6允许写成下面这样。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面代码表示，可以从数组中提取值，按照对应位置，对变量赋值。<br>本质上，这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。下面是一些使用嵌套数组进行解构的例子。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token punctuation">[</span>foo <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>foo <span class="token comment">// true</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token string">'b'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token comment">// x='a', y='b' [x, y = 'b'] = ['a', undefined] // x='a', y='b'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意，ES6内部使用严格相等运算符（=== ），判断一个位置是否有值。所以，如果一个数组成员不严格等于undefined ，默认值是不会生效的。</p><hr><h4 id="对象的解构赋值"><a href="#对象的解构赋值" class="headerlink" title="对象的解构赋值"></a>对象的解构赋值</h4><p>对象字面量的语法形式是在一个赋值操作符左边放置一个对象字面量；</p><p>对象的解构与数组有一个重要的不同。</p><p>数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token punctuation">{</span> bar<span class="token punctuation">,</span> foo <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token string">"aaa"</span><span class="token punctuation">,</span> bar<span class="token operator">:</span> <span class="token string">"bbb"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> foo <span class="token comment">// "aaa"</span>bar <span class="token comment">// "bbb"</span><span class="token keyword">var</span> <span class="token punctuation">{</span> baz <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token string">"aaa"</span><span class="token punctuation">,</span> bar<span class="token operator">:</span> <span class="token string">"bbb"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>baz <span class="token comment">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码的第一个例子，等号左边的两个变量的次序，与等号右边两个同名属性的次序不一致，但是对取值完全没有影响。第二个例子的变量没有对应的同名属性，导致取不到值，最后等于undefined 。<br>如果变量名与属性名不一致，必须写成下面这样。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token punctuation">{</span> foo<span class="token operator">:</span> baz <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token string">"aaa"</span><span class="token punctuation">,</span> bar<span class="token operator">:</span> <span class="token string">"bbb"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> baz <span class="token comment">// "aaa"</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> first<span class="token operator">:</span> <span class="token string">'hello'</span><span class="token punctuation">,</span> last<span class="token operator">:</span> <span class="token string">'world'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">{</span> first<span class="token operator">:</span> f<span class="token punctuation">,</span> last<span class="token operator">:</span> l <span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>f <span class="token comment">// 'hello'</span>l <span class="token comment">// 'world'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这实际上说明，对象的解构赋值是下面形式的简写</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token punctuation">{</span> foo<span class="token operator">:</span> foo<span class="token punctuation">,</span> bar<span class="token operator">:</span> bar <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token string">"aaa"</span><span class="token punctuation">,</span> bar<span class="token operator">:</span> <span class="token string">"bbb"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也就是说，对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。</p><hr><h4 id="基本数组结构"><a href="#基本数组结构" class="headerlink" title="基本数组结构"></a><strong>基本数组结构</strong></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// a = 1 // b = 2 // c = 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h4 id="解析一个从函数返回的数组"><a href="#解析一个从函数返回的数组" class="headerlink" title="解析一个从函数返回的数组"></a><strong>解析一个从函数返回的数组</strong></h4><p>从一个函数返回一个数组是十分常见的情况。解构使得处理返回值为数组时更加方便。</p><p>在下面要让 <code>[1, 2]</code> 成为函数的 <code>f()</code> 的输出值，可以使用解构在一行内完成解析。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="解构对象时会查找原型链（如果属性不在对象自身，将从原型链中查找）"><a href="#解构对象时会查找原型链（如果属性不在对象自身，将从原型链中查找）" class="headerlink" title="解构对象时会查找原型链（如果属性不在对象自身，将从原型链中查找）"></a><strong>解构对象时会查找原型链（如果属性不在对象自身，将从原型链中查找）</strong></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 声明对象 和 自身 self 属性</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>self<span class="token operator">:</span> <span class="token string">'hello'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 在原型链中定义一个属性 prot</span>obj<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>prot <span class="token operator">=</span> <span class="token string">'word'</span><span class="token punctuation">;</span><span class="token comment">// test</span><span class="token keyword">const</span> <span class="token punctuation">{</span>self<span class="token punctuation">,</span> prot<span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span><span class="token comment">// self "hello"</span><span class="token comment">// prot "word"（访问到了原型链）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="将剩余数组赋值给一个变量"><a href="#将剩余数组赋值给一个变量" class="headerlink" title="将剩余数组赋值给一个变量"></a><strong>将剩余数组赋值给一个变量</strong></h4><p>当解构一个数组时，可以使用剩余模式，将数组剩余部分赋值给一个变量。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token punctuation">[</span>a5<span class="token punctuation">,</span> <span class="token operator">...</span>b5<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token punctuation">{</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">...</span>res<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> c<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span> d<span class="token operator">:</span> <span class="token number">40</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// a = 10 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token comment">// res = {c: 30, d: 40};</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h4 id="圆括号问题"><a href="#圆括号问题" class="headerlink" title="圆括号问题"></a>圆括号问题</h4><p>解构赋值虽然很方便，但是解析起来并不容易。对于编译器来说，一个式子到底是模式，还是表达式，没有办法从一开始就知道，必须解析到（或解析不到）等号才能知道。<br>由此带来的问题是，如果模式中出现圆括号怎么处理。ES6的规则是，只要有可能导致解构的歧义，就不得使用圆括号。<br>但是，这条规则实际上不那么容易辨别，处理起来相当麻烦。因此，建议只要有可能，就不要在模式中放置圆括号。</p><p>三种解构赋值不得使用圆括号。</p><ul><li>变量声明语句中，模式不能带有圆括号。</li><li>函数参数中，模式不能带有圆括号</li><li>不能将整个模式，或嵌套模式中的一层，放在圆括号之中</li></ul><p>可以使用圆括号的情况:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 正确</span><span class="token punctuation">(</span><span class="token punctuation">{</span> p<span class="token operator">:</span> <span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 正确</span><span class="token punctuation">[</span><span class="token punctuation">(</span>parseInt<span class="token punctuation">.</span>prop<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 正确</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以使用圆括号的情况只有一种：赋值语句的非模式部分，可以使用圆括号。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 解构赋值 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>混入(mixin)全局注册与局部注册的用法</title>
      <link href="/2020/03/2224131.html"/>
      <url>/2020/03/2224131.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。</p><p>例子: 私有引用</p><p>组件A内有方法C</p><p>组件B也有方法C(类似,改造成相同写法)</p><img src="https://tva1.sinaimg.cn/large/006aANDQly1gyb5huaad2j30be02xaaw.jpg"><p align="center">组件A</p><img src="https://tva1.sinaimg.cn/large/006aANDQly1gyb5hua8xfj30b902pmxz.jpg"><p align="center">组件B</p><img src="https://tva1.sinaimg.cn/large/006aANDQly1gyb5huapaej30ce05m76h.jpg"><p align="center">mixin放入公共方法</p><img src="https://tva1.sinaimg.cn/large/006aANDQly1gyb5hub5wjj30d007ctao.jpg"><hr><img src="https://tva1.sinaimg.cn/large/006aANDQly1gyb5huawu1j30ey03jgni.jpg"><p align="center">在需要使用的组件内导入mixin</p><img src="https://tva1.sinaimg.cn/large/006aANDQly1gyb5hubkrtj30db083dj6.jpg"><p align="center">在需要使用的组件内导入mixin</p><hr><p>放入全局进行注册引用: 在main.js导入并挂载mixin这个方法即可</p><img src="https://tva1.sinaimg.cn/large/006aANDQly1gyb5smr3arj30fq06vtb9.jpg"><img src="https://tva1.sinaimg.cn/large/006aANDQly1gyb5t647rxj304e00rdfs.jpg">]]></content>
      
      
      <categories>
          
          <category> Vue.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>箭头函数的特点</title>
      <link href="/2020/03/1521925.html"/>
      <url>/2020/03/1521925.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><ul><li>没有自己的this，this指向<strong>定义</strong>箭头函数时所处的<strong>外部执行环境</strong>的this</li><li>即使调用call/apply/bind也无法改变箭头函数的this</li><li>没有自己的<code>super</code>或<code>new.target</code>。</li><li>箭头函数表达式更适用于那些本来需要匿名函数的地方，并且它不能用作构造函数。</li><li>箭头函数本身没有名字</li><li>箭头函数不能new，<strong>会报错</strong></li><li>箭头函数没有arguments，在箭头函数内访问这个变量访问的是<strong>外部执行环境</strong>的arguments</li><li>箭头函数没有prototype</li><li>凡是能使用函数表达式的地方都可以使用箭头函数</li></ul><h4 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h4><blockquote><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">(param1, param2, …, paramN) =&gt; { statements }(param1, param2, …, paramN) =&gt; expression//相当于：(param1, param2, …, paramN) =&gt;{ return expression; }// 当只有一个参数时，圆括号是可选的：(singleParam) =&gt; { statements }singleParam =&gt; { statements }// 没有参数的函数应该写成一对圆括号。() =&gt; { statements }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="高级语法"><a href="#高级语法" class="headerlink" title="高级语法"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions#%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95">高级语法</a></h3><blockquote><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">//加括号的函数体返回对象字面量表达式：params =&gt; ({foo: bar})//支持剩余参数和默认参数(param1, param2, ...rest) =&gt; { statements }(param1 = defaultValue1, param2, …, paramN = defaultValueN) =&gt; {statements }//同样支持参数列表解构let f = ([a, b] = [1, 2], {x: c} = {x: a + b}) =&gt; a + b + c;f();  // 6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><hr><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions">箭头函数</a></p>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 箭头函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是重绘与重排</title>
      <link href="/2020/03/1435351.html"/>
      <url>/2020/03/1435351.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>回流:</p><p>构造完渲染树后,会将DOM节点与对应的CSS结合,同时我们要进入布局阶段,还需要计算他们在设备视口ViewPort内的确切位置的大小,这个阶段就是回流</p><p>​                                                                                                    <a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction">谷歌开发者文档</a></p></blockquote><blockquote><p>重绘:当DOM变化影响元素的几何属性(宽高边距等),浏览器会重新绘制受影响的部分属性到屏幕中,这个过程叫’重绘’.</p><p align="right">JavaScript高性能</p></blockquote><p>重排何时发生:</p><img src="https://babayetu-1309205424.cos.ap-shanghai.myqcloud.com/blogimgs/%E9%87%8D%E6%8E%92%E4%BD%95%E6%97%B6%E5%8F%91%E7%94%9F.jpg" alt="重排何时发生"><p>最小化重绘和重排:</p><ul><li>延迟访问布局信息:合并多次改变,一次修改class而不是内联</li><li>适当使用display</li><li>创建文档片段:遍历和重排最少</li><li>创建节点备份</li><li>缓存布局信息</li><li>脱标</li><li>减少使用:hover伪选择器</li><li>事件委托</li></ul><img src="https://babayetu-1309205424.cos.ap-shanghai.myqcloud.com/blogimgs/%E6%80%BB%E7%BB%93.jpg" alt="总结"><p>什么影响布局/回流?</p><p>以下所有属性或方法，当在 JavaScript 中请求/调用时，将触发浏览器同步计算样式和布局*。这也称为回流或<a href="http://www.kellegous.com/j/2013/01/26/layout-performance/">布局抖动</a>，是常见的性能瓶颈。</p><p>一般所有同步提供布局指标的API都会触发强制回流/布局。继续阅读以了解更多案例和详细信息。</p><h3 id="元素-API"><a href="#元素-API" class="headerlink" title="元素 API"></a>元素 API</h3><h5 id="获取盒子指标"><a href="#获取盒子指标" class="headerlink" title="获取盒子指标"></a>获取盒子指标</h5><ul><li><code>elem.offsetLeft</code>, <code>elem.offsetTop</code>, <code>elem.offsetWidth</code>, <code>elem.offsetHeight</code>,<code>elem.offsetParent</code></li><li><code>elem.clientLeft</code>, <code>elem.clientTop</code>, <code>elem.clientWidth</code>,<code>elem.clientHeight</code></li><li><code>elem.getClientRects()</code>,<code>elem.getBoundingClientRect()</code></li></ul><h5 id="滚动的东西"><a href="#滚动的东西" class="headerlink" title="滚动的东西"></a>滚动的东西</h5><ul><li><code>elem.scrollBy()</code>,<code>elem.scrollTo()</code></li><li><code>elem.scrollIntoView()</code>,<code>elem.scrollIntoViewIfNeeded()</code></li><li><code>elem.scrollWidth</code>,<code>elem.scrollHeight</code></li><li><code>elem.scrollLeft</code>,<code>elem.scrollTop</code>也, 设置它们</li></ul><h5 id="设置焦点"><a href="#设置焦点" class="headerlink" title="设置焦点"></a>设置焦点</h5><ul><li><code>elem.focus()</code> （<a href="https://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/core/dom/element.cc;l=4206-4225;drc=d685ea3c9ffcb18c781bc3a0bdbb92eb88842b1b">来源</a>）</li></ul><h5 id="还…"><a href="#还…" class="headerlink" title="还…"></a>还…</h5><ul><li><code>elem.computedRole</code>,<code>elem.computedName</code></li><li><code>elem.innerText</code>（<a href="https://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/core/editing/element_inner_text.cc;l=462-468;drc=d685ea3c9ffcb18c781bc3a0bdbb92eb88842b1b">来源</a>）</li></ul><h3 id="获取窗口尺寸"><a href="#获取窗口尺寸" class="headerlink" title="获取窗口尺寸"></a>获取窗口尺寸</h3><ul><li><code>window.scrollX</code>,<code>window.scrollY</code></li><li><code>window.innerHeight</code>,<code>window.innerWidth</code></li><li>window.visualViewport.height/width/offsetTop/offsetLeft(<a href="https://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/core/frame/visual_viewport.cc;l=435-461;drc=a3c165458e524bdc55db15d2a5714bb9a0c69c70?originalUrl=https://cs.chromium.org/">源码</a>)</li></ul><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><ul><li><code>document.scrollingElement</code>只强制风格</li><li><code>document.elementFromPoint</code></li></ul><h3 id="形式：设置选择-焦点"><a href="#形式：设置选择-焦点" class="headerlink" title="形式：设置选择+焦点"></a>形式：设置选择+焦点</h3><ul><li><code>inputElem.focus()</code></li><li><code>inputElem.select()</code>,<code>textareaElem.select()</code></li></ul><h3 id="鼠标事件：读取偏移数据"><a href="#鼠标事件：读取偏移数据" class="headerlink" title="鼠标事件：读取偏移数据"></a>鼠标事件：读取偏移数据</h3><ul><li><code>mouseEvt.layerX</code>, <code>mouseEvt.layerY</code>, <code>mouseEvt.offsetX</code>, <code>mouseEvt.offsetY</code>(<a href="https://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/core/events/mouse_event.cc;l=476-487;drc=52fd700fb07a43b740d24595d42d8a6a57a43f81">来源</a>)</li></ul><h3 id="调用-getComputedStyle"><a href="#调用-getComputedStyle" class="headerlink" title="调用 getComputedStyle()"></a>调用 getComputedStyle()</h3><p><code>window.getComputedStyle()</code>通常会强制重新计算样式。</p><p><code>window.getComputedStyle()</code>通常也会强制布局。</p><details style="box-sizing: border-box; display: block; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 47); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;; font-size: 16px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"><summary style="box-sizing: border-box; display: list-item; cursor: pointer;"><font style="box-sizing: border-box; vertical-align: inherit;"><font style="box-sizing: border-box; vertical-align: inherit;">gCS() 强制布局条件的详细信息</font></font></summary></details><h3 id="获取Range维度"><a href="#获取Range维度" class="headerlink" title="获取Range维度"></a>获取<code>Range</code>维度</h3><ul><li><code>range.getClientRects()</code>,<code>range.getBoundingClientRect()</code></li></ul><h3 id="SVG"><a href="#SVG" class="headerlink" title="SVG"></a>SVG</h3><p>相当多的属性/方法强制，但我没有列出详尽的清单。此列表不完整：</p><ul><li>SVGLocatable: <code>computeCTM()</code>,<code>getBBox()</code></li><li>SVGTextContent: <code>getCharNumAtPosition()</code>, <code>getComputedTextLength()</code>, <code>getEndPositionOfChar()</code>, <code>getExtentOfChar()</code>, <code>getNumberOfChars()</code>, <code>getRotationOfChar()</code>, <code>getStartPositionOfChar()</code>, <code>getSubStringLength()</code>,<code>selectSubString()</code></li><li>SVG使用：<code>instanceRoot</code></li></ul><p>使用下面的“铬源树链接”自行探索！</p><h3 id="内容可编辑"><a href="#内容可编辑" class="headerlink" title="内容可编辑"></a>内容可编辑</h3><ul><li>很多很多东西，…包括将图像复制到剪贴板（<a href="https://source.chromium.org/search?q=UpdateStyleAndLayout%20-f:test&amp;ss=chromium/chromium/src:third_party/blink/renderer/core/editing/">来源</a>）</li></ul><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><ul><li><p>仅当文档已更改并使样式或布局无效时，重排才会产生成本。通常，这是因为 DOM 已更改（修改了类，添加/删除了节点，甚至添加了 :focus 之类的伪类）。</p></li><li><p>如果强制布局，则必须先重新计算样式。所以强制布局会触发这两种操作。它们的成本很大程度上取决于内容/情况，但通常两种操作的成本相似。</p></li><li><p>你应该怎么做？好吧，</p><pre class="line-numbers language-none"><code class="language-none">More on forced layout<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下面的部分更详细地介绍了所有内容，但简短的版本是：</p><ol><li><code>for</code>强制布局和更改 DOM 的循环是最糟糕的，避免它们。</li><li>使用 DevTools 性能面板查看发生这种情况的位置。您可能会惊讶地看到您的应用程序代码和库代码出现这种情况的频率。</li><li>批量写入和读取 DOM（通过<a href="https://github.com/wilsonpage/fastdom">FastDOM</a>或虚拟 DOM 实现）。在帧的开头（非常开始<code>rAF</code>，滚动处理程序等）阅读您的指标，当数字仍然与上次布局完成时相同。</li></ol></li></ul><hr><p>卫报的时间线痕迹。Outbrain 正在反复强制布局，可能是在一个循环中。</p><h5 id="跨浏览器"><a href="#跨浏览器" class="headerlink" title="跨浏览器"></a>跨浏览器</h5><ul><li>以上数据是通过阅读 Blink 源码构建的，因此对于 Chrome、Opera、Brave、Edge 和大多数安卓浏览器都是如此。<a href="https://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/core/dom/document.h;l=657-680;drc=d685ea3c9ffcb18c781bc3a0bdbb92eb88842b1b">您可以在 Chromium 源代码树中自行</a>浏览它们。</li><li><a href="http://gent.ilcore.com/2011/03/how-not-to-trigger-layout-in-webkit.html">Tony Gentilcore 的 Layout Triggering List</a>是针对 2011 WebKit 的，通常与上述一致。</li><li>现代 WebKit 的强制布局实例大多是一致的：<a href="https://github.com/WebKit/webkit/search?q=updateLayoutIgnorePendingStylesheets&amp;utf8=%E2%9C%93"><code>updateLayoutIgnorePendingStylesheets</code>- GitHub 搜索 - WebKit/WebKit</a></li><li>Gecko 的回流似乎是通过 FrameNeedsReflow 请求的。结果：<a href="https://searchfox.org/mozilla-central/search?q=FrameNeedsReflow&amp;case=false&amp;regexp=false&amp;path=%5E%5B%5E%5C0%5D"><code>FrameNeedsReflow</code>- Mozilla-central searchfox</a></li><li>没有关于 IE 或 EdgeHTML 的具体数据，但它们可能大致相同，因为这些属性的返回值是指定的。</li></ul><h4 id="更多关于强制布局"><a href="#更多关于强制布局" class="headerlink" title="更多关于强制布局"></a>更多关于强制布局</h4><ul><li><strong>避免布局抖动 — Web 基础知识</strong>识别和修复此主题的<strong>最佳</strong>资源。</li><li><a href="http://csstriggers.com/">CSS 触发器</a>- 涵盖了设置/更改给定 CSS 值所需的操作。然而，上面的列表都是关于从 JavaScript 同步强制紫色/绿色/深绿色圆圈的原因。</li><li><a href="https://mattandre.ws/2014/05/really-fixing-layout-thrashing/">修复现实世界中的布局抖动| 马特·安德鲁斯</a></li><li><a href="https://developer.chrome.com/devtools/docs/demos/too-much-layout">时间轴演示：诊断强制同步布局 - Google Chrome</a></li><li><a href="http://wilsonpage.co.uk/preventing-layout-thrashing/">防止“布局颠簸” | 威尔逊页</a></li><li><a href="https://github.com/wilsonpage/fastdom">威尔逊佩奇/fastdom</a></li><li><a href="http://www.phpied.com/rendering-repaint-reflowrelayout-restyle/">渲染：重绘、回流/重新布局、重新设计 / Stoyan</a></li><li><a href="http://blog.fogcreek.com/we-spent-a-week-making-trello-boards-load-extremely-fast-heres-how-we-did-it/">我们花了一周时间让 Trello 看板加载速度非常快。这是我们如何做到的。- 雾溪博客</a></li><li><a href="https://developers.google.com/speed/articles/reflow?hl=en">最小化浏览器回流 | PageSpeed 见解 | 谷歌开发者</a></li><li><a href="https://developer.apple.com/videos/wwdc/2012/?id=601">在 iOS 上优化 UIWebViews 和网站中的 Web 内容</a></li><li><a href="http://www.html5rocks.com/en/tutorials/speed/layers/">Chrome 中的加速渲染</a></li><li><a href="https://www.igvita.com/slides/2012/web-performance-for-the-curious/">好奇的网络性能</a></li><li><a href="http://jankfree.org/">免费</a></li></ul><hr><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction">谷歌开发者文档</a></p><p>JavaScript高性能</p><p>MDN</p>]]></content>
      
      
      <categories>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack 工作原理</title>
      <link href="/2020/03/1462045.html"/>
      <url>/2020/03/1462045.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="什么是webpack"><a href="#什么是webpack" class="headerlink" title="什么是webpack"></a>什么是webpack</h3><ol><li>webpack是一个javascript的静态模块打包工具</li><li>webpack里一切文件皆模块，通过loader转换文件，通过plugin注入钩子</li><li>最后输出由多个模块组合成的文件，webpack专注构建模块化项目</li></ol><h3 id="webpack的优点是什么？"><a href="#webpack的优点是什么？" class="headerlink" title="webpack的优点是什么？"></a>webpack的优点是什么？</h3><ol><li>专注于处理模块化的项目，能做到开箱即用，一步到位</li><li>通过plugin扩展，完整好用又不失灵活</li><li>通过loaders扩展, 可以让webpack把所有类型的文件都解析打包</li><li>社区庞大活跃，经常引入紧跟时代发展的新特性，能为大多数场景找到已有的开源扩展</li></ol><h2 id="webpack-开发服务器-为何学"><a href="#webpack-开发服务器-为何学" class="headerlink" title="webpack-开发服务器-为何学"></a>webpack-开发服务器-为何学</h2><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>开发时, 快速自动打包查看效果</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>每次修改代码, 重新打包, 才能看到最新的效果</p><p>实际工作中, 打包非常费时 (10-30s) 之间, 影响开发效率</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><ol><li>构建入口和所有模块依赖关系图</li><li>磁盘读取对应的文件到内存, 才能加载</li><li>用对应的 loader 进行处理和翻译</li><li>将处理完的内容, 输出到磁盘指定文件内</li><li>以后代码变化, <strong>从1重新开始</strong></li></ol><h2 id="webpack-构建流程分析"><a href="#webpack-构建流程分析" class="headerlink" title="webpack 构建流程分析"></a>webpack 构建流程分析</h2><img src="https://babayetu-1309205424.cos.ap-shanghai.myqcloud.com/blogimgs/89747816-fe344280-daf2-11ea-820a-6a1a99e34f14.png"><h2 id="webpack-构建流程"><a href="#webpack-构建流程" class="headerlink" title="webpack 构建流程"></a>webpack 构建流程</h2><p>Webpack 的运行流程是一个串行的过程,从启动到结束会依次执行以下流程 :</p><ol><li>初始化参数：从配置文件和 Shell 语句中读取与合并参数,得出最终的参数。</li><li>开始编译：用上一步得到的参数初始化 Compiler 对象,加载所有配置的插件,执行对象的 run 方法开始执行编译。</li><li>确定入口：根据配置中的 entry 找出所有的入口文件。</li><li>编译模块：从入口文件出发,调用所有配置的 Loader 对模块进行翻译,再找出该模块依赖的模块,再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理。</li><li>完成模块编译：在经过第 4 步使用 Loader 翻译完所有模块后,得到了每个模块被翻译后的最终内容以及它们之间的依赖关系。</li><li>输出资源：根据入口和模块之间的依赖关系,组装成一个个包含多个模块的 Chunk,再把每个 Chunk 转换成一个单独的文件加入到输出列表,这步是可以修改输出内容的最后机会。</li><li>输出完成：在确定好输出内容后,根据配置确定输出的路径和文件名,把文件内容写入到文件系统。</li></ol><p>在以上过程中,Webpack 会在特定的时间点广播出特定的事件,插件在监听到感兴趣的事件后会执行特定的逻辑,并且插件可以调用 Webpack 提供的 API 改变 Webpack 的运行结果。</p><p>看一下我们脚手架的基本配置信息</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// webpack 是基于 Node 的静态模块打包工具, 所有配置就是向外暴露一个配置对象</span><span class="token comment">// 要遵循 CommonJS 规范</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token comment">// 目标1: 使用插件</span><span class="token comment">// 1.1 引入插件</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token comment">// 改成 ES6 的模块化导入导出规范</span><span class="token comment">// import path from 'path'</span><span class="token comment">// model module</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment">// mode: 指定打包的模式</span>  <span class="token comment">// development: 开发模式, webpack 不会压缩混淆代码, 打包速度很快</span>  <span class="token comment">// production: 上线模式, 进行压缩混淆代码, 打包速度较慢</span>  mode<span class="token operator">:</span> <span class="token string">'production'</span><span class="token punctuation">,</span>  <span class="token comment">// 配置对象</span>  <span class="token comment">// 配置入口, 可以是相对路径</span>  entry<span class="token operator">:</span> <span class="token string">'./src/main.js'</span><span class="token punctuation">,</span>  output<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 配置出口, 必须是绝对路径</span>    <span class="token comment">// __dirname: 表示当前文件所在目录的绝对路径</span>    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 路径</span>    filename<span class="token operator">:</span> <span class="token string">'bundle.js'</span> <span class="token comment">// 文件名</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">// 1.2 配置插件</span>  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token comment">// 扩展: 将 HTML 自动复制并引入 bundle.js 文件, 同时设置 defer 属性</span>    <span class="token comment">// defer 属性: 等页面资源加载完毕后才执行引入的 js 文件</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment">// 自动从指定的位置复制 HTML 到 dist 目录</span>      template<span class="token operator">:</span> <span class="token string">'./public/index.html'</span> <span class="token comment">// 指定 HTML 路径,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// 目标2: 使用 loader 来处理 css 文件</span>  module<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 配置 loader 的属性</span>    rules<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">// 配置 loader 的规则</span>      <span class="token comment">// 一个对象表示一条规则</span>      <span class="token punctuation">{</span>        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>        use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment">// 目标3: 使用 loader 来处理 less 文件</span>      <span class="token punctuation">{</span>        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.less$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>        use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'less-loader'</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment">// 目标4: 使用 loader 来处理图片文件</span>      <span class="token punctuation">{</span>        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(png|jpg|gif|jpeg)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>        type<span class="token operator">:</span> <span class="token string">'asset'</span> <span class="token comment">// 自动处理图片, 小于 8K 打包成 base64, 否则直接复制图片</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(woff|svg|eot|ttf|woff2)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>        type<span class="token operator">:</span> <span class="token string">'asset/resource'</span><span class="token punctuation">,</span> <span class="token comment">// 永远不会转成 base64 直接复制文件到出口</span>        generator<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 生成器</span>          <span class="token comment">// [name]: 占位符变量, 最终会被替换成原来的文件名</span>          <span class="token comment">// [hash]: 生成 hash 值</span>          <span class="token comment">// [ext]: 原先的后缀名</span>          filename<span class="token operator">:</span> <span class="token string">'fonts/[name]-[hash:4][ext]'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.m?js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        exclude<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(node_modules|bower_components)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        use<span class="token operator">:</span> <span class="token punctuation">{</span>          loader<span class="token operator">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span>          options<span class="token operator">:</span> <span class="token punctuation">{</span>            presets<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'@babel/preset-env'</span><span class="token punctuation">]</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>    port<span class="token operator">:</span> <span class="token number">3000</span><span class="token punctuation">,</span> <span class="token comment">// 端口号</span>    open<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 第一次运行自动打开浏览器</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// o.output.path</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>babel</p><hr><h4 id="找出所有依赖模块"><a href="#找出所有依赖模块" class="headerlink" title="找出所有依赖模块"></a>找出所有依赖模块</h4><p>Babel 提供了@babel/traverse(遍历)方法维护这 AST 树的整体状态,我们这里使用它来帮我们找出依赖模块。</p><h4 id="AST-转换为-code"><a href="#AST-转换为-code" class="headerlink" title="AST 转换为 code"></a>AST 转换为 code</h4><p>将 AST 语法树转换为浏览器可执行代码,我们这里使用@babel/core 和 @babel/preset-env。</p><h5 id="递归解析所有依赖项-生成依赖关系图"><a href="#递归解析所有依赖项-生成依赖关系图" class="headerlink" title="递归解析所有依赖项,生成依赖关系图"></a>递归解析所有依赖项,生成依赖关系图</h5><h3 id="重写-require-函数-输出-bundle"><a href="#重写-require-函数-输出-bundle" class="headerlink" title="重写 require 函数,输出 bundle"></a>重写 require 函数,输出 bundle</h3><hr><p>webpack默认入口和出口是什么?</p><p>默认入口: src/index.js</p><p>默认出口: dist/main.js</p><hr><h3 id="说一下-webpack-的热更新原理"><a href="#说一下-webpack-的热更新原理" class="headerlink" title="说一下 webpack 的热更新原理"></a>说一下 webpack 的热更新原理</h3><p> webpack 的热更新又称热替换（Hot Module Replacement），缩写为 HMR。这个机制可以做到不用刷新浏览器而将新变更的模块替换掉旧的模块。</p><p> HMR的核心就是客户端从服务端拉去更新后的文件，准确的说是 chunk diff (chunk 需要更新的部分)，实际上 WDS(webpack-dev-server) 与浏览器之间维护了一个 Websocket，当本地资源发生变化时，WDS 会向浏览器推送更新，并带上构建时的 hash，让客户端与上一次资源进行对比。客户端对比出差异后会向 WDS 发请求来获取更改内容(文件列表、hash)，这样客户端就可以再借助这些信息继续向 WDS 发起 jsonp 请求获取该chunk的增量更新。</p><p> 后续的部分(拿到增量更新之后如何处理？哪些状态该保留？哪些又需要更新？)由 HotModulePlugin 来完成，提供了相关 API 以供开发者针对自身场景进行处理，像react-hot-loader 和 vue-loader 都是借助这些 API 实现 HMR。</p><hr><h3 id="有哪些常见的Loader？他们是解决什么问题的？"><a href="#有哪些常见的Loader？他们是解决什么问题的？" class="headerlink" title="有哪些常见的Loader？他们是解决什么问题的？"></a>有哪些常见的Loader？他们是解决什么问题的？</h3><p>1、 file-loader：把文件输出到一个文件夹中，在代码中通过相对 URL 去引用输出的文件</p><p>2、 url-loader：和 file-loader 类似，但是能在文件很小的情况下以 base64 的方式把文件内容注入到代码中去</p><p>3、 source-map-loader：加载额外的 Source Map 文件，以方便断点调试</p><p>4、 image-loader：加载并且压缩图片文件</p><p>5、 babel-loader：把 ES6 转换成 ES5</p><p>6、 css-loader：加载 CSS，支持模块化、压缩、文件导入等特性</p><p>7、 style-loader：把 CSS 代码注入到 JavaScript 中，通过 DOM 操作去加载 CSS。</p><p>8、 eslint-loader：通过 ESLint 检查 JavaScript 代码</p><hr><h3 id="Loader和Plugin的不同？"><a href="#Loader和Plugin的不同？" class="headerlink" title="Loader和Plugin的不同？"></a>Loader和Plugin的不同？</h3><p><strong>1)</strong> <strong>不同的作用</strong></p><p> loader直译为”加载器”。webpack将一切文件视为模块，但是webpack原生是只能解析js文件，如果想将其他文件也打包的话，就会用到loader。 所以loader的作用是让webpack拥有了加载和解析非JavaScript文件的能力。</p><p> Plugin直译为”插件”。Plugin可以扩展webpack的功能，让webpack具有更多的灵活性。 在 webpack 运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 webpack 提供的 API 改变输出结果。</p><p><strong>2)</strong> <strong>不同的用法</strong></p><p> Loader在module.rules中配置，也就是说他作为模块的解析规则而存在。 类型为数组，每一项都是一个Object，里面描述了对于什么类型的文件（test），使用什么加载(loader)和使用的参数（options）</p><p> Plugin在plugins中单独配置。 类型为数组，每一项是一个plugin的实例，参数都通过构造函数传入。</p>]]></content>
      
      
      <categories>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack 原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue批量注册组件的方法</title>
      <link href="/2020/03/0322900.html"/>
      <url>/2020/03/0322900.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>当需要很多注册许多公共组件时候,这个时候我们应该抽离,而不是继续使用Vue.use()注册</p><p>代码.在公共组件根目录下</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment">// const  requireComponent=require.context('公共组件的目录','是否深层次查找',正则[以.vue文件结尾的都是我们要找的])</span><span class="token keyword">const</span> requireComponent <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">'./'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.vue$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>requireComponent<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> defaultCom <span class="token operator">=</span> <span class="token function">requireComponent</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">.</span>default <span class="token comment">//  获取的就是组件暴露出来的对象</span>  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>defaultCom<span class="token punctuation">.</span>name<span class="token punctuation">,</span> defaultCom<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在其他公共组件种开启命名:保持与文件夹名称一致即可</p>]]></content>
      
      
      <categories>
          
          <category> Vue,js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue批量组件的注册方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React-Router</title>
      <link href="/2020/02/1736407.html"/>
      <url>/2020/02/1736407.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>React路由拥有简单的API和强大的动态路由匹配,以及简历正确的过度处理.</p><p>路由与选项卡的区别:</p><ul><li>动态匹配存储数据</li><li>避免了重复性的渲染提高性能</li></ul><p>在使用路由的时候去了解SPA:</p><ul><li><p>SPA： <code>Single Page Application</code> 单页面应用程序，整个应用中只有一个页面（index.html）。</p></li><li><p>MPA : <code>Multiple Page Application</code> 多页面应用程序，整个应用中有很多个页面（*.html）。</p></li><li><p>优势：页面响应速度快，体验好（无刷新），降低了对服务器的压力。</p><p>a，传统的多页面应用程序，每次请求服务器返回的都是一整个完整的页面。</p><p>b，单页面应用程序只有第一次会加载完整的页面，以后每次请求仅仅获取必要的数据。</p></li><li><p>缺点：不利于 SEO 搜索引擎优化。</p><p>a，因为爬虫只爬取 HTML 页面中的文本内容，不会执行 JS 代码。</p><p>b，可以通过 SSR（服务端渲染 Server Side Rendering）来解决 SEO 问题，即先在服务器端把内容渲染出来，返回给浏览器的就是纯 HTML 内容了。</p><hr></li></ul><p>安装:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save react-router<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现代的前端应用大多都是 SPA，也就是只有一个 HTML 页面的应用程序，因为它的用户体验更好、对服务器的压力更小，所以更受欢迎。</p><p>为了有效的使用单个页面来管理原来多页面的功能，前端路由应运而生，功能：让用户从一个视图（页面）导航到另一个视图（页面）。</p><ul><li>前端路由是一套<strong>映射规则</strong>，是 <strong>URL 路径 与组件之间的对应关系</strong>。</li><li>使用 React 路由简单来说就是：<strong>配置路径和组件（配对）</strong>。</li></ul><p>路由主要的两种模式:</p><ul><li><h4 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h4></li><li><h4 id="histroy"><a href="#histroy" class="headerlink" title="histroy"></a>histroy</h4></li></ul><p>react-router常用就是2种:</p><p>HashRouter:</p><p>BrowserRouter:</p><p>Readirect,必须放switch里,不然from 会失效,switch性能高,匹配到第一个route需求</p><hr><h4 id="Router-详细说明"><a href="#Router-详细说明" class="headerlink" title="Router 详细说明"></a>Router 详细说明</h4><ul><li><p>常用有两种 Router：<code>HashRouter</code> 和 <code>BrowserRouter</code>，用来包<strong>裹整个应用</strong>，一个 React 应用只需要使用一次。</p></li><li><p>HashRouter：使用 URL 的哈希值实现（<code>http://localhost:3000/#/first</code>）</p><p>是通过监听 window 的 <code>hashchange</code> 事件来实现的。</p></li><li><p>BrowserRouter：使用 H5 的 history API 实现（<code>http://localhost:3000/first</code>）</p><p>是通过监听 window 的 <code>popstate</code> 事件来实现的。</p></li></ul><hr><p>安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> react-router-dom@5.3.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>提供核心组件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">import</span> <span class="token punctuation">{</span>HashRouter,Route,Link<span class="token punctuation">}</span> from <span class="token string">'react-router-dom'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>包裹整个引用</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">HashRouter</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">App</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">HashRouter</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>指定导航链接</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>nav-link active<span class="token punctuation">'</span></span> <span class="token attr-name">aria-current</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>page<span class="token punctuation">'</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>/whertogo<span class="token punctuation">'</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    去哪儿</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用Route指定路由规则</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>/wheretogo<span class="token punctuation">'</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>wheretogo<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="路由的执行过程"><a href="#路由的执行过程" class="headerlink" title="路由的执行过程"></a>路由的执行过程</h4><ol><li>点击 Link 组件（a 标签），浏览器地址栏中的 url 发生变化。</li><li>ReactRouter 通过 <code>hashchange</code> 或 <code>popState</code> 监听到了地址栏 url 的变化。</li><li>ReactRouter 内部遍历所有 Route 组件，使用路由规则（path）与 pathname（hash）进行匹配。</li><li>当路由规则（path）能够匹配地址栏中的 pathname（hash）时，就展示该 Route 对应的组件。</li></ol><hr><h4 id="Link-与-NavLink区别"><a href="#Link-与-NavLink区别" class="headerlink" title="Link 与 NavLink区别"></a>Link 与 NavLink区别</h4><ul><li><p><code>Link</code> 组件最终会渲染成 a 标签，用于指定路由导航。</p><p>1，to 属性，将来会渲染成 a 标签的 href 属性。</p><p>2，<code>Link</code> 组件无法实现导航的高亮效果。</p></li><li><p><code>NavLink</code> 组件，一个更特殊的 <code>Link</code> 组件，可以用于指定当前导航高亮。</p><p>1，to：用于指定地址，会渲染成 a 标签的 href 属性。</p><p>2，activeClass：用于指定高亮的类名，默认 <code>active</code>。</p><p>3，exact：精确匹配，表示必须精确匹配类名才会应用 class，默认是模糊模糊匹配。</p></li></ul><p>📝</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue渲染富文本</title>
      <link href="/2020/01/1415349.html"/>
      <url>/2020/01/1415349.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>安装富文本编辑器插件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i vue-quill-editor@3.0.6 -S <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>导入插件及 css</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> VueQuillEditor <span class="token keyword">from</span> <span class="token string">'vue-quill-editor'</span><span class="token keyword">import</span> <span class="token string">'quill/dist/quill.core.css'</span><span class="token keyword">import</span> <span class="token string">'quill/dist/quill.snow.css'</span><span class="token keyword">import</span> <span class="token string">'quill/dist/quill.bubble.css'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueQuillEditor<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>文章内容<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>quill-editor</span>       <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>artListForm.content<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> //artListForm vue中v-bind绑定给el-form变量    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>quill-editor</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当富文本高度出现塌陷时,通过给ql-editor添加min-height</p><p>scope :给所有元素加上 v-data-hash 给所有选择器加上[v-data-hash]</p><p>因为: scoped 仅本组件的元素而不会污染全局.</p><p>因此Vue提供 /deep/</p><p> 原理:深度作用选择器:只作用于 css 会在前面加上 [data-v-hash]  成为后代选择器: 从交集变成后代选择器</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">/deep/ .ql-editor</span><span class="token punctuation">{</span>  <span class="token property">min-height</span><span class="token punctuation">:</span>300px<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 富文本渲染 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>for...in &amp; for...of 使用场景</title>
      <link href="/2020/01/1433851.html"/>
      <url>/2020/01/1433851.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>如果用一句话概况:</p><p>for…of 不能循环普通对象 需要搭配Object.keys(),for…of 是es6引入修复es5 for…in 的不足,</p><p>for…in 都可以循环,循环的是key 推荐循环对象属性用for…in,循环数组用for…of.</p><hr><p>显然本篇不会这么介绍就完事.</p><p>首先我们应该了解什么是迭代器以及<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Iterators_and_Generators">生成器</a>,继而去了解迭代对象,再去创建迭代循环,为自定义的迭代钩子去执行不同的语句</p><hr><p>在 JavaScript 中，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Iterators_and_Generators">迭代器</a>是一个对象，它定义一个序列，并在终止时可能返回一个返回值。 更具体地说，迭代器是通过使用 <code>next()</code> 方法实现 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol">Iterator protocol</a> 的任何一个对象，该方法返回具有两个属性的对象： <code>value</code>，这是序列中的 next 值；和 <code>done</code> ，如果已经迭代到序列中的最后一个值，则它为 <code>true</code> 。如果 <code>value</code> 和 <code>done</code> 一起存在，则它是迭代器的返回值。</p><h2 id="可迭代对象"><a href="#可迭代对象" class="headerlink" title="可迭代对象"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#%E5%86%85%E7%BD%AE%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%AF%B9%E8%B1%A1">可迭代对象</a></h2><p>内置可迭代对象:<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String"><code>String</code></a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array"><code>Array</code></a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"><code>TypedArray</code></a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map"><code>Map</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set"><code>Set</code></a>，它们的原型对象都实现了 <code>@@``iterator</code> 方法。</p><p>迭代器可用于:</p><ul><li><p>可以展开可迭代对象:初始化数组或者函数调用的参数列表</p></li><li><p>可以用于解构赋值</p></li><li><p>迭代map对象的时候 返回的是键值对</p><p>在for/of循环中可以直接使用解构赋值<br>只想循环键或者值用object key objectvalues操作可迭代对象类似array set map .</p></li></ul><p>JavaScript迭代三种类型</p><ul><li>可迭代对象</li><li>迭代器对象</li><li>迭代结果对象(保存每次迭代结果)</li></ul><p>言归正传.</p><hr><p>无论是for…in还是for…of语句都是迭代一些东西。 它们之间的主要区别在于它们的迭代方式。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...in"><code>for...in</code></a> 语句以任意顺序迭代对象的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Enumerability_and_ownership_of_properties">可枚举属性</a>。</p><p><code>for...of</code> 语句遍历<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Iterators_and_Generators#iterables">可迭代对象</a>定义要迭代的数据</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">objCustom</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">arrCustom</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">const</span> iterable <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span>iterable<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> i <span class="token keyword">in</span> iterable<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">// logs 0, 1, 2, "foo", "arrCustom", "objCustom"</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> i <span class="token keyword">in</span> iterable<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>iterable<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">// logs 0, 1, 2, "foo"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> i <span class="token keyword">of</span> iterable<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">// logs 3, 5, 7</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于为什么使用for…in:MDN的官方解释是:</p><blockquote><p><code>for ... in</code>是为遍历对象属性而构建的，不建议与数组一起使用，数组可以用<code>Array.prototype.forEach()</code>和<code>for ... of</code>，那么<code>for ... in</code>的到底有什么用呢？</p><p>它最常用的地方应该是用于调试，可以更方便的去检查对象属性（通过输出到控制台或其他方式）。</p><p>尽管对于处理存储数据，数组更实用些，但是你在处理有<code>key-value</code>数据（比如属性用作“键”），</p><p>需要检查其中的任何键是否为某值的情况时，还是推荐用<code>for ... in</code>。</p></blockquote><p>下面的函数接受一个对象作为参数。被调用时迭代传入对象的所有可枚举属性然后返回一个所有属性名和其对应值的字符串。</p><h4 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span> c<span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> prop <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"obj."</span> <span class="token operator">+</span> prop <span class="token operator">+</span> <span class="token string">" = "</span> <span class="token operator">+</span> obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//console.log(`obj.${prop}=${obj[prop]}`);</span><span class="token punctuation">}</span><span class="token comment">// Output:</span><span class="token comment">// "obj.a = 1"</span><span class="token comment">// "obj.b = 2"</span><span class="token comment">// "obj.c = 3"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="for-of-不能直接遍历对象"><a href="#for-of-不能直接遍历对象" class="headerlink" title="for of 不能直接遍历对象"></a>for of 不能直接遍历对象</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span> c<span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> prop <span class="token keyword">of</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"obj."</span> <span class="token operator">+</span> prop <span class="token operator">+</span> <span class="token string">" = "</span> <span class="token operator">+</span> obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//console.log(`obj.${prop}=${obj[prop]}`);</span><span class="token punctuation">}</span><span class="token constant">VM293</span><span class="token operator">:</span><span class="token number">3</span> Uncaught TypeError<span class="token operator">:</span> obj is not iterable    at <span class="token operator">&lt;</span>anonymous<span class="token operator">&gt;</span><span class="token operator">:</span><span class="token number">3</span><span class="token operator">:</span><span class="token number">18</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配合object-keys-返回键值"><a href="#配合object-keys-返回键值" class="headerlink" title="配合object.keys.返回键值"></a>配合object.keys.返回键值</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>    b<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>    c<span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> arr <span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//1</span><span class="token comment">//2</span><span class="token comment">//3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> arr <span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//a</span><span class="token comment">//b</span><span class="token comment">//c</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结论"><a href="#结论" class="headerlink" title="结论:"></a>结论:</h2><h4 id="for-in-都可以遍历-当遍历对象的时候返回的是键值-遍历数组的时候返回的是索引"><a href="#for-in-都可以遍历-当遍历对象的时候返回的是键值-遍历数组的时候返回的是索引" class="headerlink" title="for in 都可以遍历,当遍历对象的时候返回的是键值,遍历数组的时候返回的是索引"></a>for in 都可以遍历,当遍历对象的时候返回的是键值,遍历数组的时候返回的是索引</h4><h4 id="for-of-不能直接遍历普通对象-需要配合Object-keys-才能取键值-而遍历数组返回值是键值"><a href="#for-of-不能直接遍历普通对象-需要配合Object-keys-才能取键值-而遍历数组返回值是键值" class="headerlink" title="for of 不能直接遍历普通对象,需要配合Object.keys()才能取键值,而遍历数组返回值是键值"></a>for of 不能直接遍历普通对象,需要配合Object.keys()才能取键值,而遍历数组返回值是键值</h4>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript迭代器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript中attritube与proterties的区别</title>
      <link href="/2020/01/0224240.html"/>
      <url>/2020/01/0224240.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><a href="https://stackoverflow.com/questions/6003819/what-is-the-difference-between-properties-and-attributes-in-html">StackOverflow给出的回答</a></p><p>在 jQuery 1.6.1 中进行更改后，我一直试图在 HTML 中定义属性和属性之间的区别。</p><p>查看<a href="http://blog.jquery.com/2011/05/12/jquery-1-6-1-released/">jQuery 1.6.1 发行说明</a>（靠近底部）上的列表，似乎可以将 HTML 属性和属性分类如下：</p><p>propertype：所有具有布尔值或 UA 计算的属性，例如 selectedIndex。属性：可以添加到既不是布尔值也不包含 UA 生成值的 HTML 元素的“属性”。</p><p>attritube：所有具有布尔值或UA计算值的属性，如selectedIndex。</p></blockquote><p align="right">  回答时间:2011-5-14  </p><p>在编写 HTML 源代码时，您可以在 HTML 元素上定义<em><strong>attributes</strong></em> <em>。然后，一旦浏览器解析您的代码，就会创建一个相应的 DOM 节点。这个节点是一个对象，因此它有 <strong>properties</strong></em>。</p><hr><p>对于给定的 DOM 节点对象，<em><strong>properties</strong></em>是该对象的<em><strong>properties</strong></em><br></p><p><em><strong>attributes</strong></em>是该对象 <em><strong>attributes</strong></em> 的<em><strong>property</strong></em>的元素。</p><hr><p>当为给定的 HTML 元素创建 DOM 节点时，它的许多属性都与具有相同或相似名称的属性相关，但这不是一对一的关系。例如，对于这个 HTML 元素：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>the-input<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Name:<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><p>在评估 HTML 中的区别之前，让我们先看看这些词的定义：</p><p><strong>英文定义：</strong></p><ul><li>Attributes是指对象的附加信息。</li><li>Properties 是描述对象的特征。</li></ul><p><strong>在 HTML 上下文中：</strong></p><p>当浏览器解析HTML时，它创建了一个树状数据结构，它基本上是HTML在内存中的表示。它的树数据结构包含的节点是HTML元素和文本。与此相关的属性和属性如下:</p><ul><li><strong>Attributes</strong>是附加信息，我们可以将其放入 HTML 以 <strong>初始化</strong>某些 <strong>DOM  properties</strong>。</li><li><strong>Properties</strong> 是在浏览器解析 HTML 并生成 DOM 时形成的。DOM 中的每个元素都有自己的一组属性，这些properties都由浏览器设置。其中一些属性的初始值可以由 HTML 属性设置。每当影响渲染页面的 DOM 属性发生变化时，页面将<strong>立即重新渲染</strong></li></ul><p>而且有不同的DOM元素不同的属性。例如，<input>元素有一个value属性，而</p><div>属性没有这个值。<p></p><p>认识到这些属性的映射不是 1 到 1 的也很重要。换句话说，并非我们在 HTML 元素上提供的每个属性都具有类似的命名 DOM property。</p><p>此外具有不同的 DOM 元素不同的properties。例如，一个<code>&lt;input&gt;</code>元素具有一个properties上不存在的 value<code>&lt;div&gt;</code>properties。</p></div>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS属性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>防抖和节流</title>
      <link href="/2019/12/1535375.html"/>
      <url>/2019/12/1535375.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>什么是防抖?</p><p>运用场景:</p><p>通常我们搜索引擎的在用户输入时候都应用了防抖策略.</p><p>(视口变化页面,onScroll,多次点击,window的resize),为了解决或缓存延迟,卡死或卡顿的现象,让实现的防抖只触发一次.目的:防止重复点击触发事件</p><p>原理:在事件被触发N秒后在执行回调函数,如果这n秒内又被触发,则重新计时.</p><p>demo:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span>  <span class="token function">unshake</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span>delay</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//fn 要节流的函数,规定时间</span>    <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">clearTimer</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>            <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>什么是节流?</p><p>运用场景:</p><ul><li>懒加载时要监听计算<a href="https://www.zhihu.com/search?q=%E6%BB%9A%E5%8A%A8%E6%9D%A1&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:%22430011875%22%7D">滚动条</a>的位置，但不必每次滑动都触发，可以降低计算的频率，而不必去浪费 CPU 资源；</li><li>函数执行一次后,规定时间内不会执行第二次(若一直触发,每隔n秒值触发一次)</li></ul><p>demo:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">throttle</span> <span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span>wait<span class="token operator">=</span><span class="token number">50</span></span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> previous <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> now <span class="token operator">=</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>now<span class="token operator">-</span>previous<span class="token operator">&gt;</span>wait<span class="token punctuation">)</span><span class="token punctuation">{</span>            previous<span class="token operator">=</span>now            <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>args<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> betterFn<span class="token operator">=</span><span class="token function">throttle</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>cosole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'fn函数执行了'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token function">setInterval</span><span class="token punctuation">(</span>betterFn<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>or</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">throttling</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> lastTime <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment">//使用闭包避免lastTime每次都初始化</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> nowTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nowTime <span class="token operator">-</span> lastTime <span class="token operator">&gt;</span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>      lastTime <span class="token operator">=</span> nowTime <span class="token comment">//记录最后</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> throttlingFn <span class="token operator">=</span> <span class="token function">throttling</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'fn执行了'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token function">setInterval</span><span class="token punctuation">(</span>throttlingFn<span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Promise 节流 &amp;高阶防抖 写法</p><img src="https://tva1.sinaimg.cn/large/006aANDQly1gzla49sr57j30f40iudnk.jpg"><p>高频事件触发，在n秒内只会执行一次，节流会稀释函数的执行频率,等待lock的状态，如果lock状态为false，则不会再次执行语句if (!lock) return;后面的内容，直至等待setTimeout函数内容执行完毕，将lock置为true之后，才会再次执行，从而达到减少fn响应次数。</p><p><strong>理念：每次触发事件时都判断当前是否有等待执行的延时函数</strong></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>懒加载与预加载</title>
      <link href="/2019/11/153671.html"/>
      <url>/2019/11/153671.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>input相关的事件</title>
      <link href="/2019/11/1228163.html"/>
      <url>/2019/11/1228163.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>css浏览器内置方法:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">el-input:focus::-webkit-input-placeholder</span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* Mozilla Firefox 4 to 18 */</span><span class="token selector">el-input:focus:-moz-placeholder</span> <span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* Mozilla Firefox 19+ */</span><span class="token selector">el-input:focus::-moz-placeholder</span> <span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* Internet Explorer 10+ */</span><span class="token selector">el-input:focus:-ms-input-placeholder</span> <span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>js通过onfocus事件:清空placeholder占位符</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userInfo.mobile<span class="token punctuation">"</span></span>  <span class="token attr-name">οnfocus</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>this.placeholder=<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sw-6512-6988-8778<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 220px</span><span class="token punctuation">"</span></span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>监听回车事件keycode 为13,监听tab键事件为9</p><p><a href="http://www.atoolbox.net/Tool.php?Id=815">Keycode查询</a></p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> input事件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渲染图片到页面的两种方法</title>
      <link href="/2019/08/2642692.html"/>
      <url>/2019/08/2642692.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>URL.createObjectURL() 静态方法会创建一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DOMString"><code>DOMString</code></a>，其中包含一个表示参数中给出的对象的URL。这个 URL 的生命周期和创建它的窗口中的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document"><code>document</code></a> 绑定。这个新的URL 对象表示指定的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/File"><code>File</code></a> 对象或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Blob"><code>Blob</code></a> 对象。</p></blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/File/Using_files_from_web_applications#example.3a_using_object_urls_to_display_images">使用对象URL显示图片</a>.(以上MDN解释).简单的说:当传递 URL.createObjectURL 方法一个对象返回值是:一个  DOMString，包含一个对象 URL，可用于引用指定源对象的内容。</p><p>同时我们配合 $refs 操纵 DOM 给他设置 src 传递 这个url.</p><p>方法一:<em>URL.createObjectURL()</em></p><p>下面这个demo,通过点击btn 触发 input 的文件上传属性</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>文章封面<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cover_img<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span>            <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>imgRef<span class="token punctuation">"</span></span> <span class="token attr-name">注册ref属性</span>            <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../../../assets/images/666.jpg<span class="token punctuation">"</span></span>            <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cover-img<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            &lt;input            @change="ChoiceCover"            accept="image/*" //设置接收的文件类型            type="file"      //设置input 类型            style="display:none" //设置默认隐藏            ref="imgReFile"&gt;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$refs.imgReFile.click()<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>              选择封面            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">ChoiceCover</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> files <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>files      <span class="token keyword">if</span> <span class="token punctuation">(</span>files<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>artListForm<span class="token punctuation">.</span>cover_img <span class="token operator">=</span> <span class="token string">''</span> <span class="token comment">//无文件则置空,传递默认 src 图片(el-form :model="artListForm" artListForm是element ui 中v-bind绑定的给el-form表单的变量)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>imgRef<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">,</span> defaultImg<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>artListForm<span class="token punctuation">.</span>cover_img <span class="token operator">=</span> files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>   <span class="token comment">//否则传入这个文件对象给cover_img</span>        <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>imgRef<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>方法二:FileReader()的方法,new一个实例对象<blockquote><p>FileReader 对象允许Web应用程序异步读取存储在用户计算机上的文件（或原始数据缓冲区）的内容，使用 <em><strong>File 或 Blob 对象</strong></em>指定要读取的文件或数据。</p><p>其中File对象可以是来自用户在一个<input>元素上选择文件后返回的FileList对象,也可以来自拖放操作生成的 DataTransfer对象,还可以是来自在一个HTMLCanvasElement上执行mozGetAsFile()方法后返回结果。</p><p>重要提示： FileReader仅用于以安全的方式从用户（远程）系统读取文件内容 它不能用于从文件系统中按路径名简单地读取文件。 要在JavaScript中按路径名读取文件，应使用标准Ajax解决方案进行服务器端文件读取，如果读取跨域，则使用CORS权限。</p><p align="right">MDN</p><p></p></blockquote><p>通过控制台我们来查看这个实例对象有那些属性:如下图</p><img src="/2019/08/2642692/1640529611109.png" class="" width="1640529611109"><p>然后上代码</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cover_img<span class="token punctuation">"</span></span>            <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cover-img<span class="token punctuation">"</span></span>           <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>imgRef<span class="token punctuation">"</span></span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cover_img<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">v-else</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../../../assets/images/666.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cover-img<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>           <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>imgFiles<span class="token punctuation">"</span></span>           <span class="token attr-name">@change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>choiceCover<span class="token punctuation">"</span></span>           <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span>none</span><span class="token punctuation">"</span></span></span>           <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$refs.imgFiles.click()<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>small<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn-pub<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>发表文章<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>给两张图设置if-else判断语句,当用户上传图片就渲染base64,否则显示默认图片</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">choiceCover</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">const</span> file <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>     <span class="token keyword">const</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>     reader<span class="token punctuation">.</span><span class="token function">readAsDataURL</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>     reader<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>   <span class="token comment">//监听onload事件</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>reader<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span>result<span class="token punctuation">)</span>  <span class="token comment">//这么我们可以看到result上有我们需要的base64字符串</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>cover_img <span class="token operator">=</span> reader<span class="token punctuation">.</span>result  <span class="token comment">//将base64 传递给 :src</span>       <span class="token punctuation">}</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2019/08/2642692/1640567998308.png" class="" width="1640567998308">]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渲染图片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vuex入门</title>
      <link href="/2019/07/2833216.html"/>
      <url>/2019/07/2833216.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>什么是Vuex?</p><p>官网给出的解释是:</p><blockquote><p>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。Vuex 也集成到 Vue 的官方调试工具 <a href="https://github.com/vuejs/vue-devtools">devtools extension (opens new window)</a>，提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能</p></blockquote><p>Vuex优点</p><ul><li>数据的存取一步到位,不需层层传递</li><li>数据的流动非常清晰</li><li>存储在Vuex中的数据都是响应式(数据更新视图)的</li><li>使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。所以将 store 分割成模块（module）。每个模块拥有自己的 state、mutations、actions、getters，甚至是嵌套子模块，从上至下进行同样方式的分割</li></ul><p>第一步下包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> vuex<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以通过CDN引用</p><pre class="line-numbers language-none"><code class="language-none">https://unpkg.com/vuex@3.6.2/dist/vuex.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/path/to/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/path/to/vuex.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>Vuex 依赖 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Using_promises">Promise (opens new window)</a>。如果你支持的浏览器并没有实现 Promise (比如 IE)，那么你可以使用一个 polyfill 的库，例如 <a href="https://github.com/stefanpenner/es6-promise">es6-promise (opens new window)</a>。</p><p>你可以通过 CDN 将其引入：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/es6-promise@4/dist/es6-promise.auto.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Vuex 使用<strong>单一状态树</strong></p><p>Vuex五个核心属性:</p><ul><li><h3 id="State"><a href="#State" class="headerlink" title="State :"></a>State :</h3><p>驱动应用的数据源(vuex状态存储在state中,只有通过显式地提交 (commit) mutation才能改变它</p></li><li><h3 id="Getter"><a href="#Getter" class="headerlink" title="Getter:"></a>Getter:</h3><p>当需要从state派生一些状态出来，且多个组件使用它时,使用getter属性相当于vue中的计算属性computed,只有原状态改变派生状态才会改变,第一个参数必须为statae,第二个可以是getter’s</p></li><li><h3 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation :"></a>Mutation :</h3><p>用于更改 store.state()，<strong>必须是同步函数</strong></p></li><li><h3 id="Action"><a href="#Action" class="headerlink" title="Action :"></a>Action :</h3><p>用于提交 mutation，而不是直接变更状态，可以包含(主要)任意异步操作**</p><p>当需要知道action什么时候结束的时候,我们可以在函数中返回一个Promise,然后在提交时用then处理</p></li><li><h3 id="Module"><a href="#Module" class="headerlink" title="Module :"></a>Module :</h3><p>切割模块,使每个模块有自己的state,mutation,action,getter</p><p>如果希望你的模块具有更高的封装度和复用性，你可以通过添加 <code>namespaced: true</code> 的方式使其成为带命名空间的模块。</p><p>当模块被注册后，它的所有 getter、action 及 mutation 都会自动根据模块注册的路径调整命名，模块内部的action、mutation和getter是注册在全局命名空间，如果多个模块中action、mutation的命名是一样的，那么提交mutation、action时，将会触发所有模块中命名相同的mutation、action。</p><p><em>这样有太多的耦合，如果要使你的模块具有更高的封装度和复用性，你可以通过添加</em><code>namespaced: true</code> 的方式使其成为带命名空间的模块。</p></li></ul><center>下图展示了VueX运行机制</center><img src="/2019/07/2833216/vuex.png" class="" title="vuex"><p> Vue 组件中展示状态呢？</p><p>由于 Vuex 的状态存储是响应式的，从 store 实例中读取状态最简单的方法就是<br><a href="https://cn.vuejs.org/guide/computed.html">在计算属性 (opens new window)</a>中返回某个状态：</p><p>Vuex 通过 <code>store</code> 选项，提供了一种机制将状态从根组件“注入”到每一个子组件中（需调用 <code>Vue.use(Vuex)</code>）：</p><h2 id="store"><a href="#store" class="headerlink" title="store :"></a>store :</h2><p>store是个容器用于Vue组件从中读取状态,若store改变了状态,那么对应的组件也会得到高效的更新</p><p>不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是:</p><ul><li><p><strong>显式地提交 (commit) mutations</strong></p></li><li><p>如果是异步的，就**派发(dispatch)<code>actions**</code>，其本质还是提交<code>mutations</code></p></li></ul><hr><p>通过在根实例中注册 <code>store</code> 选项，该 store 实例会注入到根组件下的所有子组件中，且子组件能通过 <code>this.$store</code> 访问到。让我们更新下 <code>Counter</code> 的实现：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> shopcar <span class="token keyword">from</span> <span class="token string">'./shopcar'</span><span class="token comment">//new store 实例对象就导入 引入模块就导入该js模块</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment">//划分模块进行存储数据</span>    modules<span class="token operator">:</span> <span class="token punctuation">{</span>    shopcar<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> store<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>这里不得不提提一些常用的<strong>辅助函数</strong></em></p><ul><li>mapState (将state中的数据映射到组件中)</li><li>mapGetters(将getter中的计算属性映射到组件的计算属性中)</li><li>mapMutation</li><li>mapActions</li></ul><h4 id="mapState"><a href="#mapState" class="headerlink" title="mapState"></a>mapState</h4><blockquote><p>当一个组件需要获取多个状态的时候，将这些状态都声明为计算属性会有些重复和冗余。为了解决这个问题，我们可以使用 <code>mapState</code> 辅助函数帮助我们生成计算属性，让你少按几次键</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span><span class="token punctuation">{</span>mapState<span class="token punctuation">,</span>mapGetters<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>…配合对象展开运算符,可以简化写法</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">'MyFooter'</span><span class="token punctuation">,</span>  computed<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token string">'shopcar'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'allPrice'</span><span class="token punctuation">,</span><span class="token string">'allCount'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token string">'shopcar'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'cart'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    isAll<span class="token operator">:</span><span class="token punctuation">{</span>      <span class="token function">set</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">// 全选影响小选</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'shopcar/modifyAllState'</span><span class="token punctuation">,</span>val<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">// 小选影响全选</span>      <span class="token keyword">return</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>cart<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>goods_state<span class="token punctuation">)</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="Mutation-1"><a href="#Mutation-1" class="headerlink" title="Mutation"></a>Mutation</h4><p>更改 Vuex 的 store 中的state的唯一方法是提交 mutation。Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 <strong>事件类型 (type)</strong> 和 一个 **回调函数 (handler)*<em>。</em>这个回调函数就是我们实际进行状态更改的地方*，并且它会接受 state 作为第一个参数</p><p>提交载荷(Payload)</p><p>你可以向 <code>store.commit</code> 传入额外的参数，即 mutation 的 <strong>载荷（payload）</strong>：载荷应该是一个对象，这样可以包含多个字段并且记录的 mutation 会更易读</p><hr><blockquote><p>Mutation 必须是同步函数在,Vuex 中，mutation 都是同步事务</p></blockquote><h4 id="在组件中提交-Mutation"><a href="#在组件中提交-Mutation" class="headerlink" title="在组件中提交 Mutation"></a>在组件中提交 Mutation</h4><p>你可以在组件中使用 <code>this.$store.commit('xxx')</code> 提交 mutation，或者使用 <code>mapMutations</code> 辅助函数将组件中的 methods 映射为 <code>store.commit</code> 调用（需要在根节点注入 <code>store</code>）。</p><h4 id="mapGetter"><a href="#mapGetter" class="headerlink" title="mapGetter"></a>mapGetter</h4><p>Vuex 允许我们在 store 中定义“getter”（可以认为是 store 的计算属性）。就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。</p><p>Getter 接受 state 作为其第一个参数：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  state<span class="token operator">:</span> <span class="token punctuation">{</span>    todos<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> text<span class="token operator">:</span> <span class="token string">'...'</span><span class="token punctuation">,</span> done<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> text<span class="token operator">:</span> <span class="token string">'...'</span><span class="token punctuation">,</span> done<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  getters<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function-variable function">doneTodos</span><span class="token operator">:</span> <span class="token parameter">state</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> state<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">todo</span> <span class="token operator">=&gt;</span> todo<span class="token punctuation">.</span>done<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过方法访问</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">getters<span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token function">allPrice</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">let</span> newCart <span class="token operator">=</span> state<span class="token punctuation">.</span>cart<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>goods_state<span class="token punctuation">)</span>          <span class="token keyword">return</span> newCart<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">sum<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>              sum<span class="token operator">+=</span>item<span class="token punctuation">.</span>goods_count<span class="token operator">*</span>item<span class="token punctuation">.</span>goods_price<span class="token punctuation">,</span><span class="token number">0</span>          <span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">allCount</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span>  state<span class="token punctuation">.</span>cart<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>goods_state<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">sum<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>              sum <span class="token operator">+=</span> item<span class="token punctuation">.</span>goods_count<span class="token punctuation">,</span><span class="token number">0</span>          <span class="token punctuation">)</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过让 getter 返回一个函数，来实现给 getter 传参。</p><p>接收</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">computed<span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token string">"模块名"</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">' allPrice'</span><span class="token punctuation">,</span><span class="token string">' allCount'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h4 id="actions"><a href="#actions" class="headerlink" title="actions"></a>actions</h4><ul><li>Action 提交的是 mutation，而不是直接变更状态。</li><li>Action 可以包含任意异步操作。</li></ul><p>异步操纵用的最多的自然是发送ajax</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">actions<span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token comment">//在actions发送异步ajax</span>  <span class="token keyword">async</span> <span class="token function">getCartList</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span>data<span class="token operator">:</span>res<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>  context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'modify'</span><span class="token punctuation">,</span>res<span class="token punctuation">.</span>list<span class="token punctuation">)</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Action 通常是异步的，那么如何知道 action 什么时候结束呢？更重要的是，我们如何才能组合多个 action，以处理更加复杂的异步流程？</p><p>首先，你需要明白 <code>store.dispatch</code> 可以处理被触发的 action 的处理函数返回的 Promise，并且 <code>store.dispatch</code> 仍旧返回 Promise：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">actions<span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token function">actionA</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> commit <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'someMutation'</span><span class="token punctuation">)</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在你可以：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'actionA'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">// ...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在另外一个 action 中也可以：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">actions<span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">// ...</span>  <span class="token function">actionB</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> dispatch<span class="token punctuation">,</span> commit <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'actionA'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'someOtherMutation'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后，如果我们利用 <a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Asynchronous/Async_await"> async / await</a>，我们可以如下组合 action：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 假设 getData() 和 getOtherData() 返回的是 Promise</span>actions<span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token keyword">async</span> <span class="token function">actionA</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> commit <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'gotData'</span><span class="token punctuation">,</span> <span class="token keyword">await</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">async</span> <span class="token function">actionB</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> dispatch<span class="token punctuation">,</span> commit <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'actionA'</span><span class="token punctuation">)</span> <span class="token comment">// 等待 actionA 完成</span>    <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'gotOtherData'</span><span class="token punctuation">,</span> <span class="token keyword">await</span> <span class="token function">getOtherData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>一个 <code>store.dispatch</code> 在不同模块中可以触发多个 action 函数。<br>在这种情况下，只有当所有触发函数完成后，返回的 Promise 才会执行。</p></blockquote><h4 id="modules"><a href="#modules" class="headerlink" title="modules"></a>modules</h4><p>因为Vuex使用单一状态树,通过模块将store分割成多个模块,每个模块都有自己的state,mutation,action,getter</p><p>模块的局部状态<br>对于模块内部的 mutation 和 getter，<strong>接收的第一个参数是模块的局部状态对象</strong>。<br>同样，对于模块内部的 action，局部状态通过 context.state 暴露出来，根节点状态则为 <em>context.rootState</em>：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> moduleA <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment">// ...</span>  actions<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">incrementIfOddOnRootSum</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> state<span class="token punctuation">,</span> commit<span class="token punctuation">,</span> rootState <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> rootState<span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'increment'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于模块内部的 getter，根节点状态会作为第三个参数暴露出来：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> moduleA <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment">// ...</span>  getters<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">sumWithRootCount</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> getters<span class="token punctuation">,</span> rootState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> rootState<span class="token punctuation">.</span>count    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈设计模式之观察者模式</title>
      <link href="/2019/07/1531613.html"/>
      <url>/2019/07/1531613.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><em>定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新</em></p></blockquote><p>又称发布-订阅者模式,是一种通知机制，让发送通知的一方（被观察方）和接收通知的一方（观察者）能彼此分离，互不影响,解决主体对象与观察者之间功能的耦合,即实现<strong>松耦合(loosely coupled)</strong></p><p>观察者模式属于<strong>行为型设计模式</strong>，行为模式<strong>关注的是对象之间的通讯</strong>，观察者模式就是观察者和被观察者之间的通讯。</p><p>其实24种基本的设计模式中并没有发布订阅模式，上面也说了，他只是观察者模式的一个别称。</p><p>但是经过时间的沉淀，似乎他已经强大了起来，已经独立于观察者模式，成为另外一种不同的设计模式。</p><p>在现在的发布订阅模式中，称为发布者的消息发送者不会将消息直接发送给订阅者，这意味着发布者和订阅者不知道彼此的存在。在发布者和订阅者之间存在第三个组件，称为<strong>消息代理或调度中心或中间件</strong>，它维持着发布者和订阅者之间的联系，过滤所有发布者传入的消息并相应地分发它们给订阅者。</p><p>举一个例子，你在微博上关注了A，同时其他很多人也关注了A，那么当A发布动态的时候，微博就会为你们推送这条动态。A就是发布者，你是订阅者，微博就是调度中心，你和A是没有直接的消息往来的，全是通过微博来协调的（你的关注，A的发布动态）。</p><p><img src="/832626667-5d65fd14f3957_fix732-1647429731779.png" alt="img"></p><p>观察者模式中的订阅者是双向的,即可以是消息的发布者,也可以是消息的订阅者.</p><h2 id="发布-订阅模式-Pub-Sub-Pattern"><a href="#发布-订阅模式-Pub-Sub-Pattern" class="headerlink" title="发布-订阅模式 (Pub-Sub Pattern)"></a>发布-订阅模式 (Pub-Sub Pattern)</h2><p>在发布者和订阅者之间存在第三个组件，称为消息代理或调度中心或中间件，它维持着发布者和订阅者之间的联系，过滤所有发布者传入的消息，并相应的分发给它们的订阅者。</p><p>举例:</p><p>Vue中的EventBus的实现</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">EventBus</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment">//订阅,需要传递一个回调函数  </span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token parameter">eventType<span class="token punctuation">,</span>callback</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">[</span>evenType<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sub<span class="token punctuation">[</span>evenType<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">[</span>evenType<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span>callback<span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment">// 发布者，通过调用传递过来的回调函数的同时并传递数据</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token parameter">evenType<span class="token punctuation">,</span><span class="token operator">...</span>arg</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 一旦执行了 $emit 方法，肯定要调用 #1 和 #2 方法，所以我要想办法把 $on 传递过来的 callback 收集起来</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">[</span>evenType<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>参考:</p><p><a href="https://segmentfault.com/a/1190000020211587">发布-订阅模式和观察者模式真的不一样？</a></p><p>JavaScript设计模式</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 观察模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈设计模式之原型模式</title>
      <link href="/2019/07/1060923.html"/>
      <url>/2019/07/1060923.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原型模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue深入理解组件</title>
      <link href="/2019/06/3041749.html"/>
      <url>/2019/06/3041749.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="插槽"><a href="#插槽" class="headerlink" title="插槽:"></a>插槽:</h1><p>作用:让组件内的标签能动态传入</p><p>用法:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    当使用组件,并未给传入具体标签内容时,插槽默认内容会显示</p><p>​    使用组件时传入自定义标签</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Pannel</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Pannel</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>自定义标签会替换slot的位置</p><hr><blockquote><p>父级模板里的所有内容都是在父级作用域中编译的；子模板里的所有内容都是在子作用域中编译的。</p></blockquote><hr><h2 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h2><p>作用:给不同的slot分发不同的内容</p><blockquote><p>slot name= “”    这个 attribute 可以用来定义额外的插槽</p></blockquote><p>给具名插槽提供内容时候,在一个 <code>&lt;template&gt;</code> 元素上使用 <code>v-slot</code> 指令，用template包裹自定义标签,并以 <code>v-slot</code> 的参数的形式提供其名称</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">v-solot:name 简写等同 #name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token operator">:</span>header<span class="token operator">&gt;</span>v<span class="token operator">-</span>slot 只能添加在 <span class="token operator">&lt;</span>template<span class="token operator">&gt;</span> <span class="token function">上</span> <span class="token punctuation">(</span>只有一种例外情况<span class="token punctuation">)</span>，这一点和已经废弃的 slot attribute 不同。具名插槽和插槽的默认语法不能混用<span class="token punctuation">,</span>会导致作用域不明确<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h1><blockquote><p>让插槽内容能够访问子组件中才有的数据.</p><p>在子组件slot 身上添加属性和子组件的值</p><p>使用组件出template 配和v-slot = ‘变量名’</p></blockquote><p>子组件内在的slot上绑定的变量</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">:row</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>obj<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">export default{    data(){        obj:{            firstname: "Lionel",            lastname: "messis"        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>父组件指定接受</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Pannel</span><span class="token punctuation">&gt;</span></span>    //scope是个对象,存储了 slot 绑定了所有属性  scope:{row:obj}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scope<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>{{scope.row.lastname}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Pannel</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">{</span>    components<span class="token operator">:</span><span class="token punctuation">{</span>        Pannel<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在使用组件时开闭标签内写 template,设置v-slot=”变量”</p><p>当被提供的内容<em>只有</em>默认插槽时，组件的标签才可以被当作插槽的模板来使用。这样我们就可以把 <code>v-slot</code> 直接用在组件上：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">v-slot:default="变量名"v-slot="变量名"  等同以上<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h1 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h1><p>作用:当Vue内置指令无法满足需求时可以自定义</p><p>用法: 全局注册或者局部注册(<strong>核心API</strong>)</p><p>全局: </p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 全局注册指令</span><span class="token comment">//参数1:指令名称 参数2: 配置对象</span>Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">"foc"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token comment">//inserted 函数会自动使用 当该指令绑定的标签插入DOM树上时候执行 执行时候会把绑定的标签元素传过来</span>  <span class="token function">inserted</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">//对el进行操纵</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>  el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>局部注册:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">directive<span class="token operator">:</span><span class="token punctuation">{</span>   foc<span class="token operator">:</span><span class="token punctuation">{</span>     <span class="token function">inserted</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的focus指令能自动获取焦点</p><hr><p>下面这个案例的节选部分,实现了对btn点击转为搜索框,自动获取焦点,并注册了失去焦点,输入判定,本地存取,运用了序列化反序列化,以及使用ES7 的asnyc await 发送AJAX请求,</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>                  <span class="token comment">&lt;!--绑定按下事件 通过监听inputVisible属性变化 以及inputValue属性注册相应的事件  --&gt;</span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>                      <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scope.row.inputVisible<span class="token punctuation">"</span></span>                      <span class="token attr-name">v-foc</span>                      <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inp<span class="token punctuation">"</span></span>                      <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scope.row.inputValue<span class="token punctuation">"</span></span>                      <span class="token attr-name">@keydown.esc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scope.row.inputValue==<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span>                      <span class="token attr-name">@keydown.enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>enterFn(scope.row)<span class="token punctuation">"</span></span>                      <span class="token attr-name">@blur</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scope.row.inputVisible=!scope.row.inputVisible<span class="token punctuation">"</span></span>                      <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span>80px</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>!search(scope.row)<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span>                  <span class="token attr-name">v-else</span> <span class="token punctuation">&gt;</span></span>+TAGS                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">margin-left</span><span class="token punctuation">:</span>5px</span><span class="token punctuation">"</span></span></span>                      <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item,index) in scope.row.tags<span class="token punctuation">"</span></span>                      <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span>                      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>badge bg-warning <span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                  {{item}}                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    name<span class="token operator">:</span> <span class="token string">'GoodslistMygoodslist'</span><span class="token punctuation">,</span>    components<span class="token operator">:</span><span class="token punctuation">{</span>        MyTable<span class="token punctuation">,</span>        MyHeader    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>    <span class="token comment">//把本地数据取出来</span>        list<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        isShow<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">//自定义指令的局部注册焦点事件</span>    directives<span class="token operator">:</span><span class="token punctuation">{</span>    foc<span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token function">inserted</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment">//发送ajax</span>    <span class="token comment">// async created(){</span>    <span class="token comment">//     let res= await this.$ajax({</span>    <span class="token comment">//         url:'/api/goods',</span>    <span class="token comment">//     })</span>    <span class="token comment">//     this.list=(res.data.data)</span>    <span class="token comment">// },</span>    methods<span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token function">search</span><span class="token punctuation">(</span><span class="token parameter">row</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token comment">// this.$nextTick().then(()=&gt;{this.$refs.inp})</span>            row<span class="token punctuation">.</span>inputVisible<span class="token operator">=</span><span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">enterFn</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>inputValue<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"非法"</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token number">0</span>            <span class="token punctuation">}</span>            obj<span class="token punctuation">.</span>tags<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>inputValue<span class="token punctuation">)</span>            obj<span class="token punctuation">.</span>inputValue<span class="token operator">=</span><span class="token string">""</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">del</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">let</span> index <span class="token operator">=</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>id<span class="token operator">===</span>id<span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">//深度监听将数据缓存到本地</span>    watch<span class="token operator">:</span><span class="token punctuation">{</span>        list<span class="token operator">:</span><span class="token punctuation">{</span>            deep<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="nextTick方法"><a href="#nextTick方法" class="headerlink" title="$nextTick方法"></a>$nextTick方法</h1><p>参数:</p><blockquote><p><code>{Function} [callback]</code></p></blockquote><hr><p>用法：</p><blockquote><p>将回调延迟到下次 DOM 更新循环之后执行。在修改数据之后立即使用它，然后等待 DOM 更新。它跟全局方法 <code>Vue.nextTick</code> 一样，不同的是回调的 <code>this</code> 自动绑定到调用它的实例上。</p></blockquote><ul><li>$nextTick 原地返回值 是个Promise对象,因此能链式编写</li></ul><hr><p>示例:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isShow<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>点我搜索<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>  <span class="token attr-name">v-else</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>inp<span class="token punctuation">"</span></span>   <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token operator">:</span><span class="token punctuation">{</span>        isShow<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>methods<span class="token operator">:</span><span class="token punctuation">{</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>isShow <span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>inp<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当用户点击这个search时,会立即跳转将btn 转为search框</p><p>参考:</p><ul><li><a href="https://cn.vuejs.org/v2/api/#Vue-nextTick">Vue.nextTick</a></li><li><a href="https://cn.vuejs.org/v2/guide/reactivity.html#%E5%BC%82%E6%AD%A5%E6%9B%B4%E6%96%B0%E9%98%9F%E5%88%97">异步更新队列</a></li></ul><hr><p>上文用到了$refs 方法</p><p>他是获取元素DOM元素的方法</p><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a><a href="https://cn.vuejs.org/v2/api/#ref">ref</a></h3><ul><li><p><strong>预期</strong>：<code>string</code></p><p><code>ref</code> 被用来给元素或子组件注册引用信息。引用信息将会注册在父组件的 <code>$refs</code> 对象上。如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例：</p><pre class="line-numbers language-none"><code class="language-none">&lt;!-- `vm.$refs.p` will be the DOM node --&gt;&lt;p ref="p"&gt;hello&lt;/p&gt;&lt;!-- `vm.$refs.child` will be the child component instance --&gt;&lt;child-component ref="child"&gt;&lt;/child-component&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当 <code>v-for</code> 用于元素或组件的时候，引用信息将是包含 DOM 节点或组件实例的数组。</p><p>关于 ref 注册时间的重要说明：因为 ref 本身是作为渲染结果被创建的，在初始渲染的时候你不能访问它们 - 它们还不存在！<code>$refs</code> 也不是响应式的，因此你不应该试图用它在模板中做数据绑定。</p></li><li><p><strong>参考</strong>：<a href="https://cn.vuejs.org/v2/guide/components-edge-cases.html#%E8%AE%BF%E9%97%AE%E5%AD%90%E7%BB%84%E4%BB%B6%E5%AE%9E%E4%BE%8B%E6%88%96%E5%AD%90%E5%85%83%E7%B4%A0">子组件 ref</a></p></li></ul><hr><h3 id="vm-refs"><a href="#vm-refs" class="headerlink" title="vm.$refs"></a><a href="https://cn.vuejs.org/v2/api/#vm-refs">vm.$refs</a></h3><ul><li><p><strong>类型</strong>：<code>Object</code></p></li><li><p><strong>只读</strong></p></li><li><p><strong>详细</strong>：</p><p>一个对象，持有注册过 <a href="https://cn.vuejs.org/v2/api/#ref"><code>ref</code> attribute</a> 的所有 DOM 元素和组件实例。</p></li><li><p><strong>参考</strong>：</p><ul><li><a href="https://cn.vuejs.org/v2/guide/components-edge-cases.html#%E8%AE%BF%E9%97%AE%E5%AD%90%E7%BB%84%E4%BB%B6%E5%AE%9E%E4%BE%8B%E6%88%96%E5%AD%90%E5%85%83%E7%B4%A0">子组件 ref</a></li><li><a href="https://cn.vuejs.org/v2/api/#ref">特殊 attribute - ref</a></li></ul></li></ul><hr><blockquote><p>获取原生DOM需要在Mounted生命周期获取</p></blockquote><hr><p>在Mounted生命周期中获取2中方式</p><ol><li>在目标标签添加 id /ref </li><li>在恰当实际,通过 id / ref 属性获取目标标签</li></ol><p>示例:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>baba<span class="token punctuation">'</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bigH1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>ref和ID获取原生DOM<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> h1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#baba"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> h1Ref <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>bigH1<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>h1<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>h1Ref<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="refs-可以通过ref属性获取组件对象"><a href="#refs-可以通过ref属性获取组件对象" class="headerlink" title="$refs 可以通过ref属性获取组件对象"></a>$refs 可以通过ref属性获取组件对象</h2><h6 id="当需要调组件对象里方法等-子传父方法"><a href="#当需要调组件对象里方法等-子传父方法" class="headerlink" title="(当需要调组件对象里方法等) 子传父方法"></a><em>(当需要调组件对象里方法等)</em> 子传父方法</h6><p><strong>示例:</strong></p><p>父组件:</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;h1&gt;ref 获取子组件对象&lt;/h1&gt;&lt;Demo ref="Yetu"&gt;&lt;/Demo&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> Demo <span class="token keyword">from</span> <span class="token string">'./components/refdemo.vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>components<span class="token operator">:</span><span class="token punctuation">{</span>        Demo<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>Yetu<span class="token punctuation">.</span>msg<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>yetu<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>子组件:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">&gt;</span></span>这是子组件     {{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            msg<span class="token operator">:</span><span class="token string">'这是子组件里的数据'</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> methods<span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"这是子组件里的方法"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组件插槽 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue组件-生命周期</title>
      <link href="/2019/06/2651007.html"/>
      <url>/2019/06/2651007.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>每个 Vue 实例在被创建时都要经过一系列的初始化过程——例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做<strong>生命周期钩子</strong>的函数，这给了用户在不同阶段添加自己的代码的机会。</p></blockquote><p>Vue框架内置函数,随着组件的生命周期阶段自动执行</p><p>4个阶段,8个方法</p><ul><li><em><strong>初始化   beforeCreated       created</strong></em></li><li><em><strong>挂载      beforeMounted      mounted</strong></em></li><li><em><strong>更新      beforeUpdate         updated</strong></em></li><li><em><strong>销毁      beforeDestory        destoryed</strong></em></li></ul><p>vue实例从创建到编译模板执行了  beforeCreate / Created 钩子函数</p><p>​                </p><h1 align="center">生命周期图示</h1><p></p><img src="/2019/06/2651007/lifecycle-1639461741701.png" class="" title="图片来自Vue官网"><pre class="line-numbers language-none"><code class="language-none">&lt;script&gt;export default {  name: 'Day05App',  data() {    return {    baba:"hello"    };  },  beforeCreate(){    //beforeCreate undefined 无法访问date 中数据    console.log('beforeCreate',this.baba);  },   created(){     //created hello    console.log('created',this.baba);  },};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><em>beforeCreate</em>=&gt;<em>created</em></p></blockquote><h1 id="初始化阶段"><a href="#初始化阶段" class="headerlink" title="初始化阶段"></a>初始化阶段</h1><ol><li><p>new Vue()=&gt; init Events&amp;Lifecycle 初始化事件和生命周期函数</p></li><li><p>beforeCreate 生命周期钩子函数被执行,不能访问data/methids..</p></li><li><p>init injiections&amp;reactivity -Vue 内部添加data 和methods等</p></li><li><p>created 生命周期钩子函数被执行阶段  实例创建 可以访问data/methods..</p></li><li><p>编译模板阶段-开始分析</p></li><li><p>has el option ? 有检查挂载到那里</p></li><li><p>没有,调用$mount()方法</p><p>有继续检查template阶段</p></li></ol><p>最常用的Create(发送Ajax请求)</p><blockquote><p><em>beforeMount</em>=&gt;<em>mounted</em></p></blockquote><h1 id="挂载阶段"><a href="#挂载阶段" class="headerlink" title="挂载阶段"></a>挂载阶段</h1><ol><li>template 选项检查</li><li>有 编译template返回render函数</li><li>无 编译el选项对应标签作为template(要渲染的模板)</li><li>虚拟DOM 挂载真实DOM之前</li><li>beforeMount -生命周期钩子函数被执行  不能访问真实DOM</li><li>Create.. 把虚拟DOM和渲染的数据一并挂载到真实DOM上</li><li>真是DOM挂载完毕</li><li>Mounted-生命周期钩子函数被执行</li></ol><blockquote><p><em>beforeUpdate=&gt;updated</em></p></blockquote><h1 id="更新阶段"><a href="#更新阶段" class="headerlink" title="更新阶段"></a>更新阶段</h1><ol><li>当date 里数据改变,更新DOM之前</li><li>beforeUpdate-生命周期钩子函数被执行  不能访问更新后的真实DOM,但是data数据已更新</li><li>Virtual DOM … 虚拟DOM重新渲染 打patch 到真实DOM</li><li>updated -生命周期钩子函数被执行</li><li>当有date数据改变,重复这个循环</li></ol><p>beforeUpdate 获取更新前的真实DOM</p><p>updated       获取更新后的真是DOM</p><blockquote><p><em>beforeDestory</em> =&gt; <em>destoryed</em></p></blockquote><h1 id="销毁阶段"><a href="#销毁阶段" class="headerlink" title="销毁阶段"></a>销毁阶段</h1><ol><li>当$destroy()被调用 – 比如组件DOM被移除(例v-if)</li><li>beforeDestroy – 生命周期钩子函数被执行</li><li>拆卸数据监视器、子组件和事件侦听器 释放内存</li><li>实例销毁后, 最后触发一个钩子函数</li><li>destroyed – 生命周期钩子函数被执行  不能访问watcher/全局事件</li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue生命周期 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>父子组件之间的通讯</title>
      <link href="/2019/06/229816.html"/>
      <url>/2019/06/229816.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>明确关系:</p><blockquote><p>父:  引用者</p><p>子: 被引用者</p></blockquote><blockquote><p>什么时候用到父=&gt;子传值</p></blockquote><p>需要把一个组件里值传到另一个组件进行渲染时候</p><blockquote><p><em><strong>父向子传值</strong></em></p></blockquote><p><strong>1.子组件内, props定义变量,</strong></p><p><strong>2.在子组件使用变量</strong>在子组件中定义好<strong>props变量</strong>(子组件<strong>全局</strong>下),用于接受父组件的数据</p><p><strong>3.父组件内, 使用子组件, 通过属性方式给props变量传值</strong></p><hr><p>子组件:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-product<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>        {title}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>        {{price}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>        {{info}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">{</span>    <span class="token comment">//定义变量进行接收</span>    props<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">,</span><span class="token string">'price'</span><span class="token punctuation">,</span><span class="token string">'info'</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><p>父组件:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyProduct</span>                    <span class="token attr-name">:title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>title<span class="token punctuation">'</span></span>                   <span class="token attr-name">:price</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>24<span class="token punctuation">'</span></span>                   <span class="token attr-name">:info</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>msg<span class="token punctuation">'</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MyProduct</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> MyProduct form <span class="token string">'./components/MyProduct.vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    components<span class="token operator">:</span><span class="token punctuation">{</span>        MyProduct<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            title<span class="token operator">:</span><span class="token string">"免费吃"</span><span class="token punctuation">,</span>            msg<span class="token operator">:</span><span class="token string">"限制2小时"</span><span class="token punctuation">,</span>            price<span class="token operator">:</span><span class="token number">500</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><blockquote><p><em>单项数据流:</em></p></blockquote><p>父组件数据流向子组件的数据,在子组件不能修改(如果修改了,父组件不知道)</p><p>流向,叫单项数据流.</p><p>不能直接对Props中的数据进行赋值,通常用数组进行存储,数组是引用数据类型是个对象,</p><p>修改内部的属性不会影响单项数据流的保护</p><p>JS不能操作堆内存.引用数据类型指向外部的对象</p><p>子组件修改,不通知父级,造成数据的不一致</p><hr><blockquote><p><em><strong>子向父传值</strong></em></p></blockquote><p>父组件:   <strong>给子组件绑定一个自定义事件</strong>用于接收到子组件传过来的值，并把他赋值给data缓存里，渲染到页面上</p><p>第一步:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">@自定义事件名 baba="父组件methods的函数名随意起 //fn"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> son <span class="token keyword">from</span> <span class="token string">'./components/son.vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    component<span class="token operator">:</span> <span class="token punctuation">{</span>    son<span class="token punctuation">,</span>        <span class="token punctuation">}</span>mothods<span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token comment">//接受子组件的值</span>    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span>price</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>子组件:   通过$emit触发自定义事件 第一个是自定义事件名，第二个是要传递的值。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>baba<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token comment">//不可直接修改props中的数据,因为Vue中props是单项数据流</span>    props<span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token function">baba</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//点击btn触发$emit传递给父组件(baba),子组件需要传递的值(可变参数)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span>'父组件里的自定义事件名 baba <span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><hr><blockquote><h6 id="任意组件传值？"><a href="#任意组件传值？" class="headerlink" title="任意组件传值？"></a>任意组件传值？</h6></blockquote><p><strong>任意组件传值通过中央事件总线$bus</strong></p><p><strong>前置条件</strong>：AA组件叫A组件，BB组件叫B组件，虽然这里是兄弟关系，其实A组件和B组件之间没有任何关系也可以用这种方式。</p><p><strong>定义中央事件总线，挂载到vue实例上。</strong></p><p>V-model的本质</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">&lt;addBtn :value="count" @input"val =&gt; count = val"&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>addBtn</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>给value属性复制</li><li>接受input事件,把值赋值给变量</li><li>子组件里就要用props+value接受使用</li><li>子组件触发input事件传值</li></ol><p>所以用v-model 也可以给组件实现双向数据绑定</p><p><strong>A组件如何发送？</strong></p><p><strong>通过this.$bus.$emit发送</strong></p>]]></content>
      
      
      <categories>
          
          <category> Vue.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue双向绑定 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中的路由配置问题</title>
      <link href="/2019/06/2021686.html"/>
      <url>/2019/06/2021686.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Vue中的路由模式:</p><p>​    区别:</p><ul><li><em><strong>hash模式:通过<code>#号</code>后面的内容的更改，触发<code>hashchange</code>事件，实现路由切换</strong></em></li><li><em><strong>history模式:通过<code>pushState</code>和<code>replaceState</code>切换url，触发<code>popstate</code>事件，实现路由切换，需要后端配合</strong></em></li></ul><p>是一种映射关系:路径和组件的映射关系.</p><p>优点:</p><ul><li>单页应用(SPA):能将所有功能在一个html展示</li><li>前端路由作用:实现业务场景切换</li><li>整体不刷新,提高用户体验</li><li>数据传递容易,开发效率高</li></ul><p>缺点:不利于SEO,首次加载比较慢</p><hr><p>使用步骤:</p><ol><li><p>下包</p></li><li><p>引入</p></li><li><p>注册</p></li><li><p>规则</p></li><li><p>路由对象</p></li><li><p>注入</p></li><li><p>挂载点</p><hr></li></ol><p><em>下包</em></p><pre class="line-numbers language-none"><code class="language-none">yarn add vue-router<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em>引入</em></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span>   <span class="token comment">// 引入包</span><span class="token comment">// Vue.use() 就是在装插件 相当通过Vue.use将构造函数VueRouter加载到Vue上</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><em>配置路由规则</em>(下面这个demo演示了四级路由配置)</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>  <span class="token comment">//第一个规则用于重定向 访问/ 时候 强制跳转到 /find 路径</span>      redirect<span class="token operator">:</span> <span class="token string">'/Find'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>               <span class="token punctuation">{</span> name<span class="token operator">:</span><span class="token string">'Find'</span><span class="token punctuation">,</span>    path<span class="token operator">:</span> <span class="token string">'/find'</span><span class="token punctuation">,</span>    component<span class="token operator">:</span> Find<span class="token punctuation">,</span>    <span class="token comment">// 配置二级路由</span>    children<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token comment">//匹配一级和二级路由的拼接 相当于路径拼接成 /find/ranking</span>        path<span class="token operator">:</span> <span class="token string">'ranking'</span><span class="token punctuation">,</span>        component<span class="token operator">:</span> Ranking<span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        path<span class="token operator">:</span> <span class="token string">'recommend'</span><span class="token punctuation">,</span>        component<span class="token operator">:</span> Recommend<span class="token punctuation">,</span>        children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>            path<span class="token operator">:</span> <span class="token string">'pop'</span><span class="token punctuation">,</span>            component<span class="token operator">:</span> Pop<span class="token punctuation">,</span>            children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>                path<span class="token operator">:</span> <span class="token string">'album'</span><span class="token punctuation">,</span>                component<span class="token operator">:</span> Album<span class="token punctuation">,</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token punctuation">{</span>                path<span class="token operator">:</span> <span class="token string">'mv'</span><span class="token punctuation">,</span>                component<span class="token operator">:</span> Mv<span class="token punctuation">,</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token punctuation">{</span>                path<span class="token operator">:</span> <span class="token string">'live'</span><span class="token punctuation">,</span>                component<span class="token operator">:</span> Live<span class="token punctuation">,</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            path<span class="token operator">:</span> <span class="token string">'rock'</span><span class="token punctuation">,</span>            component<span class="token operator">:</span> Rock<span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            path<span class="token operator">:</span> <span class="token string">'jazz'</span><span class="token punctuation">,</span>            component<span class="token operator">:</span> Jazz<span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            path<span class="token operator">:</span> <span class="token string">'punk'</span><span class="token punctuation">,</span>            component<span class="token operator">:</span> Punk<span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        path<span class="token operator">:</span> <span class="token string">'songlist'</span><span class="token punctuation">,</span>        component<span class="token operator">:</span> SongList      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    name<span class="token operator">:</span> <span class="token string">'My'</span><span class="token punctuation">,</span>    path<span class="token operator">:</span> <span class="token string">'/my'</span><span class="token punctuation">,</span>    component<span class="token operator">:</span> My  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>     <span class="token comment">//加了 : name 就是参数 匹配不传参</span>    name<span class="token operator">:</span> <span class="token string">'Part'</span><span class="token punctuation">,</span>    path<span class="token operator">:</span> <span class="token string">'/part'</span><span class="token punctuation">,</span>    component<span class="token operator">:</span> Part  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>      <span class="token comment">//匹配动态传参</span>    name<span class="token operator">:</span> <span class="token string">'active'</span><span class="token punctuation">,</span>      path<span class="token operator">:</span> <span class="token string">'/part/:name/:age'</span><span class="token punctuation">,</span>      component<span class="token operator">:</span> Part  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token operator">:</span> <span class="token string">'*'</span><span class="token punctuation">,</span>    component<span class="token operator">:</span> NotFound  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">,</span>  <span class="token comment">//设置路由模式 不带  #  的路径 变好看了</span>  mode<span class="token operator">:</span> <span class="token string">"history"</span>    <span class="token comment">// 打包上线后需要后台支持, 模式是hash</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//将路由对象创建到new Vue创建的实例中</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">,</span>  router<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>部分演示截图(下面是汤老师)</p><img src="https://images.weserv.nl/?url=https://article.biliimg.com/bfs/article/b72bc0d573f81accaa6edb9a0f1b9e9adf61bead.png"><p><strong>路由传参</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"footer_wrap"</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 声明式导航 自动加＃history <span class="token operator">--</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">"/find"</span><span class="token operator">&gt;</span>发现音乐<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">"/my"</span><span class="token operator">&gt;</span>我的音乐<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">"/part?name=皮皮皮吃吃&amp;age=24"</span><span class="token operator">&gt;</span>秦时明月汉时光<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">"/part/王力宏/18"</span><span class="token operator">&gt;</span>ForeverLove<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">&gt;</span> <span class="token operator">--</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 编程式路由 <span class="token operator">--</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>span @click<span class="token operator">=</span><span class="token string">"goto('/find','Find')"</span><span class="token operator">&gt;</span>发现音乐<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>span @click<span class="token operator">=</span><span class="token string">"toPartParam('/my?name=国立武汉大学&amp;age=100','my')"</span><span class="token operator">&gt;</span>我的学校<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>span @click<span class="token operator">=</span><span class="token string">"toPartQuery('/part?name=baba&amp;age=20','part')"</span><span class="token operator">&gt;</span>我的音乐<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>span @click<span class="token operator">=</span><span class="token string">"toPartParams('/part','Part')"</span><span class="token operator">&gt;</span>王力宏<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"top"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">&gt;</span><span class="token number">323</span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>view<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">'RouterApp'</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">goto</span><span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span>name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        name      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// 如果使用path 传参 会忽略 params 传参一般结合query</span>    <span class="token function">toPartParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        name<span class="token operator">:</span><span class="token string">'Find'</span><span class="token punctuation">,</span>        <span class="token comment">//一般情况不建议写2个,如果都写 name 生效,预览出来会发现 第四个 &lt;王力宏&gt; 打开了find 路径地址 他把数据传过去了</span>        path<span class="token operator">:</span><span class="token string">'/part'</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">toPartQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        path<span class="token operator">:</span><span class="token string">'/part'</span><span class="token punctuation">,</span>        query<span class="token operator">:</span><span class="token punctuation">{</span>          name<span class="token operator">:</span><span class="token string">"baba"</span><span class="token punctuation">,</span>          age<span class="token operator">:</span><span class="token number">20</span>        <span class="token punctuation">}</span>        <span class="token comment">//1.path和params 不要同时使用,收不到</span>        <span class="token comment">// params:{</span>        <span class="token comment">//   name:'baba',</span>        <span class="token comment">//   age:302</span>        <span class="token comment">// }</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">//通过 params 进行传参</span>    <span class="token function">toPartParam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        name<span class="token operator">:</span><span class="token string">'My'</span><span class="token punctuation">,</span>        params<span class="token operator">:</span><span class="token punctuation">{</span>          name<span class="token operator">:</span><span class="token string">'国立武汉大学'</span><span class="token punctuation">,</span>          age<span class="token operator">:</span><span class="token number">100</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>演示如图</em></p><p>Query传参</p><img src="/2019/06/2021686/1639786354219.png" class="" width="1639786354219"><p>params传参</p><img src="/2019/06/2021686/1639786389586.png" class="" width="1639786389586">]]></content>
      
      
      <categories>
          
          <category> Vue.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue组件</title>
      <link href="/2019/06/1813012.html"/>
      <url>/2019/06/1813012.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>Vue 的组件本质上就是一个 “包含了描述组件选项的对象”。这个设计算是一个典型的 intuition based design，它不是从语言本身的机制或是类型系统出发去设计的，而是单纯从人如何描述自己想要的东西出发的                                                                         –  <a href="https://www.zhihu.com/question/310485097/answer/591869966">引用自作者</a></p></blockquote><p>组件是可复用Vue实例,封装标签,样式和Js代码</p><p>组件化: 封装的思想,把页面上 <em><strong>可重用部分 封装为 组件</strong></em>,从而方便项目的 开发 与维护</p><p>组件都只是通过 <code>Vue.component</code> 全局注册的:</p><ul><li><p>全局注册 </p><blockquote><p>可以用在其被注册之后的任何 (通过 <code>new Vue</code>) 新创建的 Vue 根实例，也包括其组件树中的所有子组件的模板中。</p></blockquote></li></ul><p>全局组件在main.js中注册并使用组件</p><pre class="line-numbers language-none"><code class="language-none">import 组件对象(你想要重复利用的那个vue实例) from './components/组件对象'//把这个组件作为自定义元素来使用('组件名',组件对象)Vue.component('Mycomponents', 组件对象)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><h5 id="注意-上面代码块必须需要放在-new-Vue-否控制台会报错-会不认识你这个自定义组件"><a href="#注意-上面代码块必须需要放在-new-Vue-否控制台会报错-会不认识你这个自定义组件" class="headerlink" title="注意: 上面代码块必须需要放在 new Vue,否控制台会报错,会不认识你这个自定义组件"></a>注意: 上面代码块必须需要放在 new Vue,否控制台会报错,会不认识你这个自定义组件</h5></blockquote><ul><li><p>局部注册</p><blockquote><p>//引入组件</p><p>import pannel from “./components/pannel.vue”</p><p>//局部注册组件</p><p>export default {</p><p>components:{</p><p>  pannel</p><p>}</p><p>}</p></blockquote></li></ul><p>scoped:</p><p>使用方式,给style上添加scoped,这样它作用域范围只针对当前及子组件</p>]]></content>
      
      
      <categories>
          
          <category> Vue.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue概念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue双向绑定</title>
      <link href="/2019/06/168370.html"/>
      <url>/2019/06/168370.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Vue双向绑定"><a href="#Vue双向绑定" class="headerlink" title="Vue双向绑定"></a>Vue双向绑定</h1><p><strong>v-model</strong> 指令用来在 input、select、textarea、checkbox</p><p>、radio 等表单控件元素上创建双向数据绑定，根据表单上的值，自动更新绑定的元素的值。</p><p>按钮的事件我们可以使用 v-on 监听事件，并对用户的输入进行响应。</p><p>value 属性和Vue数据变量,双向绑定到一起</p><ul><li>语法: v-model=”vue数据变量”</li><li>双向数据绑定<ul><li>数据变化 -&gt; 视图自动同步</li><li>视图变化 -&gt; 数据自动同步</li></ul></li></ul><blockquote><p>vue双向绑定实现原理是Object.defineProperty(obj, prop, descriptor)</p></blockquote><p>如果你不太记得这个方法:</p><p>​    此处就贴上MDN中的介绍</p><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">Object.defineProperty()</a> 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html">value该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等）。默认为 undefined。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html">get属性的 getter 函数，如果没有 getter，则为 undefined。当访问该属性时，会调用此函数。执行时不传入任何参数，但是会传入 this 对象（由于继承关系，这里的this并不一定是定义该属性的对象）。该函数的返回值会被用作属性的值。默认为 undefined。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html">set属性的 setter 函数，如果没有 setter，则为 undefined。当属性值被修改时，会调用此函数。该方法接受一个参数（也就是被赋予的新值），会传入赋值时的 this 对象。默认为 undefined。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="key的作用又是什么？"><a href="#key的作用又是什么？" class="headerlink" title="key的作用又是什么？"></a>key的作用又是什么？</h2><blockquote><p>vue官网: key 是给每一个 vnode 的唯一 id ，也是 diff 的一种优化策略，可以根据 key，更准确， 更快的找到对应的 vnode 节点</p></blockquote><p>要求:key 值 不得是重复的字符串和数字,是唯一的 id,不能为对象.</p><p>vue 底层会创建虚拟 DOM 树,通过 key 与真实的 DOM 树中节点 key 进行比较.</p><p>有 key 的时候,会按照 key 进行比较;</p><p>无 key 的时候进行就地更新.</p><p>如何用 key ? 有 id 绑 id 无 id 用索引</p><p>Vue: 动态添加class</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">语法:  :class="{键/名: 值}"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双向绑定 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue如何运用计算属性</title>
      <link href="/2019/06/1352302.html"/>
      <url>/2019/06/1352302.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>使用场景:</p><p>​    当变量的值,需要通过别的变量计算得到</p><p>特点:</p><p>​    函数内部使用变量改变,计算结果重新返回</p><p>​    具有缓存的特性: 多次调用的时候,计算属性只执行一次,直到依赖的变量发生变化.才会再次执行重新缓存值</p><p>​    而函数调用多少次即执行多少次</p><p>误区:</p><p>​    计算属性名 和data 里名字不得重复</p><p>计算属性依赖其他数据计算的结果</p><p>与data.methods平级</p><pre class="line-numbers language-none"><code class="language-none">computed:{    "计算属性名" (){        return "值"    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">computed:{    "计算属性名" (){    set(值){            },    get(){        return "值"    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>计算属性被重新赋值时,会执行 set 函数,并且接受 传入最新的值</p>]]></content>
      
      
      <categories>
          
          <category> Vue.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue计算属性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue入门</title>
      <link href="/2019/06/1258210.html"/>
      <url>/2019/06/1258210.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Vue是什么?</p><blockquote><p>Vue官网:渐进式 JavaScript 框架,一套拥有自己规范的语法,可以自底向上逐层应用</p></blockquote><p>vue 其本质是一个构造函数,当我们使用new关键字实例化一个对象的时候,其原型、原型链上声明的属性和方法会根据面向对象编程思想(OOP)传入的参数，构建我们需要的对象，我们所有的操作，其本质上来讲就是在操作这个对象的属性改变和方法调用， console一下实例化出来的Vue对象瞅瞅</p><p><img src="https://pic1.zhimg.com/v2-e0b215d7b4a3157a10c7e90afe6366ae_720w.jpg?source=3af55fa1" alt="preview"></p><p>库:    封装方法和属性的集合;</p><p>框架:    有自己的语法规则</p><p>声明式渲染 (Declarative Rendering)=&gt;组件系统(Component System)=&gt;</p><p>客户端路由(Component System)=&gt;大规模状态管理器(Large Scale State Management)=&gt; </p><p>构建工具(Build System)</p><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token text string">{% mermaid %}</span><span class="token keyword">graph</span> LR<span class="token punctuation">;</span>id1<span class="token text string">(声明式渲染)</span><span class="token arrow operator">--&gt;</span>id2<span class="token text string">(组件系统)</span><span class="token punctuation">;</span>id2<span class="token text string">(组件系统)</span><span class="token arrow operator">--&gt;</span>id3<span class="token text string">(客户端路由)</span><span class="token punctuation">;</span>id3<span class="token text string">(客户端路由)</span><span class="token arrow operator">--&gt;</span>id4<span class="token text string">(大规模状态管理)</span><span class="token punctuation">;</span>id4<span class="token text string">(大规模状态管理)</span><span class="token arrow operator">--&gt;</span>id5<span class="token text string">(构建工具)</span><span class="token keyword">style</span> id1 <span class="token style"><span class="token property">width</span><span class="token operator">:</span>100px</span> <span class="token punctuation">;</span><span class="token keyword">style</span> id2 <span class="token style"><span class="token property">width</span><span class="token operator">:</span>80px</span><span class="token punctuation">;</span><span class="token keyword">style</span> id3 <span class="token style"><span class="token property">width</span><span class="token operator">:</span>90px</span><span class="token punctuation">;</span><span class="token keyword">style</span> id4 <span class="token style"><span class="token property">width</span><span class="token operator">:</span>120px</span><span class="token punctuation">;</span><span class="token keyword">style</span> id5 <span class="token style"><span class="token property">width</span><span class="token operator">:</span>80px</span><span class="token punctuation">;</span><span class="token text string">{% endmermaid %}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>@Vue/cli 脚手架</p><p>好处:开箱即用,webpack 0 配置</p><p>安装全局包</p><pre class="line-numbers language-none"><code class="language-none">yarn global add @vue/cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检差是否安装成功</p><pre class="line-numbers language-none"><code class="language-none">vue -V<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回版本号,安装成功</p><p>否则查看yarn 环境变量是否配置好</p><p>找到 yarn  全局包路径</p><pre class="line-numbers language-none"><code class="language-none">yarn global bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将路径添加到环境变量path</p><p>Vue初始化工程</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">vue create vuecli<span class="token operator">-</span>demo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token text string">{% mermaid %}</span><span class="token keyword">graph</span> BT<span class="token punctuation">;</span> main.js<span class="token text string">(main.js)</span><span class="token punctuation">;</span> newVue<span class="token text string">["newVue()"]</span><span class="token punctuation">;</span> <span class="token keyword">style</span> newVue  <span class="token style"><span class="token property">width</span><span class="token operator">:</span>80px</span><span class="token punctuation">;</span> <span class="token keyword">style</span> HelloWorld.vue width<span class="token operator">:</span>140px<span class="token punctuation">;</span> <span class="token keyword">style</span> index.html width<span class="token operator">:</span>100px<span class="token punctuation">;</span> <span class="token keyword">style</span> 其他组件2.vue width<span class="token operator">:</span>120px<span class="token punctuation">;</span> <span class="token keyword">style</span> 其他组件.vue width<span class="token operator">:</span>120px<span class="token punctuation">;</span> <span class="token keyword">style</span> main.js width<span class="token operator">:</span>80px<span class="token punctuation">;</span> <span class="token keyword">subgraph</span> 脚手架代码和机构分析   HelloWorld.vue<span class="token arrow operator">--&gt;</span>app.vue<span class="token punctuation">;</span>   其他组件.vue<span class="token arrow operator">--&gt;</span>app.vue<span class="token punctuation">;</span>   其他组件2.vue<span class="token arrow operator">--&gt;</span>app.vue<span class="token punctuation">;</span>   app.vue<span class="token arrow operator">--&gt;</span>newVue <span class="token punctuation">;</span>   newVue<span class="token arrow operator">-.-&gt;</span>main.js<span class="token punctuation">;</span>   <span class="token keyword">end</span>   newVue<span class="token arrow operator">==&gt;</span>index.html<span class="token punctuation">;</span>   <span class="token text string">{% endmermaid %}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Vue设计模式-MVVM"><a href="#Vue设计模式-MVVM" class="headerlink" title="Vue设计模式-MVVM"></a>Vue设计模式-MVVM</h1><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token text string">{% mermaid %}</span><span class="token keyword">graph</span> LR<span class="token punctuation">;</span>View<span class="token arrow operator">--&gt;</span>Viewmodel<span class="token punctuation">;</span>Viewmodel<span class="token arrow operator">--&gt;</span>View<span class="token punctuation">;</span>Viewmodel<span class="token arrow operator">--&gt;</span>model<span class="token punctuation">;</span>model<span class="token arrow operator">--&gt;</span>Viewmodel<span class="token punctuation">;</span><span class="token text string">{% endmermaid %}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token text string">{% mermaid %}</span><span class="token keyword">graph</span> RL<span class="token punctuation">;</span><span class="token keyword">subgraph</span> ViewModelid2<span class="token punctuation">;</span>id4<span class="token punctuation">;</span><span class="token keyword">end</span>id1<span class="token text string">(View)</span><span class="token arrow operator">--&gt;</span>id2<span class="token text string">(DOM Listers)</span><span class="token punctuation">;</span>id2<span class="token text string">(DOM Listers)</span><span class="token arrow operator">--&gt;</span>id3<span class="token text string">(Model)</span><span class="token punctuation">;</span>id3<span class="token text string">(Model)</span><span class="token arrow operator">--&gt;</span>id4<span class="token text string">(Data Bindings)</span><span class="token punctuation">;</span>id4<span class="token text string">(Data Bindings)</span><span class="token arrow operator">--&gt;</span>id1<span class="token text string">(View)</span><span class="token punctuation">;</span><span class="token text string">{% endmermaid %}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Vue语法"><a href="#Vue语法" class="headerlink" title="Vue语法"></a>Vue语法</h1><blockquote><p>Vue模板语法,基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。</p></blockquote><p>语法:</p><p><a href="https://cn.vuejs.org/v2/guide/syntax.html#%E4%BD%BF%E7%94%A8-JavaScript-%E8%A1%A8%E8%BE%BE%E5%BC%8F">数据绑定最常见的形式就是使用“Mustache”语法 (双大括号) 的文本插值： </a></p><p>又叫插值表达式.</p><p>最常见的Vue指令</p><pre class="line-numbers language-none"><code class="language-none">v-bind 和 v-on   //可以简写为:  和 @click//动态参数的缩写@[event]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><blockquote><p>指令 (Directives) 是带有 <code>v-</code> 前缀的特殊 attribute  –<a href="cn.vue.js.org">官网解释</a></p></blockquote><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><p>修饰符是以半角句号 <strong>.</strong> 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。例如，**.prevent** 修饰符告诉 <strong>v-on</strong> 指令对于触发的事件调用 **event.preventDefault()**：</p>]]></content>
      
      
      <categories>
          
          <category> Vue.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Object.defineProperty() </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>async与await执行机制</title>
      <link href="/2019/06/1038905.html"/>
      <url>/2019/06/1038905.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>async 和await 是Promise进一步简化,本质上还是Promise的执行机制(<strong>异步操作解决方案</strong>)…可以让异步操作写起来，就像在写同步操作的流程，而不必一层层地嵌套回调函数。</p></blockquote><p>代码执行分同步(比如:new Promise 会立即执行)和异步执行</p><p>异步执行又分:</p><ul><li>宏任务(比如:定时器)</li><li>微任务队列(resolve then)</li></ul><p>async与await与Promise 不是强关联的,与<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Generator">generator(迭代器)</a>是强关联的.</p><p>await的返回值是异步执行操纵,按照微任务队列,是先进先出,用于等待一个异步方法执行完成,表示函数内(fn)的代码会立即执行(比如: await fn() )  </p><p>await返回值及下面的代码就是Promise.then里的异步微任务,</p><p>当同步任务执行完毕,</p><p>宏任务中有微任务的时候,先执行(检查是否有)微任务队列,执行完微任务队列后再执行下一轮宏任务</p><p>当同步任务执行完毕后</p><p>相比直接使用Promise</p><p>async和await优势在于处理then调用链,但是滥用await 可能导致性能问题,阻塞代码</p>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> async与await </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSON</title>
      <link href="/2019/06/103410.html"/>
      <url>/2019/06/103410.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>JavaScript Object Notation 简称JSON,JavaScript 对象表示发,<strong>是一种轻量级的数据交换格式</strong>,采用了<a href="https://zh.wikipedia.org/wiki/C%E8%AA%9E%E8%A8%80">C语言</a>家族的习惯用法，目前也有许多编程语言都能够将其<a href="https://zh.wikipedia.org/wiki/%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8">解析和字符串化</a>，其广泛使用的程度也使其成为通用的资料格式。</p><h5 id="基于JS的对象字面量表示法-是JS最精华的部分之一-是JS的一个子集"><a href="#基于JS的对象字面量表示法-是JS最精华的部分之一-是JS的一个子集" class="headerlink" title="基于JS的对象字面量表示法,是JS最精华的部分之一,是JS的一个子集"></a><strong>基于JS的对象字面量表示法,是JS最精华的部分之一,是JS的一个子集</strong></h5><h5 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h5><p>JSON有6中类型的值:</p><ul><li>Object</li><li>Array</li><li>string</li><li>Number</li><li>boolean</li><li>null</li></ul><p>JSON 对象是一个容纳’名/值’对的无序集合.名字可以是任何字符串,值可以是任何的JSON值,包括数组和对象.</p><p>JSON对象可以被无限层的嵌套,但一般来说保持其结构的相对扁平是最高效的.</p><p>大多数语言都有容易映射为JSON对象的数据类型,比如:Object,(结构)struct,dictionary,hash table,(属性列表)property list,associative array.</p><p>JSON数组是一个值的有序序列.其值可以是任何类型的JSON值,包括数组和对象.大多数语言都有容易映射为JSON数组的数据类型,比如:Array,(向量)vector,list,(序列)sequence</p><p>JSON字符串被包裹在一堆双引号之间, \  字符 用于转义,JSON 允许/ 被转义,所以JSON 可以嵌入HTML的Script标签之中</p><p>JSON数字与JS数字相似.整数的守卫不允许为0,因为一些语言用它来表示八进制数字.这种基数的昏乱在数据交换格式是不可取的.数字可以是整数、实数或者科学计数.</p><p>JSON设计目的:是成为一个极简的、轻便的文本式的JS子集.实现互通所需的共识越小,互通就越容易实现.</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://zh.wikipedia.org/wiki/JSON">维基百科-JSON</a></p><p><a href="https://www.json.org/json-en.html">介绍 JSON</a></p><p>JavaScript语言精粹修订版</p><p>高性能JavaScript</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSON数据格式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AJAX入门</title>
      <link href="/2019/06/075703.html"/>
      <url>/2019/06/075703.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Ajax是Asynchronous JavaScript and XML 的缩写</p><blockquote><p><em>超文本传输协议(hyper transfer protocol,HTTP)规定Web浏览器如何从Web服务器获取文档和向Web服务器提交表达内容,以及Web服务器如何响应这些请求和提交.通常,HTTP并不在脚本的控制下,知识当用户点击链接、提交表达和输入url时发生.</em></p><p><em>但是,用JS代码操纵http是可行的</em></p><p><em>ajax应用的主要特点,是用脚本操纵http和Web服务器进行数据交换,不会导致页面重载.</em></p><p><em>script标签的src属性能设置URL并发起HTTP GET请求,可以通过跨域通讯而不受同源策略限制.</em></p><p><em>通常,基于script标签的Ajax传输协议时,服务器响应采用JSON编码的数据结构.</em></p><p><em>当执行脚本时,JS解析器能自动将其解码.<strong>由于它使用JSON数据格式,因此这种Ajax传输协议也叫”JSONP”</strong></em></p><p>​                                                                                           JavaScript权威指南 第六版</p></blockquote><h3 id="HTTP请求由4部分组成："><a href="#HTTP请求由4部分组成：" class="headerlink" title="HTTP请求由4部分组成："></a>HTTP请求由4部分组成：</h3><ul><li><p>HTTP请求方法或“动作”（verb)</p></li><li><p>正在请求的URL</p></li><li><p>一个可选的请求头集合，其中可能包括身份验证信息</p></li><li><p>一个可选的请求主体</p></li></ul><h3 id="服务器返回的HTTP响应包含3部分："><a href="#服务器返回的HTTP响应包含3部分：" class="headerlink" title="服务器返回的HTTP响应包含3部分："></a><strong>服务器返回的HTTP响应包含3部分：</strong></h3><ul><li>一个数字和文字组成的状态码，用来显示请求的成功和失败</li><li>一个响应头集合</li><li>响应主体</li></ul><p align="right">    JavaScript权威指南 第六版</p><img src="https://tva1.sinaimg.cn/large/006aANDQly1gyfkj1nyxlj30ig04eq4z.jpg"><h3 id="XHR的readyState码"><a href="#XHR的readyState码" class="headerlink" title="XHR的readyState码"></a>XHR的readyState码</h3><img src="https://babayetu-1309205424.cos.ap-shanghai.myqcloud.com/blogimgs/readystatecode.png"><img src="https://babayetu-1309205424.cos.ap-shanghai.myqcloud.com/blogimgs/readystate2.png"><img src="https://babayetu-1309205424.cos.ap-shanghai.myqcloud.com/blogimgs%2Freadystate2.png" alt=""><hr><h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><p>JSON 是JS子集.<a href="https://www.json.org/json-en.html">请参考</a></p><p>XMLHttpRequest()不是协议级的HTTP API而是浏览器级的API。</p><p>通过下面2中方法拿到服务器响应回来的数据</p><ul><li><p><strong>load 事件</strong></p></li><li><p><strong>xhr.response</strong></p></li></ul><p>浏览器需要考虑cookie、重定向、缓存和代理，但代码只需要担心请求和响应。</p><p>JSON（全称：<em><strong>JavaScript Object Notation</strong></em>）是一种数据交换格式.</p><p>它本质上是用字符串的方式来表示对象或数组类型的数据。用字符串的方式来表示的对象或数组类型的数据，叫做 JSON数据</p><p>JSON 数据的格式有两种：</p><p>①<strong>对象格式</strong></p><p><strong>②数组格式</strong></p><p>对象格式的 JSON 数据，最外层使用 {  } 进行包裹，内部的数据为 key: value 的键值对结构。其中：</p><p>①<strong>key 必须使用英文的双引号进行包裹</strong></p><p><strong>②value 的值只能是字符串、数字、布尔值<br></strong></p><p><strong>null、数组、对象类型（可选类型只有这 6 种）</strong></p><hr><h1 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h1><p><strong>什么是同源?</strong></p><blockquote><p><strong>同源</strong>指的是<strong>两个 URL 地址</strong>具有相同的<strong>协议、主机名、端口号</strong></p><p><strong>反之则是跨域</strong></p><p><strong>出现跨域的根本原因：浏览器的同源策略不允许非同源的 URL 之间进行资源的交互</strong></p></blockquote><p>下表给出了相对于 <a href="http://www.test.com/index.html">http://www.test.com/index.html</a><br>页面的 5 个同源检测结果：</p><table><thead><tr><th>URL</th><th>是否同源</th><th>原因说明</th></tr></thead><tbody><tr><td><a href="http://www.test.com/other.html">http://www.test.com/other.html</a></td><td>是</td><td>同源（协议、域名、端口相同）</td></tr><tr><td><a href="https://www.test.com/about.html">https://www.test.com/about.html</a></td><td>否</td><td>协议不同（http 与 https）</td></tr><tr><td><a href="http://blog.test.com/movie.html">http://blog.test.com/movie.html</a></td><td>否</td><td>域名不同（<a href="http://www.test.com/">www.test.com</a> 与 blog.test.com）</td></tr><tr><td><a href="http://www.test.com:8001/home.html">http://www.test.com:8001/home.html</a></td><td>否</td><td>端口不同（默认的 80 端口与 7001 端口,https默认443.,mysql默认3306）</td></tr><tr><td><a href="http://www.test.com/main.html">http://www.test.com:80/main.html</a></td><td>是</td><td>同源（协议、域名、端口相同）</td></tr></tbody></table><p>同源策略（英文全称 <em>Same origin policy</em>）是浏览器提供的一个安全功能。</p><p><strong>浏览器的同源策略规定：不允许非同源的 URL 之间进行资源的交互。</strong></p><hr><p>突破浏览器跨域限制的方案</p><ul><li><p><em>JSONP</em></p><p>优点:  兼容性好（兼容低版本 IE）</p><p>缺点:  仅支持 GET请求</p></li><li><p><em>CORS(Cross-origin resource sharing)</em></p><p>优点:  支持 <em>GET、POST、PUT、DELETE、PATCH</em>等常见的请求方式</p><p>缺点:  不兼容某些低版本浏览器</p></li><li><p>正向代理Proxy(纯前端)</p><p>只适用于开发版本地开发环境</p></li><li><p>反选代理nginx(后端)</p></li></ul><p>CORS 是解决跨域数据请求的终极解决方案，全称是 Cross-origin resource sharing。</p><p>CORS 技术需要浏览器和服务器同时支持，二者缺一不可：</p><p>①浏览器要支持 CORS 功能（主流的浏览器全部支持，IE 不能低于 IE10）</p><p>②服务器要开启 CORS 功能（需要后端开发者为接口开启 CORS 功能）</p><p>实现 CORS 的关键，是在服务器端,因为如果服务器端没有开启 CORS 功能，则客户端无法访问那些跨域的接口！</p><hr><p>在解决跨域问题时：</p><p>CORS 方案用到了 XMLHttpRequest 对象，发起的是纯正的 Ajax 请求</p><p>JSONP 方案底层没有用到 XMLHttpRequest 对象，因此，JSONP 不是真正的 Ajax 技术.JSONP 底层原理用 script 标签的  src  属性。</p><p>结论：只要用到了 XMLHttpRequest 对象，发起的就是 Ajax 请求！</p><hr><p><em><strong>JSONP底层实现原理:</strong></em></p><ul><li>通过script 的src标签 ,把非同源的JavaScript 代码请求到本地</li><li>如果请求回来的 JavaScript 代码只包含函数的调用,则需要手动定义方法,</li><li>在指定 script 标签的 src 属性时，可以通过查询参数中的 callback，自定义回调函数的名称</li><li>在指定 script 标签的 src 属性时，还可以通过查询参数的方式，指定要发送给服务器的数据：</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"./jquery.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>      <span class="token comment">// 1.发起跨域的ajax请求</span>      $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          <span class="token comment">// dataType属性可以设置jsonp请求</span>          dataType<span class="token operator">:</span> <span class="token string">'jsonp'</span><span class="token punctuation">,</span>          method<span class="token operator">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>          url<span class="token operator">:</span> <span class="token string">'http://localhost:8888/api/jsonp'</span><span class="token punctuation">,</span>          <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> script标签没有跨域限制。因为script标签不属于js，属于html <span class="token operator">--</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token number">1.</span> script标签会把收到的字符串代码，按照js语法执行 <span class="token operator">--</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"http://localhost:8888/api/jsonp"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span> <span class="token operator">--</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token number">2.</span>前端定义好一个全局函数，让后端设置响应头来允许某些域名访问<span class="token punctuation">,</span>Access<span class="token operator">-</span>Control<span class="token operator">-</span>Allow<span class="token operator">-</span>Origin <span class="token operator">--</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>      <span class="token keyword">function</span> <span class="token function">ccc</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment">// 我们在这个位置可以随意操作数据，而不仅仅是 输出</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment">// function lvchaoJSONP(obj) {</span>      <span class="token comment">//     let script = document.createElement('script');</span>      <span class="token comment">//     document.body.appendChild(script);</span>      <span class="token comment">//     window.babayetu = obj.success;</span>      <span class="token comment">//     script.src = obj.url + "?callback=babayetu"</span>      <span class="token comment">// }</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"http://localhost:8888/api/jsonp?callback=ccc"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span> <span class="token operator">--</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><ul><li><p>后端接口代码：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/api/jsonp'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">// res.send('hello');</span>  <span class="token comment">// res.send('console.log(1234)');</span>  <span class="token comment">// res.send('abc()')</span>  <span class="token comment">// res.send('abc(12345)')</span>  <span class="token comment">// 接收客户端的函数名</span>  <span class="token keyword">let</span> fn <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>callback<span class="token punctuation">;</span>  <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> status<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> message<span class="token operator">:</span> <span class="token string">'登录成功'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>fn <span class="token operator">+</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>str<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前端代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  <span class="token comment">// 提前准备好一个函数</span>  <span class="token keyword">function</span> <span class="token function">xxx</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://localhost:3006/api/jsonp?callback=xxx<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>前端需要做什么？</p><ul><li>如果使用jQuery，$.ajax({ <strong>dataType: ‘jsonp’</strong> })，必须指定dataType选项为jsonp即可</li></ul></li><li><p>后端需要做什么？</p><ul><li>如果使用express，那么直接调用 <code>res.jsonp(数据)</code> 即可。</li></ul></li></ul><hr><p>防抖：频繁触发事件，只执行最后 1 次</p><p>节流：单位时间内，频繁触发的事件只执行 1 次</p><hr><h1 id="HTTP-状态码"><a href="#HTTP-状态码" class="headerlink" title="HTTP 状态码"></a>HTTP 状态码</h1><p>当浏览者访问一个网页时，浏览者的浏览器会向网页所在服务器发出请求。当浏览器接收并显示网页前，此网页所在的服务器会返回一个包含 HTTP 状态码的信息头（server header）用以响应浏览器的请求。</p><p>HTTP 状态码的英文为 <strong>HTTP Status Code</strong></p><p>下面是常见的 HTTP 状态码：</p><ul><li><strong>200 - 请求成功</strong></li><li><strong>301 - 资源（网页等）被永久转移到其它URL</strong></li><li><strong>404 - 请求的资源（网页等）不存在</strong></li><li><strong>500 - 内部服务器错误</strong></li></ul><h2 id="HTTP-状态码分类"><a href="#HTTP-状态码分类" class="headerlink" title="HTTP 状态码分类"></a>HTTP 状态码分类</h2><p>HTTP 状态码由三个十进制数字组成，第一个十进制数字定义了状态码的类型。响应分为五类：</p><ul><li><strong>信息响应(100–199)</strong></li><li><strong>成功响应(200–299)</strong></li><li><strong>重定向(300–399)</strong></li><li><strong>客户端错误(400–499)</strong></li><li><strong>服务器错误 (500–599)</strong></li></ul><table><thead><tr><th>分类</th><th>分类描述</th></tr></thead><tbody><tr><td>1**</td><td>信息，服务器收到请求，需要请求者继续执行操作</td></tr><tr><td>2**</td><td>成功，操作被成功接收并处理</td></tr><tr><td>3**</td><td>重定向，需要进一步的操作以完成请求</td></tr><tr><td>4**</td><td>客户端错误，请求包含语法错误或无法完成请求</td></tr><tr><td>5**</td><td>服务器错误，服务器在处理请求的过程中发生了错误</td></tr></tbody></table><p>HTTP状态码列表:</p><table><thead><tr><th>状态码</th><th>状态码英文名称</th><th>中文描述</th></tr></thead><tbody><tr><td>100</td><td>Continue</td><td>继续。客户端应继续其请求</td></tr><tr><td>101</td><td>Switching Protocols</td><td>切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议</td></tr><tr><td></td><td></td><td></td></tr><tr><td>200</td><td>OK</td><td>请求成功。一般用于GET与POST请求</td></tr><tr><td>201</td><td>Created</td><td>已创建。成功请求并创建了新的资源</td></tr><tr><td>202</td><td>Accepted</td><td>已接受。已经接受请求，但未处理完成</td></tr><tr><td>203</td><td>Non-Authoritative Information</td><td>非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本</td></tr><tr><td>204</td><td>No Content</td><td>无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档</td></tr><tr><td>205</td><td>Reset Content</td><td>重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</td></tr><tr><td>206</td><td>Partial Content</td><td>部分内容。服务器成功处理了部分GET请求</td></tr><tr><td></td><td></td><td></td></tr><tr><td>300</td><td>Multiple Choices</td><td>多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</td></tr><tr><td>301</td><td>Moved Permanently</td><td>永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</td></tr><tr><td>302</td><td>Found</td><td>临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td></tr><tr><td>303</td><td>See Other</td><td>查看其它地址。与301类似。使用GET和POST请求查看</td></tr><tr><td>304</td><td>Not Modified</td><td>未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</td></tr><tr><td>305</td><td>Use Proxy</td><td>使用代理。所请求的资源必须通过代理访问</td></tr><tr><td>306</td><td>Unused</td><td>已经被废弃的HTTP状态码</td></tr><tr><td>307</td><td>Temporary Redirect</td><td>临时重定向。与302类似。使用GET请求重定向</td></tr><tr><td></td><td></td><td></td></tr><tr><td>400</td><td>Bad Request</td><td>客户端请求的语法错误，服务器无法理解</td></tr><tr><td>401</td><td>Unauthorized</td><td>请求要求用户的身份认证</td></tr><tr><td>402</td><td>Payment Required</td><td>保留，将来使用</td></tr><tr><td>403</td><td>Forbidden</td><td>服务器理解请求客户端的请求，但是拒绝执行此请求</td></tr><tr><td>404</td><td>Not Found</td><td>服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面</td></tr><tr><td>405</td><td>Method Not Allowed</td><td>客户端请求中的方法被禁止</td></tr><tr><td>406</td><td>Not Acceptable</td><td>服务器无法根据客户端请求的内容特性完成请求</td></tr><tr><td>407</td><td>Proxy Authentication Required</td><td>请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权</td></tr><tr><td>408</td><td>Request Time-out</td><td>服务器等待客户端发送的请求时间过长，超时</td></tr><tr><td>409</td><td>Conflict</td><td>服务器完成客户端的 PUT 请求时可能返回此代码，服务器处理请求时发生了冲突</td></tr><tr><td>410</td><td>Gone</td><td>客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置</td></tr><tr><td>411</td><td>Length Required</td><td>服务器无法处理客户端发送的不带Content-Length的请求信息</td></tr><tr><td>412</td><td>Precondition Failed</td><td>客户端请求信息的先决条件错误</td></tr><tr><td>413</td><td>Request Entity Too Large</td><td>由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息</td></tr><tr><td>414</td><td>Request-URI Too Large</td><td>请求的URI过长（URI通常为网址），服务器无法处理</td></tr><tr><td>415</td><td>Unsupported Media Type</td><td>服务器无法处理请求附带的媒体格式</td></tr><tr><td>416</td><td>Requested range not satisfiable</td><td>客户端请求的范围无效</td></tr><tr><td>417</td><td>Expectation Failed</td><td>服务器无法满足Expect的请求头信息</td></tr><tr><td></td><td></td><td></td></tr><tr><td>500</td><td>Internal Server Error</td><td>服务器内部错误，无法完成请求</td></tr><tr><td>501</td><td>Not Implemented</td><td>服务器不支持请求的功能，无法完成请求</td></tr><tr><td>502</td><td>Bad Gateway</td><td>作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</td></tr><tr><td>503</td><td>Service Unavailable</td><td>由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中</td></tr><tr><td>504</td><td>Gateway Time-out</td><td>充当网关或代理的服务器，未及时从远端服务器获取请求</td></tr><tr><td>505</td><td>HTTP Version not supported</td><td>服务器不支持请求的HTTP协议的版本，无法完成处理</td></tr></tbody></table><hr><h4 id="封装AJAX函数的步骤"><a href="#封装AJAX函数的步骤" class="headerlink" title="封装AJAX函数的步骤"></a><strong>封装AJAX函数的步骤</strong></h4><p>1.创建xhr对象</p><p>2.调用xhr.open()函数</p><p>​    open第一个参数指定HTTP方法或者动辄.这个字符串不区分大小写.但是通常用大写字母匹配HTTP协议.</p><p>​    <strong>GET用于常规请求</strong>适用于当URL完全指定请求资源,当请求对服务器没有任何副作用以及当服务器的响应是可缓存时。（当提交表单的目标仅仅是一个只读查询，GET比POST更合适。）</p><p>​    <strong>“POST”方法常用于HTML表单</strong>。它在请求主体中包含额外数据（表单数据）且这些数据常存储到服务器上的数据库中（副作用）。相同URL的重复POST请求从服务器得到的响应可能不同，同时不应该缓存使用这个方法的请求。</p><p>3.调用send()函数</p><p>4.监听load事件</p><hr>同步响应由于其本身的性质，异步处理HTTP响应是最好的方式。然而，XMLHttpRequest也支持同步响应。如果把false作为第3个参数传递给open()，那么send()方法将阻塞直到请求完成。在这种情况下，不需要使用事件处理程序：一旦send()返回，仅需要检查XMLHttpRequest对象的status和responseText属性.<p>同步请求是吸引人的，但应该避免使用它们。客户端JavaScript是单线程的，当send()方法阻塞时，它通常会导致整个浏览器UI冻结。如果连接的服务器响应慢，那么用户的浏览器将冻结</p><hr><p>ES7中 在createds生命周期中利用axios发送ajax请求</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL<span class="token operator">=</span><span class="token string">'http://...:....'</span><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$ajax<span class="token operator">=</span>axios<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">async</span> <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>data<span class="token operator">:</span>res<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        url<span class="token operator">:</span><span class="token string">''</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token operator">=</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XMLHttpRequest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解什么是Promise</title>
      <link href="/2019/06/0539610.html"/>
      <url>/2019/06/0539610.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Promise就是一个对象,用于传递异步操作的消息.</p><p>Promise 是一个对象，也是一个构造函数</p><hr><p>特点:</p><ul><li>Promise 实例有三种状态操作 Pending、Resolved(Fulfilled),Rejected</li><li>一旦改变,就不会再变,状态的改变只有可能是从 Pending 变为 Resolved 和从 Pending 变为 Rejected 能将异步操作以同步流程表达出来,避免出现callback hell</li><li>让回调函数变成了规范的链式写法，程序流程可以看得很清楚</li></ul><p>缺点:</p><ul><li>无法取消Promise,一旦新建就会立即执行的同步任务.</li><li>如果不设置callback,内部throw err</li><li>处于Pending状态时候,无法得知目前进展到那个阶段</li></ul><p>示例1:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是setTimeout代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是new Promise 的立即指向代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2019/06/0539610/1639788794110.png" class="" width="1639788794110"><p>示例2:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是setTimeout代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是new Promise 的立即指向代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'异步指向任务完成!获得了一些结果'</span><span class="token punctuation">)</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"成功了!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>p1<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2019/06/0539610/callback.png" class="" title="Promise"><hr><h1 id="Promise-prototype-then"><a href="#Promise-prototype-then" class="headerlink" title="Promise.prototype.then()"></a>Promise.prototype.then()</h1><p>Promise 实例具有 then 方法,即 then 方法是定义在原型对象 Promise.prototype 上的.</p><p>作用是为 Promise 实例添加状态改变时的回调函数</p><p>then 方法可以接受两个回调函数作为参数,第二个参数就是可以选的.</p><p>then方法返回的是一个新的Promise实例(不是原来的那个Promise).因此可以采用链式写法,即then方法后面调用另一个then方法.采用链式的then,可以指定一组按照次序调用的回调函数,后面的回调函数,需等待该Promise对象状态的改变,才会被调用</p><h1 id="Promise-prototype-cath"><a href="#Promise-prototype-cath" class="headerlink" title="Promise.prototype.cath()"></a><strong>Promise.prototype.cath()</strong></h1><p>一般来说,不要在then定义Reject状态的回调函数,即then的第二个参数,总是使用catch方法</p><p>Promise.prototype.cath方法是.then(null,rejection)的别名</p><p>当异步操作throw err时,状态会变成Rejected的,就会调用catch方法处理错误</p><p>Promise对象的错误具有”冒泡”性质,错误会被一直向后传递,直到下一个catch捕获,被捕获后不会传递到外层,不会有任何反应</p><hr>JavaScript 是单线程语言,而现代游览器是支持多线程的,单线程从字面上就知道,他是容易导致进程阻塞的.<p>我们知道栈Stack,是一种后进先出(LIFO)的线性结构,是一个特殊的线性表.</p><p>队列Queue,是一种先进先去的线性结构(FIFO),是一个特殊的线性表.</p><p>Event LOOP 事件循环:</p><blockquote><p>在计算机科学中，事件循环是一种编程构造或设计模式，用于在程序中等待和分发事件或消息。事件循环的工作原理是向某个内部或外部的“事件提供程序”发出请求(通常在事件到达之前阻止请求)，然后调用相关的事件处理程序(“分派事件”)。事件循环有时也称为消息调度程序、消息循环、消息泵或运行循环</p></blockquote><p align="right">    --wikipedia</p><p>JS采用事件循环<a href="https://en.jinzhao.wiki/wiki/Event_loop">Event LOOP</a>的机制执行JS.<br>在了解此之前你所需的前置知识点:计算机系统</p><p><strong>进程</strong>:是操纵系统对一个正常运行的程序的一种抽象.一个系统上可以同时运行多个进程</p><p><strong>并发运行</strong>:一个进程的指令和另一个进程的指令是交错执行的,通过处理器在进程简切换,操纵系统这种交错执行的机制称为上下文切换.进程间的转换是由操纵系统的内核(kernel)管理,内核是系统管理全部进程所用代码和数据结构的集合</p><p><strong>上下文</strong>:操纵系统保持跟踪进程运行所需的所有状态信息,这种状态,就是上下文,包括许多信息.比如PC和寄存器文件的当前值,以及贮存的内容.</p><p><strong>线程</strong>:一个进程实际上可以由多个称为显参的执行单元组成.每个线程都运行在进程的上下文中,并共享同样的全局代码和全局数据.一般来说多线程比多进程更容易共享数据,因为线程一般比进程高效</p><img src="https://tva1.sinaimg.cn/large/006aANDQgy1h03g5beevnj30dw05rjsl.jpg"><p align="center">深入理解计算机系统</p><ul><li><p>语言的发展过程中,在ES6标准写进了Promise.</p><p>JS有两种</p><h4 id="执行模式"><a href="#执行模式" class="headerlink" title="执行模式:"></a>执行模式:</h4><ul><li>同步模式</li><li>异步模式</li></ul><h4 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务:"></a>异步任务:</h4><ul><li>宏任务</li><li>微任务</li></ul><h5 id="宏任务"><a href="#宏任务" class="headerlink" title="宏任务:"></a>宏任务:</h5><p>是由宿主(浏览器、Node发起的),</p><p>宏任务为多线程异步逻辑，</p><h4 id="微任务（Microtasks）"><a href="#微任务（Microtasks）" class="headerlink" title="微任务（Microtasks）"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_DOM_API/Microtask_guide#%E5%BE%AE%E4%BB%BB%E5%8A%A1%EF%BC%88microtasks%EF%BC%89">微任务（Microtasks）</a></h4><p>微任务是由JS自身发起的;</p><p>通常是由 promise 创建的,只有当 Javascript 调用栈为空，而控制权尚未返还给被 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/User_agent">user agent</a> 用来驱动脚本执行环境的事件循环之前，该微任务才会被执行。</p><p>起初微任务和任务之间的差异看起来不大。它们很相似；都由位于某个队列的 JavaScript 代码组成并在合适的时候运行。但是，只有在迭代开始时队列中存在的任务才会被事件循环一个接一个地运行，这和处理微任务队列是殊为不同的。</p><p>有两点关键的区别。</p><p>首先，每当一个任务存在，事件循环都会检查该任务是否正把控制权交给其他 JavaScript 代码。如若不然，事件循环就会运行微任务队列中的所有微任务。接下来微任务循环会在事件循环的每次迭代中被处理多次，包括处理完事件和其他回调之后。</p><p>其次，如果一个微任务通过调用  <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/queueMicrotask"><code>queueMicrotask()</code></a>, 向队列中加入了更多的微任务，则那些新加入的微任务 <em>会早于下一个任务运行</em> 。这是因为事件循环会持续调用微任务直至队列中没有留存的，即使是在有更多微任务持续被加入的情况下。</p><p><strong>注意：</strong> 因为微任务自身可以入列更多的微任务，且事件循环会持续处理微任务直至队列为空，那么就存在一种使得事件循环无尽处理微任务的真实风险。如何处理递归增加微任务是要谨慎而行的。</p><h4 id="创建方式"><a href="#创建方式" class="headerlink" title="创建方式:"></a><strong>创建方式:</strong></h4><h4 id="Macrotask宏任务"><a href="#Macrotask宏任务" class="headerlink" title="Macrotask宏任务:"></a><strong>Macrotask</strong>宏任务:</h4><ul><li>setTimeout</li><li>setInterval</li><li>MessageChannel</li><li>IO</li><li>UI交互事件</li><li>setlmmediate(Node环境)</li><li>script(整体代码块)</li><li>postMessage</li></ul><h4 id="Microtask微任务"><a href="#Microtask微任务" class="headerlink" title="Microtask微任务:"></a><strong>Microtask</strong>微任务:</h4><ul><li>Promise.[ then/catch/finally ]</li><li>process.nextTick（Node环境）</li><li>MutationOberver（浏览器环境）</li><li>Object.observe</li><li>queueMicrotask</li><li>requestAnimationFrame(有争议)</li></ul></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a href="https://zh.javascript.info/event-loop#zong-jie">总结</a></h3><p>更详细的事件循环算法（尽管与 <a href="https://html.spec.whatwg.org/multipage/webappapis.html#event-loop-processing-model">规范</a> 相比仍然是简化过的）：</p><ol><li><p>从 <strong>宏任务</strong> 队列（例如 “script”）中出队（dequeue）并执行最早的任务。</p></li><li><p>执行所有 </p><p>微任务</p><ul><li>当微任务队列非空时：<ul><li>出队（dequeue）并执行最早的微任务。</li></ul></li></ul></li><li><p>如果有变更，则将变更渲染出来。</p></li><li><p>如果宏任务队列为空，则休眠直到出现宏任务。</p></li><li><p>转到步骤 1。</p></li></ol><p>安排（schedule）一个新的 <strong>宏任务</strong>：</p><ul><li>使用零延迟的 <code>setTimeout(f)</code>。</li></ul><p>它可被用于将繁重的计算任务拆分成多个部分，以使浏览器能够对用户事件作出反应，并在任务的各部分之间显示任务进度。</p><p>此外，也被用于在事件处理程序中，将一个行为（action）安排（schedule）在事件被完全处理（冒泡完成）后。</p><p>安排一个新的 <strong>微任务</strong>：</p><ul><li>使用 <code>queueMicrotask(f)</code>。</li><li>promise 处理程序也会通过微任务队列。</li></ul><p>在微任务之间没有 UI 或网络事件的处理：它们一个立即接一个地执行。</p><p>所以，我们可以使用 <code>queueMicrotask</code> 来在保持环境状态一致的情况下，异步地执行一个函数。</p><div align="center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="978px" viewBox="-0.5 -0.5 978 771" content="<mxfile><diagram id=&quot;kd00niN6A60JnVUqGfcJ&quot; name=&quot;第 1 页&quot;><mxGraphModel dx=&quot;1147&quot; dy=&quot;804&quot; grid=&quot;1&quot; gridSize=&quot;10&quot; guides=&quot;1&quot; tooltips=&quot;1&quot; connect=&quot;1&quot; arrows=&quot;1&quot; fold=&quot;1&quot; page=&quot;1&quot; pageScale=&quot;1&quot; pageWidth=&quot;3300&quot; pageHeight=&quot;4681&quot; math=&quot;0&quot; shadow=&quot;0&quot;><root><mxCell id=&quot;0&quot;/><mxCell id=&quot;1&quot; parent=&quot;0&quot;/><mxCell id=&quot;4&quot; style=&quot;edgeStyle=none;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;&quot; parent=&quot;1&quot; edge=&quot;1&quot;><mxGeometry relative=&quot;1&quot; as=&quot;geometry&quot;><mxPoint x=&quot;690&quot; y=&quot;170&quot; as=&quot;targetPoint&quot;/><Array as=&quot;points&quot;><mxPoint x=&quot;510&quot; y=&quot;140&quot;/><mxPoint x=&quot;550&quot; y=&quot;140&quot;/><mxPoint x=&quot;590&quot; y=&quot;140&quot;/><mxPoint x=&quot;690&quot; y=&quot;140&quot;/></Array><mxPoint x=&quot;431&quot; y=&quot;140&quot; as=&quot;sourcePoint&quot;/></mxGeometry></mxCell><mxCell id=&quot;10&quot; value=&quot;同步任务执行&quot; style=&quot;rounded=0;whiteSpace=wrap;html=1;&quot; parent=&quot;1&quot; vertex=&quot;1&quot;><mxGeometry x=&quot;300&quot; y=&quot;300&quot; width=&quot;119&quot; height=&quot;50&quot; as=&quot;geometry&quot;/></mxCell><mxCell id=&quot;13&quot; value=&quot;&quot; style=&quot;endArrow=classic;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;&quot; parent=&quot;1&quot; edge=&quot;1&quot;><mxGeometry width=&quot;50&quot; height=&quot;50&quot; relative=&quot;1&quot; as=&quot;geometry&quot;><mxPoint x=&quot;359&quot; y=&quot;50&quot; as=&quot;sourcePoint&quot;/><mxPoint x=&quot;359&quot; y=&quot;110&quot; as=&quot;targetPoint&quot;/></mxGeometry></mxCell><mxCell id=&quot;88&quot; value=&quot;&amp;lt;span style=&amp;quot;font-family: helvetica; font-size: 12px; font-style: normal; font-weight: 400; letter-spacing: normal; text-indent: 0px; text-transform: none; word-spacing: 0px; display: inline; float: none;&amp;quot;&amp;gt;主线程执行栈&amp;lt;/span&amp;gt;&amp;lt;br style=&amp;quot;font-family: helvetica; font-size: 12px; font-style: normal; font-weight: 400; letter-spacing: normal; text-indent: 0px; text-transform: none; word-spacing: 0px;&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-family: helvetica; font-size: 12px; font-style: normal; font-weight: 400; letter-spacing: normal; text-indent: 0px; text-transform: none; word-spacing: 0px; display: inline; float: none;&amp;quot;&amp;gt;LIFO&amp;lt;/span&amp;gt;&quot; style=&quot;text;whiteSpace=wrap;html=1;align=center;fontColor=#00ec66;&quot; parent=&quot;1&quot; vertex=&quot;1&quot;><mxGeometry x=&quot;270&quot; y=&quot;200&quot; width=&quot;100&quot; height=&quot;40&quot; as=&quot;geometry&quot;/></mxCell><mxCell id=&quot;91&quot; value=&quot;&amp;lt;span style=&amp;quot;font-family: helvetica; font-size: 12px; font-style: normal; font-weight: 400; letter-spacing: normal; text-indent: 0px; text-transform: none; word-spacing: 0px; display: inline; float: none;&amp;quot;&amp;gt;&amp;lt;font color=&amp;quot;#00ec66&amp;quot;&amp;gt;TaskQueue &amp;lt;br&amp;gt;FIFO&amp;lt;/font&amp;gt;&amp;lt;/span&amp;gt;&quot; style=&quot;text;whiteSpace=wrap;html=1;align=center;labelBorderColor=none;&quot; parent=&quot;1&quot; vertex=&quot;1&quot;><mxGeometry x=&quot;540&quot; y=&quot;100&quot; width=&quot;120&quot; height=&quot;30&quot; as=&quot;geometry&quot;/></mxCell><mxCell id=&quot;101&quot; style=&quot;edgeStyle=none;html=1;&quot; parent=&quot;1&quot; edge=&quot;1&quot;><mxGeometry relative=&quot;1&quot; as=&quot;geometry&quot;><mxPoint x=&quot;810&quot; y=&quot;437&quot; as=&quot;targetPoint&quot;/><Array as=&quot;points&quot;><mxPoint x=&quot;810&quot; y=&quot;330&quot;/></Array><mxPoint x=&quot;810&quot; y=&quot;200&quot; as=&quot;sourcePoint&quot;/></mxGeometry></mxCell><mxCell id=&quot;94&quot; value=&quot;判断Queue中的Event type&quot; style=&quot;rhombus;whiteSpace=wrap;html=1;&quot; parent=&quot;1&quot; vertex=&quot;1&quot;><mxGeometry x=&quot;590&quot; y=&quot;170&quot; width=&quot;200&quot; height=&quot;60&quot; as=&quot;geometry&quot;/></mxCell><mxCell id=&quot;96&quot; value=&quot;&amp;lt;span&amp;gt;JS引擎解析JS任务类型&amp;lt;/span&amp;gt;&quot; style=&quot;rhombus;whiteSpace=wrap;html=1;&quot; parent=&quot;1&quot; vertex=&quot;1&quot;><mxGeometry x=&quot;259&quot; y=&quot;110&quot; width=&quot;200&quot; height=&quot;60&quot; as=&quot;geometry&quot;/></mxCell><mxCell id=&quot;97&quot; value=&quot;&quot; style=&quot;endArrow=classic;html=1;&quot; parent=&quot;1&quot; edge=&quot;1&quot;><mxGeometry width=&quot;50&quot; height=&quot;50&quot; relative=&quot;1&quot; as=&quot;geometry&quot;><mxPoint x=&quot;560&quot; y=&quot;200&quot; as=&quot;sourcePoint&quot;/><mxPoint x=&quot;559.5&quot; y=&quot;445&quot; as=&quot;targetPoint&quot;/></mxGeometry></mxCell><mxCell id=&quot;98&quot; value=&quot;MicroTask&quot; style=&quot;rounded=0;whiteSpace=wrap;html=1;&quot; parent=&quot;1&quot; vertex=&quot;1&quot;><mxGeometry x=&quot;500&quot; y=&quot;440&quot; width=&quot;120&quot; height=&quot;40&quot; as=&quot;geometry&quot;/></mxCell><mxCell id=&quot;99&quot; value=&quot;MacroTask&quot; style=&quot;rounded=0;whiteSpace=wrap;html=1;&quot; parent=&quot;1&quot; vertex=&quot;1&quot;><mxGeometry x=&quot;740&quot; y=&quot;440&quot; width=&quot;120&quot; height=&quot;40&quot; as=&quot;geometry&quot;/></mxCell><mxCell id=&quot;108&quot; value=&quot;&quot; style=&quot;endArrow=classic;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;&quot; parent=&quot;1&quot; source=&quot;96&quot; target=&quot;10&quot; edge=&quot;1&quot;><mxGeometry width=&quot;50&quot; height=&quot;50&quot; relative=&quot;1&quot; as=&quot;geometry&quot;><mxPoint x=&quot;380&quot; y=&quot;230&quot; as=&quot;sourcePoint&quot;/><mxPoint x=&quot;390&quot; y=&quot;280&quot; as=&quot;targetPoint&quot;/></mxGeometry></mxCell><mxCell id=&quot;110&quot; value=&quot;&quot; style=&quot;endArrow=classic;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;&quot; parent=&quot;1&quot; source=&quot;10&quot; target=&quot;111&quot; edge=&quot;1&quot;><mxGeometry width=&quot;50&quot; height=&quot;50&quot; relative=&quot;1&quot; as=&quot;geometry&quot;><mxPoint x=&quot;334&quot; y=&quot;410&quot; as=&quot;sourcePoint&quot;/><mxPoint x=&quot;360&quot; y=&quot;430&quot; as=&quot;targetPoint&quot;/></mxGeometry></mxCell><mxCell id=&quot;158&quot; style=&quot;edgeStyle=none;html=1;fontColor=#00ec66;entryX=0;entryY=0.5;entryDx=0;entryDy=0;&quot; edge=&quot;1&quot; parent=&quot;1&quot; source=&quot;111&quot; target=&quot;10&quot;><mxGeometry relative=&quot;1&quot; as=&quot;geometry&quot;><mxPoint x=&quot;200&quot; y=&quot;320&quot; as=&quot;targetPoint&quot;/><Array as=&quot;points&quot;><mxPoint x=&quot;220&quot; y=&quot;460&quot;/><mxPoint x=&quot;220&quot; y=&quot;325&quot;/></Array></mxGeometry></mxCell><mxCell id=&quot;111&quot; value=&quot;执行栈空?&quot; style=&quot;rhombus;whiteSpace=wrap;html=1;&quot; parent=&quot;1&quot; vertex=&quot;1&quot;><mxGeometry x=&quot;259.5&quot; y=&quot;430&quot; width=&quot;200&quot; height=&quot;60&quot; as=&quot;geometry&quot;/></mxCell><mxCell id=&quot;114&quot; value=&quot;结束&quot; style=&quot;rounded=1;whiteSpace=wrap;html=1;&quot; parent=&quot;1&quot; vertex=&quot;1&quot;><mxGeometry x=&quot;299.5&quot; y=&quot;690&quot; width=&quot;120&quot; height=&quot;50&quot; as=&quot;geometry&quot;/></mxCell><mxCell id=&quot;115&quot; value=&quot;JS任务开始&quot; style=&quot;rounded=1;whiteSpace=wrap;html=1;&quot; parent=&quot;1&quot; vertex=&quot;1&quot;><mxGeometry x=&quot;299&quot; width=&quot;120&quot; height=&quot;50&quot; as=&quot;geometry&quot;/></mxCell><mxCell id=&quot;120&quot; style=&quot;edgeStyle=none;html=1;exitX=0;exitY=0.5;exitDx=0;exitDy=0;&quot; parent=&quot;1&quot; source=&quot;155&quot; edge=&quot;1&quot;><mxGeometry relative=&quot;1&quot; as=&quot;geometry&quot;><mxPoint x=&quot;420&quot; y=&quot;610&quot; as=&quot;targetPoint&quot;/><mxPoint x=&quot;520&quot; y=&quot;600&quot; as=&quot;sourcePoint&quot;/><Array as=&quot;points&quot;><mxPoint x=&quot;460&quot; y=&quot;610&quot;/><mxPoint x=&quot;420&quot; y=&quot;610&quot;/></Array></mxGeometry></mxCell><mxCell id=&quot;131&quot; value=&quot;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;&amp;lt;b&amp;gt;&amp;lt;font face=&amp;quot;monaco&amp;quot; data-font-src=&amp;quot;https://www.cssfontstack.com/monaco#&amp;quot;&amp;gt;setTimeout&amp;lt;/font&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;b&amp;gt;&amp;lt;font face=&amp;quot;monaco&amp;quot; data-font-src=&amp;quot;https://www.cssfontstack.com/monaco#&amp;quot;&amp;gt;setInterval&amp;lt;/font&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;b&amp;gt;&amp;lt;font face=&amp;quot;monaco&amp;quot; data-font-src=&amp;quot;https://www.cssfontstack.com/monaco#&amp;quot;&amp;gt;MessageChanel&amp;lt;/font&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;b&amp;gt;&amp;lt;font face=&amp;quot;monaco&amp;quot; data-font-src=&amp;quot;https://www.cssfontstack.com/monaco#&amp;quot;&amp;gt;IO事件队列&amp;lt;/font&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;b&amp;gt;&amp;lt;font face=&amp;quot;monaco&amp;quot; data-font-src=&amp;quot;https://www.cssfontstack.com/monaco#&amp;quot;&amp;gt;setImmediate(Node环境)&amp;lt;/font&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;b&amp;gt;&amp;lt;font face=&amp;quot;monaco&amp;quot; data-font-src=&amp;quot;https://www.cssfontstack.com/monaco#&amp;quot;&amp;gt;Script(优先执行此宏任务,存在异步代码才执行微任务&amp;lt;/font&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&quot; style=&quot;text;html=1;whiteSpace=wrap;verticalAlign=middle;overflow=hidden;fontColor=#00ec66;&quot; parent=&quot;1&quot; vertex=&quot;1&quot;><mxGeometry x=&quot;910&quot; y=&quot;370&quot; width=&quot;280&quot; height=&quot;170&quot; as=&quot;geometry&quot;/></mxCell><mxCell id=&quot;137&quot; value=&quot;&amp;lt;font style=&amp;quot;font-size: 18px&amp;quot;&amp;gt;MacroTask&amp;lt;/font&amp;gt;&quot; style=&quot;text;strokeColor=none;fillColor=none;html=1;fontSize=24;fontStyle=1;verticalAlign=middle;align=center;fontColor=#00EC66;&quot; parent=&quot;1&quot; vertex=&quot;1&quot;><mxGeometry x=&quot;950&quot; y=&quot;350&quot; width=&quot;100&quot; height=&quot;40&quot; as=&quot;geometry&quot;/></mxCell><mxCell id=&quot;138&quot; value=&quot;&amp;lt;font style=&amp;quot;font-size: 18px&amp;quot;&amp;gt;MicroTask&amp;lt;/font&amp;gt;&quot; style=&quot;text;strokeColor=none;fillColor=none;html=1;fontSize=24;fontStyle=1;verticalAlign=middle;align=center;fontColor=#00EC66;&quot; parent=&quot;1&quot; vertex=&quot;1&quot;><mxGeometry x=&quot;820&quot; y=&quot;590&quot; width=&quot;100&quot; height=&quot;40&quot; as=&quot;geometry&quot;/></mxCell><mxCell id=&quot;140&quot; value=&quot;&amp;lt;font color=&amp;quot;#ffffff&amp;quot;&amp;gt;异步任务执行&amp;lt;/font&amp;gt;&quot; style=&quot;rounded=0;whiteSpace=wrap;html=1;color:#000000&quot; parent=&quot;1&quot; vertex=&quot;1&quot;><mxGeometry x=&quot;299&quot; y=&quot;590&quot; width=&quot;120&quot; height=&quot;40&quot; as=&quot;geometry&quot;/></mxCell><mxCell id=&quot;144&quot; value=&quot;&quot; style=&quot;endArrow=classic;html=1;fontColor=#00EC66;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;&quot; parent=&quot;1&quot; source=&quot;111&quot; target=&quot;140&quot; edge=&quot;1&quot;><mxGeometry width=&quot;50&quot; height=&quot;50&quot; relative=&quot;1&quot; as=&quot;geometry&quot;><mxPoint x=&quot;450&quot; y=&quot;590&quot; as=&quot;sourcePoint&quot;/><mxPoint x=&quot;359&quot; y=&quot;580&quot; as=&quot;targetPoint&quot;/></mxGeometry></mxCell><mxCell id=&quot;149&quot; value=&quot;&amp;lt;ul&amp;gt;&amp;lt;li class=&amp;quot;code-line&amp;quot; style=&amp;quot;position: relative&amp;quot;&amp;gt;&amp;lt;b&amp;gt;&amp;lt;font face=&amp;quot;monaco&amp;quot; data-font-src=&amp;quot;https://www.cssfontstack.com/monaco#&amp;quot;&amp;gt;Promise.[ then/catch/finally ]&amp;lt;/font&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li class=&amp;quot;code-line&amp;quot; style=&amp;quot;position: relative&amp;quot;&amp;gt;&amp;lt;b&amp;gt;&amp;lt;font face=&amp;quot;monaco&amp;quot; data-font-src=&amp;quot;https://www.cssfontstack.com/monaco#&amp;quot;&amp;gt;Process.nextTick(Node环境)&amp;lt;/font&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li class=&amp;quot;code-line&amp;quot; style=&amp;quot;position: relative&amp;quot;&amp;gt;&amp;lt;b&amp;gt;&amp;lt;font face=&amp;quot;monaco&amp;quot; data-font-src=&amp;quot;https://www.cssfontstack.com/monaco#&amp;quot;&amp;gt;MutationObserve(浏览器环境)&amp;lt;/font&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li class=&amp;quot;code-line&amp;quot; style=&amp;quot;position: relative&amp;quot;&amp;gt;&amp;lt;b&amp;gt;&amp;lt;font face=&amp;quot;monaco&amp;quot; data-font-src=&amp;quot;https://www.cssfontstack.com/monaco#&amp;quot;&amp;gt;Object.observe&amp;lt;/font&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li class=&amp;quot;code-line&amp;quot; style=&amp;quot;position: relative&amp;quot;&amp;gt;&amp;lt;b&amp;gt;&amp;lt;font face=&amp;quot;monaco&amp;quot; data-font-src=&amp;quot;https://www.cssfontstack.com/monaco#&amp;quot;&amp;gt;queueMicrotask&amp;lt;/font&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li class=&amp;quot;code-line&amp;quot; style=&amp;quot;position: relative&amp;quot;&amp;gt;&amp;lt;b&amp;gt;&amp;lt;font face=&amp;quot;monaco&amp;quot; data-font-src=&amp;quot;https://www.cssfontstack.com/monaco#&amp;quot;&amp;gt;requestAnmationFrame(有争议)&amp;lt;/font&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&quot; style=&quot;text;html=1;whiteSpace=wrap;verticalAlign=middle;overflow=hidden;fontColor=#00ec66;&quot; parent=&quot;1&quot; vertex=&quot;1&quot;><mxGeometry x=&quot;770&quot; y=&quot;600&quot; width=&quot;320&quot; height=&quot;170&quot; as=&quot;geometry&quot;/></mxCell><mxCell id=&quot;151&quot; value=&quot;&quot; style=&quot;endArrow=classic;html=1;fontColor=#00EC66;entryX=1;entryY=0.5;entryDx=0;entryDy=0;&quot; parent=&quot;1&quot; edge=&quot;1&quot;><mxGeometry width=&quot;50&quot; height=&quot;50&quot; relative=&quot;1&quot; as=&quot;geometry&quot;><mxPoint x=&quot;780&quot; y=&quot;610&quot; as=&quot;sourcePoint&quot;/><mxPoint x=&quot;690&quot; y=&quot;610&quot; as=&quot;targetPoint&quot;/></mxGeometry></mxCell><mxCell id=&quot;152&quot; value=&quot;&amp;lt;i&amp;gt;&amp;lt;b&amp;gt;&amp;lt;span style=&amp;quot;font-family: &amp;amp;#34;helvetica&amp;amp;#34; ; font-size: 12px ; letter-spacing: normal ; text-align: center ; text-indent: 0px ; text-transform: none ; word-spacing: 0px ; display: inline ; float: none&amp;quot;&amp;gt;Pending|&amp;lt;/span&amp;gt;&amp;lt;font face=&amp;quot;monospace, monospace&amp;quot; style=&amp;quot;font-size: 12px ; letter-spacing: normal ; text-align: center ; text-indent: 0px ; text-transform: none ; word-spacing: 0px&amp;quot;&amp;gt;Resolve&amp;lt;/font&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;/i&amp;gt;&quot; style=&quot;text;whiteSpace=wrap;html=1;fontColor=#00EC66;&quot; parent=&quot;1&quot; vertex=&quot;1&quot;><mxGeometry x=&quot;440&quot; y=&quot;320&quot; width=&quot;120&quot; height=&quot;30&quot; as=&quot;geometry&quot;/></mxCell><mxCell id=&quot;153&quot; value=&quot;&amp;lt;i&amp;gt;&amp;lt;b&amp;gt;&amp;lt;span style=&amp;quot;font-family: &amp;amp;#34;helvetica&amp;amp;#34; ; font-size: 12px ; letter-spacing: normal ; text-align: center ; text-indent: 0px ; text-transform: none ; word-spacing: 0px ; display: inline ; float: none&amp;quot;&amp;gt;Pending|&amp;lt;/span&amp;gt;&amp;lt;font face=&amp;quot;monospace, monospace&amp;quot; style=&amp;quot;font-size: 12px ; letter-spacing: normal ; text-align: center ; text-indent: 0px ; text-transform: none ; word-spacing: 0px&amp;quot;&amp;gt;Resolve&amp;lt;/font&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;/i&amp;gt;&quot; style=&quot;text;whiteSpace=wrap;html=1;fontColor=#00EC66;&quot; parent=&quot;1&quot; vertex=&quot;1&quot;><mxGeometry x=&quot;820&quot; y=&quot;320&quot; width=&quot;120&quot; height=&quot;30&quot; as=&quot;geometry&quot;/></mxCell><mxCell id=&quot;159&quot; style=&quot;edgeStyle=none;html=1;fontColor=#00ec66;&quot; edge=&quot;1&quot; parent=&quot;1&quot; source=&quot;155&quot;><mxGeometry relative=&quot;1&quot; as=&quot;geometry&quot;><mxPoint x=&quot;680&quot; y=&quot;620&quot; as=&quot;targetPoint&quot;/></mxGeometry></mxCell><mxCell id=&quot;155&quot; value=&quot;&amp;lt;span style=&amp;quot;font-family: &amp;amp;#34;helvetica&amp;amp;#34;&amp;quot;&amp;gt;满足条件优先执宏任务&amp;lt;/span&amp;gt;&quot; style=&quot;rhombus;whiteSpace=wrap;html=1;&quot; parent=&quot;1&quot; vertex=&quot;1&quot;><mxGeometry x=&quot;600&quot; y=&quot;580&quot; width=&quot;200&quot; height=&quot;60&quot; as=&quot;geometry&quot;/></mxCell><mxCell id=&quot;157&quot; value=&quot;&quot; style=&quot;endArrow=classic;html=1;fontColor=#00EC66;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;&quot; parent=&quot;1&quot; source=&quot;140&quot; target=&quot;114&quot; edge=&quot;1&quot;><mxGeometry width=&quot;50&quot; height=&quot;50&quot; relative=&quot;1&quot; as=&quot;geometry&quot;><mxPoint x=&quot;380&quot; y=&quot;670&quot; as=&quot;sourcePoint&quot;/><mxPoint x=&quot;420&quot; y=&quot;670&quot; as=&quot;targetPoint&quot;/></mxGeometry></mxCell><mxCell id=&quot;162&quot; value=&quot;&quot; style=&quot;endArrow=none;html=1;fontColor=#00ec66;entryX=0.5;entryY=1;entryDx=0;entryDy=0;&quot; edge=&quot;1&quot; parent=&quot;1&quot; target=&quot;98&quot;><mxGeometry width=&quot;50&quot; height=&quot;50&quot; relative=&quot;1&quot; as=&quot;geometry&quot;><mxPoint x=&quot;590&quot; y=&quot;520&quot; as=&quot;sourcePoint&quot;/><mxPoint x=&quot;610&quot; y=&quot;490&quot; as=&quot;targetPoint&quot;/><Array as=&quot;points&quot;><mxPoint x=&quot;560&quot; y=&quot;520&quot;/></Array></mxGeometry></mxCell><mxCell id=&quot;164&quot; value=&quot;&quot; style=&quot;endArrow=none;html=1;fontColor=#00ec66;entryX=0.609;entryY=1.008;entryDx=0;entryDy=0;entryPerimeter=0;&quot; edge=&quot;1&quot; parent=&quot;1&quot; target=&quot;99&quot;><mxGeometry width=&quot;50&quot; height=&quot;50&quot; relative=&quot;1&quot; as=&quot;geometry&quot;><mxPoint x=&quot;590&quot; y=&quot;520&quot; as=&quot;sourcePoint&quot;/><mxPoint x=&quot;800&quot; y=&quot;520&quot; as=&quot;targetPoint&quot;/><Array as=&quot;points&quot;><mxPoint x=&quot;700&quot; y=&quot;520&quot;/><mxPoint x=&quot;813&quot; y=&quot;520&quot;/></Array></mxGeometry></mxCell><mxCell id=&quot;168&quot; value=&quot;&quot; style=&quot;endArrow=classic;html=1;fontColor=#00ec66;entryX=0.5;entryY=0;entryDx=0;entryDy=0;&quot; edge=&quot;1&quot; parent=&quot;1&quot; target=&quot;155&quot;><mxGeometry width=&quot;50&quot; height=&quot;50&quot; relative=&quot;1&quot; as=&quot;geometry&quot;><mxPoint x=&quot;700&quot; y=&quot;520&quot; as=&quot;sourcePoint&quot;/><mxPoint x=&quot;700&quot; y=&quot;570&quot; as=&quot;targetPoint&quot;/></mxGeometry></mxCell><mxCell id=&quot;169&quot; value=&quot;&quot; style=&quot;endArrow=none;html=1;fontColor=#00ec66;&quot; edge=&quot;1&quot; parent=&quot;1&quot;><mxGeometry width=&quot;50&quot; height=&quot;50&quot; relative=&quot;1&quot; as=&quot;geometry&quot;><mxPoint x=&quot;560&quot; y=&quot;199.82999999999998&quot; as=&quot;sourcePoint&quot;/><mxPoint x=&quot;590&quot; y=&quot;199.82999999999998&quot; as=&quot;targetPoint&quot;/></mxGeometry></mxCell><mxCell id=&quot;170&quot; value=&quot;&quot; style=&quot;endArrow=none;html=1;fontColor=#00ec66;&quot; edge=&quot;1&quot; parent=&quot;1&quot;><mxGeometry width=&quot;50&quot; height=&quot;50&quot; relative=&quot;1&quot; as=&quot;geometry&quot;><mxPoint x=&quot;790&quot; y=&quot;199.82999999999998&quot; as=&quot;sourcePoint&quot;/><mxPoint x=&quot;810&quot; y=&quot;200&quot; as=&quot;targetPoint&quot;/></mxGeometry></mxCell></root></mxGraphModel></diagram></mxfile>" onclick="(function(svg){var src=window.event.target||window.event.srcElement;while (src!=null&amp;&amp;src.nodeName.toLowerCase()!='a'){src=src.parentNode;}if(src==null){if(svg.wnd!=null&amp;&amp;!svg.wnd.closed){svg.wnd.focus();}else{var r=function(evt){if(evt.data=='ready'&amp;&amp;evt.source==svg.wnd){svg.wnd.postMessage(decodeURIComponent(svg.getAttribute('content')),'*');window.removeEventListener('message',r);}};window.addEventListener('message',r);svg.wnd=window.open('https://viewer.diagrams.net/?client=1&amp;page=0&amp;edit=_blank');}}})(this);" style="cursor:pointer;max-width:100%;max-height:771px;"><defs><style type="text/css">@font-face {font-family: "monaco";src: url("https://www.cssfontstack.com/monaco#");}</style></defs><g><path d="M 218 140 L 287 140 Q 297 140 307 140 L 327 140 Q 337 140 347 140 L 367 140 Q 377 140 387 140 L 467 140 Q 477 140 477 150 L 477 163.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"></path><path d="M 477 168.88 L 473.5 161.88 L 477 163.63 L 480.5 161.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"></path><rect x="87" y="300" width="119" height="50" fill="#ffffff" stroke="#000000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 117px; height: 1px; padding-top: 325px; margin-left: 88px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">同步任务执行</div></div></div></foreignObject><text x="147" y="329" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">同步任务执行</text></switch></g><path d="M 146 50 L 146 103.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"></path><path d="M 146 108.88 L 142.5 101.88 L 146 103.63 L 149.5 101.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"></path><rect x="57" y="200" width="100" height="40" fill="none" stroke="none" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe center; width: 98px; height: 1px; padding-top: 207px; margin-left: 58px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #00ec66; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><span style="font-family: &quot;helvetica&quot; ; font-size: 12px ; font-style: normal ; font-weight: 400 ; letter-spacing: normal ; text-indent: 0px ; text-transform: none ; word-spacing: 0px ; display: inline ; float: none">主线程执行栈</span><br style="font-family: &quot;helvetica&quot; ; font-size: 12px ; font-style: normal ; font-weight: 400 ; letter-spacing: normal ; text-indent: 0px ; text-transform: none ; word-spacing: 0px"><span style="font-family: &quot;helvetica&quot; ; font-size: 12px ; font-style: normal ; font-weight: 400 ; letter-spacing: normal ; text-indent: 0px ; text-transform: none ; word-spacing: 0px ; display: inline ; float: none">LIFO</span></div></div></div></foreignObject><text x="107" y="219" fill="#00ec66" font-family="Helvetica" font-size="12px" text-anchor="middle">主线程执行栈LIFO</text></switch></g><rect x="327" y="100" width="120" height="30" fill="none" stroke="none" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 107px; margin-left: 328px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><span style="font-family: &quot;helvetica&quot; ; font-size: 12px ; font-style: normal ; font-weight: 400 ; letter-spacing: normal ; text-indent: 0px ; text-transform: none ; word-spacing: 0px ; display: inline ; float: none"><font color="#00ec66">TaskQueue <br>FIFO</font></span></div></div></div></foreignObject><text x="387" y="119" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">TaskQueue...</text></switch></g><path d="M 597 200 L 597 320 Q 597 330 597 340 L 597 430.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"></path><path d="M 597 435.88 L 593.5 428.88 L 597 430.63 L 600.5 428.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"></path><path d="M 477 170 L 577 200 L 477 230 L 377 200 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="all"></path><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 198px; height: 1px; padding-top: 200px; margin-left: 378px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">判断Queue中的Event type</div></div></div></foreignObject><text x="477" y="204" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">判断Queue中的Event type</text></switch></g><path d="M 146 110 L 246 140 L 146 170 L 46 140 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="all"></path><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 198px; height: 1px; padding-top: 140px; margin-left: 47px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><span>JS引擎解析JS任务类型</span></div></div></div></foreignObject><text x="146" y="144" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">JS引擎解析JS任务类型</text></switch></g><path d="M 347 200 L 346.51 438.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"></path><path d="M 346.5 443.88 L 343.02 436.87 L 346.51 438.63 L 350.02 436.89 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"></path><rect x="287" y="440" width="120" height="40" fill="#ffffff" stroke="#000000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 460px; margin-left: 288px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">MicroTask</div></div></div></foreignObject><text x="347" y="464" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">MicroTask</text></switch></g><rect x="527" y="440" width="120" height="40" fill="#ffffff" stroke="#000000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 460px; margin-left: 528px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">MacroTask</div></div></div></foreignObject><text x="587" y="464" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">MacroTask</text></switch></g><path d="M 146 170 L 146.48 293.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"></path><path d="M 146.5 298.88 L 142.97 291.9 L 146.48 293.63 L 149.97 291.87 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"></path><path d="M 146.5 350 L 146.5 423.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"></path><path d="M 146.5 428.88 L 143 421.88 L 146.5 423.63 L 150 421.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"></path><path d="M 46.5 460 L 17 460 Q 7 460 7 450 L 7 335 Q 7 325 17 325 L 80.63 325" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"></path><path d="M 85.88 325 L 78.88 328.5 L 80.63 325 L 78.88 321.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"></path><path d="M 146.5 430 L 246.5 460 L 146.5 490 L 46.5 460 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="all"></path><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 198px; height: 1px; padding-top: 460px; margin-left: 48px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">执行栈空?</div></div></div></foreignObject><text x="147" y="464" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">执行栈空?</text></switch></g><rect x="86.5" y="690" width="120" height="50" rx="7.5" ry="7.5" fill="#ffffff" stroke="#000000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 715px; margin-left: 88px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">结束</div></div></div></foreignObject><text x="147" y="719" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">结束</text></switch></g><rect x="86" y="0" width="120" height="50" rx="7.5" ry="7.5" fill="#ffffff" stroke="#000000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 25px; margin-left: 87px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">JS任务开始</div></div></div></foreignObject><text x="146" y="29" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">JS任务开始</text></switch></g><path d="M 387 610 L 257 610 Q 247 610 237 610 L 213.37 610" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"></path><path d="M 208.12 610 L 215.12 606.5 L 213.37 610 L 215.12 613.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"></path><rect x="697" y="370" width="280" height="170" fill="none" stroke="none" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 278px; height: 1px; padding-top: 455px; margin-left: 699px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; max-height: 166px; overflow: hidden; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #00ec66; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><ul><li><b><font face="monaco" data-font-src="https://www.cssfontstack.com/monaco#">setTimeout</font></b></li><li><b><font face="monaco" data-font-src="https://www.cssfontstack.com/monaco#">setInterval</font></b></li><li><b><font face="monaco" data-font-src="https://www.cssfontstack.com/monaco#">MessageChanel</font></b></li><li><b><font face="monaco" data-font-src="https://www.cssfontstack.com/monaco#">IO事件队列</font></b></li><li><b><font face="monaco" data-font-src="https://www.cssfontstack.com/monaco#">setImmediate(Node环境)</font></b></li><li><b><font face="monaco" data-font-src="https://www.cssfontstack.com/monaco#">Script(优先执行此宏任务,存在异步代码才执行微任务</font></b></li></ul></div></div></div></foreignObject><text x="699" y="459" fill="#00ec66" font-family="Helvetica" font-size="12px">setTimeoutsetIntervalMessageChanelIO事件队列setImmedia...</text></switch></g><rect x="737" y="350" width="100" height="40" fill="none" stroke="none" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 370px; margin-left: 787px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 24px; font-family: Helvetica; color: #00EC66; line-height: 1.2; pointer-events: all; font-weight: bold; white-space: nowrap; "><font style="font-size: 18px">MacroTask</font></div></div></div></foreignObject><text x="787" y="377" fill="#00EC66" font-family="Helvetica" font-size="24px" text-anchor="middle" font-weight="bold">MacroTask</text></switch></g><rect x="607" y="590" width="100" height="40" fill="none" stroke="none" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 610px; margin-left: 657px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 24px; font-family: Helvetica; color: #00EC66; line-height: 1.2; pointer-events: all; font-weight: bold; white-space: nowrap; "><font style="font-size: 18px">MicroTask</font></div></div></div></foreignObject><text x="657" y="617" fill="#00EC66" font-family="Helvetica" font-size="24px" text-anchor="middle" font-weight="bold">MicroTask</text></switch></g><rect x="86" y="590" width="120" height="40" fill="#ffffff" stroke="#000000" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 610px; margin-left: 87px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><font color="#000000">异步任务执行</font></div></div></div></foreignObject><text x="146" y="614" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">异步任务执行</text></switch></g><path d="M 146.5 490 L 146.03 583.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"></path><path d="M 146.01 588.88 L 142.54 581.86 L 146.03 583.63 L 149.54 581.9 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"></path><rect x="557" y="600" width="320" height="170" fill="none" stroke="none" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 318px; height: 1px; padding-top: 685px; margin-left: 559px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; max-height: 166px; overflow: hidden; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #00ec66; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><ul><li class="code-line" style="position: relative"><b><font face="monaco" data-font-src="https://www.cssfontstack.com/monaco#">Promise.[ then/catch/finally ]</font></b></li><li class="code-line" style="position: relative"><b><font face="monaco" data-font-src="https://www.cssfontstack.com/monaco#">Process.nextTick(Node环境)</font></b></li><li class="code-line" style="position: relative"><b><font face="monaco" data-font-src="https://www.cssfontstack.com/monaco#">MutationObserve(浏览器环境)</font></b></li><li class="code-line" style="position: relative"><b><font face="monaco" data-font-src="https://www.cssfontstack.com/monaco#">Object.observe</font></b></li><li class="code-line" style="position: relative"><b><font face="monaco" data-font-src="https://www.cssfontstack.com/monaco#">queueMicrotask</font></b></li><li class="code-line" style="position: relative"><b><font face="monaco" data-font-src="https://www.cssfontstack.com/monaco#">requestAnmationFrame(有争议)</font></b></li></ul></div></div></div></foreignObject><text x="559" y="689" fill="#00ec66" font-family="Helvetica" font-size="12px">Promise.[ then/catch/finally ]Process.nextTick(Node环境)M...</text></switch></g><path d="M 567 610 L 483.37 610" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"></path><path d="M 478.12 610 L 485.12 606.5 L 483.37 610 L 485.12 613.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"></path><rect x="227" y="320" width="120" height="30" fill="none" stroke="none" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 118px; height: 1px; padding-top: 327px; margin-left: 229px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #00EC66; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><i><b><span style="font-family: &quot;helvetica&quot; ; font-size: 12px ; letter-spacing: normal ; text-align: center ; text-indent: 0px ; text-transform: none ; word-spacing: 0px ; display: inline ; float: none">Pending|</span><font face="monospace, monospace" style="font-size: 12px ; letter-spacing: normal ; text-align: center ; text-indent: 0px ; text-transform: none ; word-spacing: 0px">Resolve</font></b></i></div></div></div></foreignObject><text x="229" y="339" fill="#00EC66" font-family="Helvetica" font-size="12px">Pending|Resolve</text></switch></g><rect x="607" y="320" width="120" height="30" fill="none" stroke="none" pointer-events="all"></rect><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 118px; height: 1px; padding-top: 327px; margin-left: 609px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #00EC66; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><i><b><span style="font-family: &quot;helvetica&quot; ; font-size: 12px ; letter-spacing: normal ; text-align: center ; text-indent: 0px ; text-transform: none ; word-spacing: 0px ; display: inline ; float: none">Pending|</span><font face="monospace, monospace" style="font-size: 12px ; letter-spacing: normal ; text-align: center ; text-indent: 0px ; text-transform: none ; word-spacing: 0px">Resolve</font></b></i></div></div></div></foreignObject><text x="609" y="339" fill="#00EC66" font-family="Helvetica" font-size="12px">Pending|Resolve</text></switch></g><path d="M 487 610 L 472.7 617.15" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"></path><path d="M 468 619.5 L 472.7 613.24 L 472.7 617.15 L 475.83 619.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"></path><path d="M 487 580 L 587 610 L 487 640 L 387 610 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="all"></path><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 198px; height: 1px; padding-top: 610px; margin-left: 388px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><span style="font-family: &quot;helvetica&quot;">满足条件优先执宏任务</span></div></div></div></foreignObject><text x="487" y="614" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">满足条件优先执宏任务</text></switch></g><path d="M 146 630 L 146.45 683.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"></path><path d="M 146.49 688.88 L 142.93 681.91 L 146.45 683.63 L 149.93 681.85 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"></path><path d="M 377 520 L 357 520 Q 347 520 347 510 L 347 480" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"></path><path d="M 377 520 L 477 520 Q 487 520 497 520 L 590 520 Q 600 520 600.02 510 L 600.08 480.32" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"></path><path d="M 487 520 L 487 573.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"></path><path d="M 487 578.88 L 483.5 571.88 L 487 573.63 L 490.5 571.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"></path><path d="M 347 199.83 L 377 199.83" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"></path><path d="M 577 199.83 L 597 200" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"></path></g><switch><g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"></g><a transform="translate(0,-5)" xlink:href="https://www.diagrams.net/doc/faq/svg-export-text-problems" target="_blank"><text text-anchor="middle" font-size="10px" x="50%" y="100%">Viewer does not support full SVG 1.1</text></a></switch></svg></div><hr><h4 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h4><p>ES6标准入门</p><p>深入计算机系统</p><p><a href="https://zh.javascript.info/event-loop#zong-jie">事件循环:微任务和宏任务</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_DOM_API/Microtask_guide">MDN-在 JavaScript 中通过 queueMicrotask() 使用微任务</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>call、apply、bind 方法总结</title>
      <link href="/2019/06/031297.html"/>
      <url>/2019/06/031297.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4>区别</h4><p><strong>Apply</strong></p><p>接受两个参数，第一个参数是this的指向，<br> <strong>第二个参数是函数接受的参数，以<em>数组</em>的形式传入</strong><br><br>改变 this 指向后原函数会立即执行，且此方法只是临时改变 this 指向一次</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  myname<span class="token operator">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// this会变成传入的obj，传入的参数必须是一个数组；</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// this指向window</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Call"><a href="#Call" class="headerlink" title="Call"></a>Call</h5><p><code>第一个参数也是</code>this的指向</p><p><strong>后面传入的是一个<em>参数列表</em></strong></p><p>跟<code>apply</code>一样，改变<code>this</code>指向后原函数会立即执行，且此方法只是临时改变<code>this</code>指向一次</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    myname<span class="token operator">:</span><span class="token string">"张三"</span><span class="token punctuation">}</span><span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// this会变成传入的obj，传入的参数必须是一个数组；</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// this指向window</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><p>bind方法和call很相似，第一参数也是<code>this</code>的指向，后面传入的也是一个参数列表(但是<em><strong>这个参数列表可以分多次传入</strong></em>)</p><p>改变<code>this</code>指向后不会立即执行，而是返回一个永久改变<code>this</code>指向的函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    myname<span class="token operator">:</span><span class="token string">"张三"</span><span class="token punctuation">}</span><span class="token keyword">const</span> bindFn <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// this 也会变成传入的obj ，bind不是立即执行需要执行一次</span><span class="token function">bindFn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// this指向obj</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// this指向window</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>从上面可以看到，<code>apply</code>、<code>call</code>、<code>bind</code>三者的区别在于：</p><ul><li><p>三者都可以改变函数的<code>this</code>对象指向</p></li><li><p>三者第一个参数都是<code>this</code>要指向的对象，如果如果没有这个参数或参数为<code>undefined</code>或<code>null</code>，则默认指向全局<code>window</code></p></li><li><p>三者都可以传参，但是<code>apply</code>是数组，而<code>call</code>是参数列表，且<code>apply</code>和<code>call</code>是一次性传入参数，而<code>bind</code>可以分为多次传入</p></li><li><p><code>bind </code>是返回绑定this之后的函数，<code>apply </code>、<code>call</code> 则是立即执行</p><hr></li></ul><p>当第一个参数为 null、undefined 的时候，默认指向 window(在浏览器中)</p><p>fn.apply(null,[1,2]); // this 指向 window<br>fn.apply(undefined,[1,2]); // this 指向 window</p><p>call 是属于所有 Function 的方法,也就是 Funtion.prototype.call<br></p><p>call 方法的 length 属性是 1。</p><p><code>call()</code> 方法使用一个指定的 <code>this</code> 值和单独给出的一个或多个参数来调用一个函数。</p><p>注意:与 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply"><code>apply()</code></a> 方法类似，只有一个区别，就是 <code>call()</code> 方法接受的是<strong>一个参数列表</strong>，而 <code>apply()</code> 方法接受的是<strong>一个包含多个参数的数组</strong>。</p><br><p>示例:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">'cheng'</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token function">fun</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'cai'</span><span class="token punctuation">,</span> <span class="token string">'cai'</span><span class="token punctuation">,</span> <span class="token string">'24'</span><span class="token punctuation">,</span> <span class="token string">'18'</span><span class="token punctuation">)</span><span class="token comment">//cheng [Arguments] { '0': 'cai', '1': 'cai', '2': '24', '3': '18' }</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>apply</code> 与 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call"><code>call()</code></a> 非常相似，不同之处在于提供参数的方式。<code>apply</code> 使用参数数组而不是一组参数列表。<code>apply</code> 可以使用数组字面量（array literal），如 <code>fun.apply(this, ['eat', 'bananas'])</code>，或数组对象，</p><p>如 <code>fun.apply(this, new Array('eat', 'bananas'))</code>。</p><p>你也可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments"><code>arguments</code></a>对象作为 <code>argsArray</code> 参数。 <code>arguments</code> 是一个函数的局部变量。 它可以被用作被调用对象的所有未指定的参数。 这样，你在使用 apply 函数的时候就不需要知道被调用对象的所有参数。 你**<em>可以使用 arguments 来把所有的参数传递给被调用对象</em>**。 被调用对象接下来就负责处理这些参数。</p><br><p>从 ECMAScript 第 5 版开始，可以使用任何种类的类数组对象，就是说只要有一个 <code>length</code> 属性和<code>(0..length-1)</code>范围的整数属性。例如现在可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList"><code>NodeList</code></a> 或一个自己定义的类似 <code>{'length': 2, '0': 'eat', '1': 'bananas'}</code> 形式的对象。</p><br><p>通过语法就可以看出 call 和 apply 的在参数上的一个区别：</p><blockquote><ol><li>call 的参数是一个列表，将每个参数一个个列出来</li><li>apply 的参数是一个数组，将每个参数放到一个数组中</li></ol></blockquote><br><blockquote><p><strong>语法</strong>:func.apply(thisArg, [argsArray]);</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法调用一个函数<span class="token punctuation">,</span> 其具有一个指定的<span class="token keyword">this</span>值，以及作为一个数组（或类似数组的对象）提供的参数。 @param thisArg <span class="token keyword">this</span>指向 @param argsArray 参数数组<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">thisArg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>必选的。在 <em>func</em> 函数运行时使用的 <code>this</code> 值。请注意，<code>this</code>可能不是该方法看到的实际值：如果这个函数处于<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode">非严格模式</a>下，则指定为 <code>null</code> 或 <code>undefined</code> 时会自动替换为指向全局对象，原始值会被包装。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">argsArray<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可选的。一个数组或者类数组对象，其中的数组元素将作为单独的参数传给 <code>func</code> 函数。如果该参数的值为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null"><code>null</code></a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined"><code>undefined</code></a>，则表示不需要传入任何参数。从 ECMAScript 5 开始可以使用类数组对象</p><p>示例:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token keyword">var</span> elements <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> elements<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token comment">// ["a", "b", 0, 1, 2]</span><span class="token comment">//[ 'a', 'b', 0, 1, 2 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function-variable function">语法</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">[</span><span class="token punctuation">,</span> arg1<span class="token punctuation">[</span><span class="token punctuation">,</span> arg2<span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES5 数组方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解reduce方法</title>
      <link href="/2019/06/0149104.html"/>
      <url>/2019/06/0149104.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="语法"><a href="#语法" class="headerlink" title="语法:"></a>语法:</h1><blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js">arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span>accumulator<span class="token punctuation">,</span> currentValue<span class="token punctuation">[</span><span class="token punctuation">,</span> index<span class="token punctuation">[</span><span class="token punctuation">,</span> array<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">,</span> initialValue<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>reduce有2个参数:</p><p><em>第一个参数是回调参数</em>:</p><p><em>第二个参数是初始值(建议带上初始值)</em>:</p><p>​    如果不写初始值:sum 是数组第一个元素,并且循环从第二个元素开始.</p><p>回调函数有4个参数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">reducer函数接收<span class="token number">4</span>个参数<span class="token operator">:</span><span class="token number">1.</span> <span class="token function">Accumulator</span> <span class="token punctuation">(</span>acc<span class="token punctuation">)</span> <span class="token punctuation">(</span>累计器<span class="token punctuation">)</span><span class="token number">2.</span> Current <span class="token function">Value</span> <span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token punctuation">(</span>当前值<span class="token punctuation">)</span><span class="token number">3.</span> Current <span class="token function">Index</span> <span class="token punctuation">(</span>idx<span class="token punctuation">)</span> <span class="token punctuation">(</span>当前索引<span class="token punctuation">)</span><span class="token number">4.</span> Source <span class="token function">Array</span> <span class="token punctuation">(</span>src<span class="token punctuation">)</span> <span class="token punctuation">(</span>源数组<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">reducer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">previousValue<span class="token punctuation">,</span> currentValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> previousValue <span class="token operator">+</span> currentValue<span class="token punctuation">;</span><span class="token comment">// 1 + 2 + 3 + 4</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array1<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>reducer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// expected output: 10</span><span class="token comment">// 5 + 1 + 2 + 3 + 4</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array1<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// expected output: 15</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>reduce 对数组每个成员执行sum函数,执行到第二个会将一个值累加过来</p><p>reduce的回调函数必须return 结果,而return 的结果会作为下一次循环的累计器的值.</p><p><code>reduce</code> 可以理解为「归一」，意为海纳百川，万剑归一，完整的结构是 <code>Array.prototype.reduce(callbackfn[, initialValue])</code>，这里第二个参数并不是 thisArg 了，而是初始值 <code>initialValue</code>，关于初始值之前有介绍过。</p><ul><li>如果没有提供 <code>initialValue</code>，那么第一次调用 <code>callback</code> 函数时，<code>accumulator</code> 使用原数组中的第一个元素，<code>currentValue</code> 即是数组中的第二个元素。</li><li>如果提供了 <code>initialValue</code>，<code>accumulator</code> 将使用这个初始值，<code>currentValue</code> 使用原数组中的第一个元素。</li><li>在没有初始值的空数组上调用 <code>reduce</code> 将报错。</li></ul><p>用 JS 来模拟实现，核心逻辑如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">reduce</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">callbackfn<span class="token punctuation">,</span> initialValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 异常处理</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">"Cannot read property 'map' of null or undefined"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> callbackfn <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span>callbackfn <span class="token operator">+</span> <span class="token string">' is not a function'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> <span class="token constant">O</span> <span class="token operator">=</span> <span class="token function">Object</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> len <span class="token operator">=</span> <span class="token constant">O</span><span class="token punctuation">.</span>length <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">0</span>  <span class="token keyword">let</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> accumulator    <span class="token comment">// 新增</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>initialValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    accumulator <span class="token operator">=</span> initialValue  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment">// Step 4.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">'Reduce of empty array with no initial value'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// Step 8.</span>    <span class="token keyword">let</span> kPresent <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>kPresent <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      kPresent <span class="token operator">=</span> k <span class="token keyword">in</span> <span class="token constant">O</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>kPresent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        accumulator <span class="token operator">=</span> <span class="token constant">O</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span>       <span class="token punctuation">}</span>      k<span class="token operator">++</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>k <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token keyword">in</span> <span class="token constant">O</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> kValue <span class="token operator">=</span> <span class="token constant">O</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span>      accumulator <span class="token operator">=</span> <span class="token function">callbackfn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> accumulator<span class="token punctuation">,</span> kValue<span class="token punctuation">,</span> k<span class="token punctuation">,</span> <span class="token constant">O</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    k<span class="token operator">++</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> accumulator<span class="token punctuation">}</span><span class="token comment">// 代码亲测已通过</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这部分源码主要多了对于 <code>initialValue</code> 的处理，有初始值时比较简单，即 <code>accumulator = initialValue</code>，<code>kValue = O[0]</code>。</p><p>无初始值处理在 Step 8，循环判断当 O 及其原型链上存在属性 k 时，<code>accumulator = O[k]</code> 并退出循环，因为 <code>k++</code>，所以 <code>kValue = O[k++]</code>。</p><p>更多的数组方法有 <code>find</code>、<code>findIndex</code>、<code>forEach</code> 等，其源码实现也是大同小异，无非就是在 <code>callbackfn.call</code> 这部分做些处理，有兴趣的可以看看 TC39 和 MDN 官网，参考部分链接直达。</p><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="muyiy.cn/blog/6/6.3.html#array-prototype-filter">Array 原型方法源码实现大解密</a></p>]]></content>
      
      
      <categories>
          
          <category> ES5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reduce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闭包</title>
      <link href="/2019/05/297415.html"/>
      <url>/2019/05/297415.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="定义"><a href="#定义" class="headerlink" title="定义:"></a>定义:</h2><p>当一个函数被定义在其他函数中,一个内部函数处理可以访问自己的参数和变量,也可以访问把它嵌套在其中的父函数的参数和变量,通过函数字面量创建的函数对象包含一个链接到外部上下文的连接,这被称为闭包.</p><p align="right"> JavaScript语言精粹修订版</p><p></p><hr><ul><li>A function</li><li>对该函数的外部作用域(词法环境)的引用</li></ul><p>词法环境是每个执行上下文(堆栈框架)的一部分，是标识符之间的映射(即。局部变量名)和值。</p><p>JavaScript 中的每个函数都维护对其外部词法环境的引用。此引用用于配置在调用函数时创建的执行上下文。此引用使函数内部的代码能够“查看”函数外部声明的变量，而不管函数在何时何地被调用。</p><p>如果一个函数被一个函数调用，而这个函数又被另一个函数调用，那么就会创建一个对外部词法环境的引用链。</p><p>这个链称为作用域链。</p><hr><h3 id="作用域链和原型链"><a href="#作用域链和原型链" class="headerlink" title="作用域链和原型链"></a>作用域链和原型链</h3><p>变量取值会到创建这个变量的函数的作用域中取值，如果找不到，就会向上级作用域去查，直到查到全局作用域，这么一个查找过程形成的链条就叫做作用域链</p><h5 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h5><ul><li>作用域最顶层是windown,原型链最顶层是Object</li><li>作用域链是相对变量而言,原型是相对属性而言</li></ul><hr><p>在下面的代码中，当 foo 被调用时创建的执行上下文的词法环境形成一个闭包，闭包变量 secret:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> secret <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">trunc</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">The secret number is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>secret<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// `secret` is not directly accessible from outside `foo`</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// The only way to retrieve `secret`, is to invoke `f`</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>换句话说：在JavaScript中，函数携带对私有“状态框”的引用，只有它们（以及在同一词汇环境中声明的任何其他函数）都有访问。该框的状态对函数的来电者是看不见的，为数据隐藏和封装提供出色的机制。</p><p>请记住：JavaScript中的函数可以像变量（firs class function）一样传递，这意味着这些功能和状态可以通过您的程序传递：类似于您如何通过C ++中的类的实例。</p><p>如果JavaScript没有封闭，那么在函数中必须明确地传递更多状态，使参数列出更长，代码嘈杂。</p><p>因此，如果您想要始终访问私有状态的功能，则可以使用<em><strong>closure闭包</strong></em>。</p><p>…并且经常我们确实希望将状态与功能相关联。例如，在Java或C ++中，当您将私有实例变量和方法添加到类时，将状态与功能相关联。</p><p>在C和大多数其他常用语言中，在函数返回之后，所有本地变量都不再可访问，因为堆栈帧被销毁。在JavaScript中，如果在另一个函数中声明函数，则从IT返回后，外部功能的局部变量可以保持可访问。通过这种方式，在上面的代码中，秘密仍然可用于函数对象内部，之后从foo返回之后。</p><p>当您需要与函数关联的私有状态时，闭包非常有用。这是一个非常常见的场景——记住:JavaScript直到2015年才有class syntax，而且它仍然没有私有字段语法。闭包满足了这一需求。</p><hr><p>私有实例变量</p><p>在下面的代码中，toString函数在Car函数内部形成闭包。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token parameter">manufacturer<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">,</span> color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>manufacturer<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>model<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>year<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>color<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">'Aston Martin'</span><span class="token punctuation">,</span><span class="token string">'V8 Vantage'</span><span class="token punctuation">,</span><span class="token string">'2012'</span><span class="token punctuation">,</span><span class="token string">'Quantum Silver'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>car<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//Aston Martin V8 Vantage (2012, Quantum Silver)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数式编程:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">curry</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">===</span> fn<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>    args<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span>    <span class="token keyword">return</span> inner  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">}</span><span class="token keyword">const</span> curriedAdd <span class="token operator">=</span> <span class="token function">curry</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">curriedAdd</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>事件导向编程</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> $ <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token constant">BACKGROUND_COLOR</span> <span class="token operator">=</span> <span class="token string">'rgba(200,200,242,1)'</span><span class="token keyword">function</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token constant">BACKGROUND_COLOR</span><span class="token punctuation">}</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> onClick<span class="token punctuation">)</span><span class="token operator">&lt;</span>button<span class="token operator">&gt;</span>Set background color<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span> <span class="token comment">//点击事件触发改变了背景色</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>模块化</p><p>在下面的例子中，所有的实现细节都隐藏在一个立即执行的函数表达式中。函数tick和toString闭包私有状态和它们需要完成工作的函数。闭包使我们能够模块化和封装我们的代码。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> namespace <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">function</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">trunc</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    numbers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  n<span class="token punctuation">.</span>counter <span class="token operator">=</span> <span class="token punctuation">{</span>    tick<span class="token punctuation">,</span>    toString  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span>namespace<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">const</span> counter <span class="token operator">=</span> namespace<span class="token punctuation">.</span>countercounter<span class="token punctuation">.</span><span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span>counter<span class="token punctuation">.</span><span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//[98,9]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个例子说明了局部变量不会被复制到闭包中:闭包维护了对原始变量本身的引用。这就好像堆栈帧即使在外部函数退出后也仍然活在内存中一样。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">42</span>  <span class="token keyword">let</span> <span class="token function-variable function">inner</span>  <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">}</span>  x <span class="token operator">=</span> x<span class="token operator">+</span><span class="token number">1</span>  <span class="token keyword">return</span> inner<span class="token punctuation">}</span><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// logs 43</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在下面的代码中，三个方法分别在同一个词法环境中记录、增量和更新。</p><p>每次调用 createObject 时，都会创建一个新的执行上下文(堆栈框架) ，并创建一个全新的变量 x，以及一组新的函数(log 等) ，这些函数将封闭这个新变量。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    <span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> x<span class="token operator">++</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> x <span class="token operator">=</span> value <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token function">createObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>o<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>o<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 43</span>o<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>o<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 5</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token function">createObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 42</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果您使用的是用var声明的变量，请注意您要封闭的是哪个变量。使用var声明的变量被提升。由于引入了let和const，在现代JavaScript中这个问题要小得多。</p><p>在下面的代码中，每次循环的时候，都会创建一个新的内部函数，它在i上关闭。但是因为var i被提升到循环的外部，所有这些内部函数都在同一个变量上闭包，这意味着i(3)的最终值被打印了三次。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">}</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// The following will print `6`, three times...</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="闭包的产生"><a href="#闭包的产生" class="headerlink" title="闭包的产生:"></a>闭包的产生:</h2><blockquote><p><em><strong>当函数可以记住并访问所在的词法作用域,即使函数是在当前的词法作用域之外执行,这时就产生了闭包.</strong></em></p><p>本质上无论何时何地,如果将函数(访问他们各自的词法作用域)当作第一级的值类型并导出传递,就能看到闭包在这些函数的应用.定时器、事件监听器、Ajax请求,跨窗口通信,web work或其他任何的异步或者同步任务中,<em><strong>凡是使用了回调函数,实际上就是在使用闭包</strong></em>    </p><p align="right">你不知知道的JavaScript上卷</p></blockquote><p>IIFE(立即调用函数表达式)并不是观察闭包最好的例子,但是的确创建了闭包,并且也是最常用来创建可以被封闭的闭包工具.</p><p>从技术上来讲,闭包是发生在定义时.</p><p>一个经典面试题</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> i <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> i<span class="token operator">*</span><span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>能否解释下会打印什么?为什么?我们后面给出</p><p>同样的这个demo</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//10个10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> i2 <span class="token operator">=</span> i    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i2<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//0-9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">i2</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i2<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//0-9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先因为 <code>setTimeout</code> 是个异步函数，所有会先把循环全部执行完毕，这时候 <code>i</code> 就是 6 了，所以会输出五个 6。</p><p>解决办法两种，第一种使用闭包</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">j</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> j <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//1~5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二种就是使用 <code>setTimeout</code> 的第三个参数</p><pre class="line-numbers language-none"><code class="language-none">for ( var i=1; i&lt;=5; i++) {setTimeout( function timer(j) {console.log( j );}, i*1000, i);}//1~5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三种就是使用 <code>let</code> 定义 <code>i</code> 了</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> i <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> i<span class="token operator">*</span><span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//1~5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2019/05/297415/1639494322510.png" class="" width="1639494322510"><h2 id="最后的要点"><a href="#最后的要点" class="headerlink" title="最后的要点:"></a>最后的要点:</h2><ul><li><p>当在JavaScript闭包中声明一个函数时。</p></li><li><p>从另一个函数内部返回一个函数是闭包的典型例子，因为外部函数内部的状态对返回的内部函数是隐式可用的，即使外部函数已经完成执行。</p></li><li><p>每当在函数中使用eval()时，都会使用闭包。你eval的文本可以引用函数的局部变量，在非严格模式下，你甚至可以通过使用eval(‘var foo =…’)创建新的局部变量。</p></li><li><p>当你在函数中使用new Function(…)(Function构造函数)时，它不会在它的词法环境中关闭:而是在全局上下文中关闭。新函数不能引用外部函数的局部变量。</p></li><li><p>JavaScript中的闭包就像在函数声明处保留对作用域的引用(而不是副本)，而函数声明又保留对其外部作用域的引用，以此类推，一直到作用域链的顶部的全局对象。</p></li><li><p>闭包是在函数声明时创建的;此闭包用于在调用函数时配置执行上下文。</p></li><li><p>每次调用函数时，都会创建一组新的局部变量。</p></li></ul><h4 id="在一个函数使用了外部函数中的局部变量-使用变量的地方发生了闭包现象-变量定义所在的函数称为闭包函数"><a href="#在一个函数使用了外部函数中的局部变量-使用变量的地方发生了闭包现象-变量定义所在的函数称为闭包函数" class="headerlink" title="在一个函数使用了外部函数中的局部变量,使用变量的地方发生了闭包现象,变量定义所在的函数称为闭包函数"></a><strong>在一个函数使用了外部函数中的局部变量,使用变量的地方发生了闭包现象,变量定义所在的函数称为闭包函数</strong></h4><p><strong>优点:防止变量污染作用域</strong></p><p><strong>缺点:不释放则会导致内存泄漏</strong></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 理解闭包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 数组方法总结</title>
      <link href="/2019/05/2850036.html"/>
      <url>/2019/05/2850036.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p><em>是值的有序集合，其中值叫做元素，每个元素有一个数值表示的位置，叫做索引</em><br>Js数组是无类型限制.即数组中的元素可以是任何类型，同一个数组的不同元素可以是不同的类型.<br>JS数组是动态变化的因此创建时无需声明一个固定大小，也无需在大小变化时重新为他们分配空间，JS 数组可以是稀疏的也可以是连续的</p><p>JS 数组是一种特殊的 JS 对象，因此数组索引更想属性名，只不过碰巧是整数<br>数组从 Array.prototype 继承属性</p><p>创建数组:</p><ul><li><p>数组字面量</p></li><li><p>可迭代对象使用…</p></li><li><p>Array（）构造函数</p></li><li><p>工厂方法 Array.of（）</p></li><li><p>工厂方法: Array.from（） </p><hr><p><strong><em>ES5中定义了9</em>个新数组方法来遍历、映射、过滤、检测、简化和搜索数组.</strong>*</p><blockquote><p>在大多数情况下，调用提供的函数使用三个参数：</p><p><em><strong>数组元素、元素的索引和数组本身。</strong></em></p><p>通常，只需要第一个参数值，可以忽略后两个参数。</p><p>大多数ECMAScript 5数组方法的第一个参数是一个<em><strong>函数</strong></em></p><p>第二个参数是可选的。如果有第二个参数，则<em><strong>调用的函数被看做是第二个参数的方法</strong></em>。</p><p>也就是说，在调用函数时传递进去的第二个参数作为它的this关键字的值来使用。被调用的函数的返回值非常重要，但是不同的方法处理返回值的方式也不一样。</p><p>ECMAScript 5中的数组方法都不会修改它们调用的原始数组。当然，传递给这些方法的函数是可以修改这些数组的。                                                                                <em>—-节选自JavaScript第六版7.9</em></p></blockquote><h2 id="Array-from（）"><a href="#Array-from（）" class="headerlink" title="Array.from（）"></a>Array.from（）</h2><p>Array.from()是es6新增的工厂方法.</p><p>这个方法期待一个可迭代对象或类数组对象作为其第一个参数,并返回包含该对象元素的新数组,</p><p>当传入第二个参数为函数的时候,那么在构建新数组时,源对象的每个元素都会传入这个函数,这个函数的返回值,将替代原始值称为新数组的元素,构建执行映射侠侣高于先构建数组再把它映射成另一个新数组</p><p>简单说,可以使用其参数值作为数组元素来创建并返回新数组<br>和</p></li></ul><blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js">Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arrayLike<span class="token punctuation">[</span><span class="token punctuation">,</span> mapFn<span class="token punctuation">[</span><span class="token punctuation">,</span> thisArg<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><ul><li><p><code>arrayLike</code></p><p>想要转换成数组的伪数组对象或可迭代对象</p></li><li><p><code>mapFn</code> <strong>可选</strong></p><p>如果指定了该参数，新数组中的每个元素会执行该回调函数。</p></li><li><p><code>thisArg</code> <strong>可选</strong></p><p>可选参数，执行回调函数 <code>mapFn</code> 时 <code>this</code> 对象。</p><p>Array.from（）方法对一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// expected output: Array ["f", "o", "o"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// expected output: Array [2, 4, 6]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr></li></ul><h3 id="filter"><a href="#filter" class="headerlink" title="filter()"></a><em>filter</em>()</h3><hr><p>filter()方法返回的数组元素是一个调用的数组子集,filter()会跳过稀疏数组中缺少的元素，它的返回数组总是稠密的</p><p>语法:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// Arrow function</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token comment">// Callback function</span><span class="token function">filter</span><span class="token punctuation">(</span>callbackFn<span class="token punctuation">)</span><span class="token function">filter</span><span class="token punctuation">(</span>callbackFn<span class="token punctuation">,</span> thisArg<span class="token punctuation">)</span><span class="token comment">// Inline callback function</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> thisArg<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数:</p><ul><li><code>callback</code></li></ul><p>​    为数组中每个元素执行的函数，该函数接收一至三个参数：</p><ul><li><p><code>currentValue</code></p><p>数组中正在处理的当前元素。</p></li><li><p><code>index</code> 可选</p><p>数组中正在处理的当前元素的索引。</p></li><li><p><code>array</code> 可选</p><p><code>forEach()</code> 方法正在操作的数组。</p></li><li><p><code>thisArg</code> 可选</p></li></ul><p>可选参数。当执行回调函数 <code>callback</code> 时，用作 <code>this</code> 的值。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">]</span><span class="token punctuation">;</span>smallvalue <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x <span class="token operator">&gt;</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>smallvalue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[120]</span>everyother <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>everyother<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[ 0, 4, 91, 120 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上文提到filter()会跳过稀疏数组缺少的元素,通这个方法我们可以压缩稀疏数组的空缺.删除undefined、null元素,</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> dense <span class="token operator">=</span> sparse<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> x<span class="token operator">!==</span><span class="token keyword">undefined</span><span class="token operator">&amp;&amp;</span>x<span class="token operator">!==</span><span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a><em>forEach</em>()</h3><p>forEach() 方法对数组的每个元素执行一次给定的函数。</p><p>语法:</p><blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// Arrow function</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token comment">// Callback function</span><span class="token function">forEach</span><span class="token punctuation">(</span>callbackFn<span class="token punctuation">)</span><span class="token function">forEach</span><span class="token punctuation">(</span>callbackFn<span class="token punctuation">,</span> thisArg<span class="token punctuation">)</span><span class="token comment">// Inline callback function</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> thisArg<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>示例:</p><p>转换for循环为foreach</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'item1'</span><span class="token punctuation">,</span> <span class="token string">'item2'</span><span class="token punctuation">,</span> <span class="token string">'item3'</span><span class="token punctuation">]</span><span class="token keyword">const</span> copyItems <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment">// before</span><span class="token comment">// for (let i = 0; i &lt; items.length; i++) {</span><span class="token comment">//     copyItems.push(items[i])</span><span class="token comment">// }</span><span class="token comment">// after</span>items<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    copyItems<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>copyItems<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="find"><a href="#find" class="headerlink" title="find()"></a><em>find</em>()</h3><p>find()方法<em><strong>返回</strong></em>所提供数组中满足所提供测试函数的第一个元素的<em><strong>值</strong></em>。如果没有值满足测试函数，则返回undefined。</p><p>示例:</p><p>查找素数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;=</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>element <span class="token operator">%</span> start<span class="token operator">++</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> element <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>isPrime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined, not found</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>isPrime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// Declare array with no elements at indexes 2, 3, and 4</span><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// Shows all indexes, not just those with assigned values</span>array<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Visited index '</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token string">' with value '</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Shows all indexes, including deleted</span>array<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// Delete element 5 on first iteration</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Deleting array[5] with value '</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">delete</span> array<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// Element 5 is still visited even though deleted</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Visited index '</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token string">' with value '</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//output </span><span class="token comment">//Visited index  0  with value  0</span><span class="token comment">//Visited index  1  with value  1</span><span class="token comment">//Visited index  2  with value  undefined</span><span class="token comment">//Visited index  3  with value  undefined</span><span class="token comment">//Visited index  4  with value  undefined</span><span class="token comment">//Visited index  5  with value  5</span><span class="token comment">//Visited index  6  with value  6</span><span class="token comment">//Deleting array[5] with value  5</span><span class="token comment">//Visited index  0  with value  0</span><span class="token comment">//Visited index  1  with value  1</span><span class="token comment">//Visited index  2  with value  undefined</span><span class="token comment">//Visited index  3  with value  undefined</span><span class="token comment">//Visited index  4  with value  undefined</span><span class="token comment">//Visited index  5  with value  undefined</span><span class="token comment">//Visited index  6  with value  6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用箭头函数和解构</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> inventory <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">'apples'</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">'bananas'</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">'cherries'</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> result <span class="token operator">=</span> inventory<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> name <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> name <span class="token operator">===</span> <span class="token string">'cherries'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment">// { name: 'cherries', quantity: 5 }</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><hr><h4 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex()"></a><em><strong>findIndex()</strong></em></h4><p>findindex()方法:</p><p><em><strong>返回</strong></em>数组中满足提供的测试函数的第一个元素的<strong>索引</strong>。否则，它返回，表明没有元素通过测试。 <code>-1</code></p><p>示例:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"cantaloupe"</span><span class="token punctuation">,</span> <span class="token string">"blueberries"</span><span class="token punctuation">,</span> <span class="token string">"grapefruit"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> index <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token parameter">fruit</span> <span class="token operator">=&gt;</span> fruit <span class="token operator">===</span> <span class="token string">"blueberries"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fruits<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// blueberries</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="every"><a href="#every" class="headerlink" title="every()"></a><em>every()</em></h3><p>every()方法测试数组中的<em><strong>所有元素</strong></em><em><strong>是否通过</strong></em>提供的函数实现的测试。它返回一个布尔值</p><p>语法:</p><blockquote></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">isBelowThreshold</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">currentValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> currentValue <span class="token operator">&lt;</span> <span class="token number">40</span><span class="token punctuation">;</span><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array1<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>isBelowThreshold<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="some"><a href="#some" class="headerlink" title="some()"></a><em>some()</em></h3><p>该<em><em>some()<strong>方法测试数组中是否</strong></em>至少有一个元素</em>**通过了提供的函数实现的测试。</p><p>如果在数组中找到一个元素，提供的函数为其返回真值，则<em><strong>返回真值</strong></em>；否则返回false。它不会修改数组。</p><p>示例:</p><pre class="line-numbers language-none"><code class="language-none">const isBelowThreshold = (currentValue) =&gt; currentValue &lt; 40;const array1 = [1, 30, 39, 29, 10, 13,70];console.log(array1.every(isBelowThreshold)); //false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <br></p><p>注意，一旦every()和some()确认该返回什么值它们就会停止遍历数组元素。</p><p><em><strong>some()在判定函数第一次返回true后就返回true，但如果判定函数一直返回false，它将会遍历整个数组。</strong></em></p><p><em><strong>every()恰好相反：它在判定函数第一次返回false后就返回false，但如果判定函数一直返回true，它将会遍历整个数组。</strong></em></p><p>注意，根据数学上的惯例，在空数组上调用时，every()返回true，some()返回false。                   </p><hr><h3 id="map"><a href="#map" class="headerlink" title="map()"></a><em>map</em>()</h3><p>map()方法创建一个新数组(创建新映射的对象),其中填充了对调用数组中的每个元素调用提供的函数.</p><p>传递给map()的函数的调用方式和传递给forEach()的函数的调用方式一样。</p><p>但传递给map()的函数应该有返回值。注意，map()返回的是新数组：它不修改调用的数组。如果是稀疏数组，返回的也是相同方式的稀疏数组：它具有相同的长度，相同的缺失元素。</p><p>注意,</p><p>示例:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> b <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x <span class="token operator">*</span> x <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[ 1, 4, 9, 16 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h3 id="reduce-和-reduceRight"><a href="#reduce-和-reduceRight" class="headerlink" title="reduce()  和  reduceRight()"></a><em>reduce()  和  reduceRight()</em></h3><p>reduce()和reduceRight()方法使用指定的函数将数组元素进行组合，生成单个值。这在函数式编程中是常见的操作，也可以称为“注入”和“折叠”。</p><p><em><strong>reduce是三种运算的合成</strong></em></p><ul><li><strong>遍历</strong></li><li><strong>变形</strong></li><li><strong>累积</strong></li></ul><p><strong>reduce()需要两个参数(可以接收4个参数:<em>previousValue,currentValue, currentIndex,array</em>)</strong></p><ul><li><strong><em>PreviouseValue:第一个参数是上一次调用产生的值<code>callbackFn</code></em>(目前位置归并操纵的累计结果)。在第一次调用时（<code>initialValue</code>如果指定），否则为 的值<code>array[0]</code></strong>*</li><li><em><strong>currentValue:第二个参数是一个传递给函数的初始值(可选),表示当前正在处理的数组元素</strong></em></li><li><em><strong>currentIndex</strong></em>:<em><strong>第三个参数</strong></em><em><strong>表示正在处理的数组元素的索引位置，若提供init值，则索引为0，否则索引为1</strong></em></li><li><em><strong><code>array</code>: 第四个参数要遍历的数组。</strong></em></li></ul><p>reduce()方法对数组的每个元素执行用户提供的“reducer”回调函数，按顺序传递对前一个元素计算的返回值。跨数组的所有元素运行reducer的最终结果是一个单一值。</p><p>第一次运行回调时，没有“前一次计算的返回值”。如果提供，则可以在其位置使用一个初始值。否则使用数组元素0作为初始值，迭代从下一个元素开始(索引1而不是索引0)。</p><hr><p>示例:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">reducer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">previousValue<span class="token punctuation">,</span> currentValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> previousValue <span class="token operator">+</span> currentValue<span class="token punctuation">;</span><span class="token comment">// 1 + 2 + 3 + 4</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array1<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>reducer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// expected output: 10</span><span class="token comment">// 5 + 1 + 2 + 3 + 4</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array1<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// expected output: 15</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>reduceRight与reduce 类似,是从高索引向低索引(从右向左)处理数组而不是从低到搞,reduce 和reduceRight 都不接收用于指定归并函数this值的可选参数,通过用可u按的初始值取代这个值.</p><p>只要是能够把2个值(比如两个对象)组合成一个同类型值的函数,都可以用归并函数</p><hr><h3 id="flat-flatMap"><a href="#flat-flatMap" class="headerlink" title="flat()  flatMap()"></a><em>flat()  flatMap()</em></h3><p>flat()方法和flatmap()方法是ES9中的方法用于创建并返回一个新数组,这个数组包含与他调用flat()方法数组相同的元素,其本身也是数组的元素会被’’打平’’填充到返回数组中.</p><p>示例:</p><pre class="line-numbers language-none"><code class="language-none">let a = [1,3,[4,[5,6]]]a.falt(1)  //[1,3,4,[5,6]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>flatMap()方法和map方法类似,但是flatMap()返回的数组会被自动’’打平’’而且执行效率高于flat()</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> baba<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"hello world"</span><span class="token punctuation">,</span><span class="token string">"the definitive guide"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> words <span class="token operator">=</span> baba<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token parameter">baba</span> <span class="token operator">=&gt;</span> baba<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span>log<span class="token operator">=</span>words <span class="token comment">//["hello","world","the","definitive","guide"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>flatMap()可以把数组中的一个元素映射为输出数组中的多个元素.flatMap()允许把输入元素映射为空数组 ,这样打平后并不会有元素出现再数组中:</p><hr><h3 id="concat"><a href="#concat" class="headerlink" title="concat"></a><em>concat</em></h3><p>concat()方法用于两或者多个数组进行合并,连接数组.如果这些参数中有数组,则凭借的是它们的元素而非数组本身.注意,concat()并不会递归打平数组的数组,并不修改调用的数组.会创建调用它的数组副本</p><p>语法:</p><blockquote><pre class="line-numbers language-none"><code class="language-none">concat()concat(value0)concat(value0, value1)concat(value0, value1, ... , valueN)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>例:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment">//[1,2,3,4,5]</span>a<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// [1,2,3,4,6,7,8]</span>a<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">//[ 1, 2, 3, 4, 4, [ 6, 7 ] ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><p>实现栈和队列的操纵</p><ul><li><strong>push()</strong></li><li><strong>pop()</strong></li><li><strong>shift()</strong></li><li><strong>unshift()</strong></li></ul><p>明确一张图,栈要遵循’后进先出’的原则.</p><hr><p>栈可以实现一个数组,总是从数组的一端插入和删除元素.这一段被称为栈顶</p><p>x86-64中,程序栈存放在内存某个区域,栈向下增长,那么栈顶元素的地址是所有栈中元素地址最低的.</p><img src="https://tva1.sinaimg.cn/large/006aANDQgy1gxn00ibmk0j309m0gbgon.jpg"><img src="https://tva1.sinaimg.cn/large/006aANDQgy1gxn007i55fj30ly0pftkn.jpg"><p>push 压 入栈</p><p> pop 弹出栈</p><img src="https://tva1.sinaimg.cn/large/006aANDQgy1gxmzzih53nj30sv0rswgg.jpg"><p>push()方法用于在数组尾部添加一个或者多个元素,并返回数组的新长度,不会打平参数.</p><p>pop()用于删除数组最后的元素,减少数组长度,并返回删除的值.</p><br><p>shift()方法删除数组的第一个元素,所有后续元素都会向下移动一个位置,以此来占据数组开头空出的位置 unshift()方法用于在数组开头添加一个或者多个元素,已有元素的索引会相应向更高索引移动,并返回数组的新长度.</p><hr><h3 id="slice-splice-fill-copywithin-方法"><a href="#slice-splice-fill-copywithin-方法" class="headerlink" title="slice() splice() fill() copywithin() 方法"></a><em><strong>slice() splice() fill() copywithin() 方法</strong></em></h3><p><em><strong>Array.splice()方法</strong></em> </p><p> splice直译: 拼接.</p><p>用于处理数组连续区间(或者子数组,或数组’切片’)的方法,用于提取、替换、填充和复制切片的</p><p><strong>splice()会修改调用的原数组</strong>,<strong>返回已经删除项</strong></p><p>splice可以接受N个参数.</p><p>第一个参数表示索引(起始位置)必须选择;</p><p>第二个参数表示删除数组的元素个数(从第一个参数的索引开始) 可选项;</p><p>第三个参数表示要添加到数组的元素;</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">let</span> c <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//[3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><p><em><strong>Array.slice()方法</strong></em></p><p><strong>语法</strong><br><code>array.slice([begin[, end]])</code></p><p> slice 直译: 切片.</p><blockquote><p>MDN:会将数组的一部分浅拷贝一部分返回到新数组对象,原始数组对象不会被修改</p></blockquote><p>如果只<strong>指定一个参数,那么返回的数组将包含:从这个开始的位置到数组结尾的所有数组元素</strong>,如果出现负数,则表示相对于数组中最后一个元素的位置.</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> animals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ant'</span><span class="token punctuation">,</span> <span class="token string">'bison'</span><span class="token punctuation">,</span> <span class="token string">'camel'</span><span class="token punctuation">,</span> <span class="token string">'duck'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>animals<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// expected output: Array ["camel", "duck", "elephant"]</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">let</span> c <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">let</span> d <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">let</span> e <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[2,3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[1,2,3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="indexOf-lastIndexOf-includes"><a href="#indexOf-lastIndexOf-includes" class="headerlink" title="indexOf()   lastIndexOf()  includes()"></a><em><strong>indexOf()   lastIndexOf()  includes()</strong></em></h3><p>indexOf() 方法和 lastIndexOf() 传入目标值,搜索整个数组中没有找到则返回-1,找到就返回目标值的索引,同时这2个方法不接收函数作为参数</p><hr>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>了解localStorage与seeionStorage</title>
      <link href="/2019/05/2361593.html"/>
      <url>/2019/05/2361593.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><em>seeionStorage</em><strong>会话存储</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>button <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>存<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>button <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>取<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>button <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>删除<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>button <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>清空<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>      <span class="token comment">//sessionStorage 最大存储数据量为5M;</span>      <span class="token comment">//方法: setItem:(key,value) value 必须是字符串;</span>      <span class="token comment">//getItem(key) 取;</span>      <span class="token comment">//removeItem(key) 删除;</span>      <span class="token comment">//clear() 清空;</span>      <span class="token keyword">var</span> btns <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      btns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'uname'</span><span class="token punctuation">,</span> input<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      btns<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'uname'</span><span class="token punctuation">,</span> input<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//取值打印直接调用这个方法</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'uname'</span><span class="token punctuation">,</span> input<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      btns<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          sessionStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">'uname'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      btns<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          sessionStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>localStorage</em><strong>本地存储</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> id<span class="token operator">=</span><span class="token string">"username"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> id<span class="token operator">=</span><span class="token string">"remeber"</span><span class="token operator">&gt;</span>记住用户名    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>button <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"set"</span><span class="token operator">&gt;</span>存<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>button <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"get"</span><span class="token operator">&gt;</span>取<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>button <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"remove"</span><span class="token operator">&gt;</span>删除<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>button <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"clear"</span><span class="token operator">&gt;</span>清空<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span> <span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>        <span class="token comment">//localStorage是统一域名下数据共用方法与会话存储一致</span>        <span class="token keyword">var</span> username <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#username'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> remeber <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#remeber'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            username<span class="token punctuation">.</span>value <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            remeber<span class="token punctuation">.</span>checked <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        remeber<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>checked<span class="token punctuation">)</span> <span class="token punctuation">{</span>                localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span> input<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> BOM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 如何获取本地存储 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>touch事件的运用</title>
      <link href="/2019/05/1817793.html"/>
      <url>/2019/05/1817793.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>移动端的触摸事件方法</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>        div <span class="token punctuation">{</span>            width<span class="token operator">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>            height<span class="token operator">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> cyan<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>        <span class="token comment">//e.touches  屏幕上的所有手指信息;</span>        <span class="token comment">//e.targetTouches 目标元素身上的手指信息;</span>        <span class="token comment">//e.changedTouches 可以获取从无到有,从有到无的手指信息;</span>        <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>        div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'touchend'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'不想负责'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'touchmove'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我要摸你了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'touchstart'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我又摸了你'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'touchcancel'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'不给摸'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>缓动动画效果</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">  <span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>        div <span class="token punctuation">{</span>            position<span class="token operator">:</span> absolute<span class="token punctuation">;</span>            width<span class="token operator">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>            height<span class="token operator">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> cyan<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>        <span class="token keyword">function</span> <span class="token function">animate</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> target<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">clearInterval</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>            obj<span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> step <span class="token operator">=</span> <span class="token punctuation">(</span>target <span class="token operator">-</span> obj<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span>                step <span class="token operator">=</span> step <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span> <span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>steep<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>offsetLeft <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">clearInterval</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>                    callback <span class="token operator">&amp;&amp;</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                obj<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> obj<span class="token punctuation">.</span>offsetLeft <span class="token operator">+</span> step <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">animate</span><span class="token punctuation">(</span>div<span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">'purple'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">animate</span><span class="token punctuation">(</span>div<span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>筋斗云的demo</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>        <span class="token operator">*</span> <span class="token punctuation">{</span>            padding<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            margin<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        body <span class="token punctuation">{</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>box <span class="token punctuation">{</span>            width<span class="token operator">:</span> <span class="token number">415</span>px<span class="token punctuation">;</span>            height<span class="token operator">:</span> <span class="token number">42</span>px<span class="token punctuation">;</span>            margin<span class="token operator">:</span> <span class="token number">200</span>px auto<span class="token punctuation">;</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> #fff<span class="token punctuation">;</span>            position<span class="token operator">:</span> relative<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ul <span class="token punctuation">{</span>            list<span class="token operator">-</span>style<span class="token operator">:</span> none<span class="token punctuation">;</span>            position<span class="token operator">:</span> relative<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        li <span class="token punctuation">{</span>            float<span class="token operator">:</span> left<span class="token punctuation">;</span>            width<span class="token operator">:</span> <span class="token number">83</span>px<span class="token punctuation">;</span>            height<span class="token operator">:</span> <span class="token number">42</span>px<span class="token punctuation">;</span>            text<span class="token operator">-</span>align<span class="token operator">:</span> center<span class="token punctuation">;</span>            font<span class="token operator">:</span> <span class="token number">500</span> <span class="token number">15</span>px<span class="token operator">/</span><span class="token number">42</span>px <span class="token string">"微软雅黑"</span><span class="token punctuation">;</span>            cursor<span class="token operator">:</span> pointer<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        span <span class="token punctuation">{</span>            position<span class="token operator">:</span> absolute<span class="token punctuation">;</span>            left<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            top<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            width<span class="token operator">:</span> <span class="token number">83</span>px<span class="token punctuation">;</span>            height<span class="token operator">:</span> <span class="token number">42</span>px<span class="token punctuation">;</span>            background<span class="token operator">-</span>image<span class="token operator">:</span> linear<span class="token operator">-</span><span class="token function">gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> cyan <span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">,</span> skyblue <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">'box'</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">'cloud'</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>Civilization<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token constant">IV</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>Theme<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>Music<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>Baba<span class="token operator">-</span>Yetu<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>        window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> lis <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> cloud <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> current <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lis<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mouseenter'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">animate</span><span class="token punctuation">(</span>cloud<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offsetLeft<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mouseleave'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">animate</span><span class="token punctuation">(</span>cloud<span class="token punctuation">,</span> current<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offsetLeft<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>轮播图(原生js)</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">"X-UA-Compatible"</span> content<span class="token operator">=</span><span class="token string">"IE=edge"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"./js/animate.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"./js/jquery-1.10.1.min.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"./js/swiper-3.4.2.min.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>    <span class="token operator">*</span> <span class="token punctuation">{</span>        margin<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        padding<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    li <span class="token punctuation">{</span>        list<span class="token operator">-</span>style<span class="token operator">:</span> none<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    a <span class="token punctuation">{</span>        text<span class="token operator">-</span>decoration<span class="token operator">:</span> none<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span>box <span class="token punctuation">{</span>        position<span class="token operator">:</span> relative<span class="token punctuation">;</span>        width<span class="token operator">:</span> <span class="token number">721</span>px<span class="token punctuation">;</span>        height<span class="token operator">:</span> <span class="token number">455</span>px<span class="token punctuation">;</span>        margin<span class="token operator">:</span> <span class="token number">100</span>px auto<span class="token punctuation">;</span>        overflow<span class="token operator">:</span> hidden<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span>box ul <span class="token punctuation">{</span>        position<span class="token operator">:</span> absolute<span class="token punctuation">;</span>        width<span class="token operator">:</span> <span class="token number">600</span><span class="token operator">%</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span>box ul li <span class="token punctuation">{</span>        float<span class="token operator">:</span> left<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span>prev<span class="token punctuation">,</span>    <span class="token punctuation">.</span>next <span class="token punctuation">{</span>        display<span class="token operator">:</span> none<span class="token punctuation">;</span>        position<span class="token operator">:</span> absolute<span class="token punctuation">;</span>        top<span class="token operator">:</span> <span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>        width<span class="token operator">:</span> <span class="token number">25</span>px<span class="token punctuation">;</span>        height<span class="token operator">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>        background<span class="token operator">-</span>color<span class="token operator">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        color<span class="token operator">:</span> #fff<span class="token punctuation">;</span>        text<span class="token operator">-</span>align<span class="token operator">:</span> center<span class="token punctuation">;</span>        line<span class="token operator">-</span>height<span class="token operator">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>        transform<span class="token operator">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span>prev <span class="token punctuation">{</span>        left<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span>next <span class="token punctuation">{</span>        right<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span>pagination <span class="token punctuation">{</span>        position<span class="token operator">:</span> absolute<span class="token punctuation">;</span>        bottom<span class="token operator">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>        left<span class="token operator">:</span> <span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>        width<span class="token operator">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span>        height<span class="token operator">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>        background<span class="token operator">-</span>color<span class="token operator">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        transform<span class="token operator">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span>pagination li <span class="token punctuation">{</span>        width<span class="token operator">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>        height<span class="token operator">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>        float<span class="token operator">:</span> left<span class="token punctuation">;</span>        margin<span class="token operator">:</span> <span class="token number">2</span>px <span class="token number">5</span>px<span class="token punctuation">;</span>        border<span class="token operator">-</span>radius<span class="token operator">:</span> <span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>        border<span class="token operator">:</span> <span class="token number">1</span>px solid #fff<span class="token punctuation">;</span>        box<span class="token operator">-</span>sizing<span class="token operator">:</span> border<span class="token operator">-</span>box<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span>pagination li<span class="token punctuation">.</span>current <span class="token punctuation">{</span>        background<span class="token operator">-</span>color<span class="token operator">:</span> #fff<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"box container"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"Swiper"</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">'wrapper'</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"./upload/focus.jpg"</span> alt<span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">'wrapper'</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"./upload/focus1.jpg"</span> alt<span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">'wrapper'</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"./upload/focus2.jpg"</span> alt<span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">'wrapper'</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"./upload/focus3.jpg"</span> alt<span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"javascript:;"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">'prev '</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span>lt<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"javascript:;"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">'next '</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span>gt<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>ol <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">'pagination'</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>ol<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>        <span class="token keyword">var</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> prev <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.prev'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> next <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.next'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        box<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mouseenter'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            prev<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"block"</span><span class="token punctuation">;</span>            next<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"block"</span><span class="token punctuation">;</span>            <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        box<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mouseleave'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            prev<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>            next<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>            <span class="token function">autoPlayPic</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment">// 注册prev和next事件隐藏和显示</span>        <span class="token keyword">var</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> ol <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'ol'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> focusWidth <span class="token operator">=</span> box<span class="token punctuation">.</span>offsetWidth<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ul<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            li<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            ol<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//创建li监听 点击事件让li的数量随内容数量</span>            li<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ol<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    ol<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">'current'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//遍历数组元素,移除数组其他元素</span>                <span class="token punctuation">}</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'current'</span><span class="token punctuation">;</span>                <span class="token comment">//用setAttribute设值 时候要用getAttribute拿值</span>                <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">animate</span><span class="token punctuation">(</span>ul<span class="token punctuation">,</span> <span class="token operator">-</span>index <span class="token operator">*</span> focusWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>                num <span class="token operator">=</span> circle <span class="token operator">=</span> index<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        ol<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'current'</span><span class="token punctuation">;</span> <span class="token comment">// ol.children[0].classList.add('current');</span>        <span class="token comment">//无缝滚动</span>        <span class="token keyword">var</span> first <span class="token operator">=</span> ul<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        ul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> circle <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        num <span class="token operator">=</span> ul<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        prev<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                num <span class="token operator">=</span> ul<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                ul<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token operator">-</span>num <span class="token operator">*</span> focusWidth<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            num<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token function">animate</span><span class="token punctuation">(</span>ul<span class="token punctuation">,</span> <span class="token operator">-</span>num <span class="token operator">*</span> focusWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//将prev与圈圈事件相绑定</span>            circle<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>circle <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                circle <span class="token operator">=</span> ol<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">removeElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        next<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">===</span> ul<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ul<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            num<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token function">animate</span><span class="token punctuation">(</span>ul<span class="token punctuation">,</span> <span class="token operator">-</span>num <span class="token operator">*</span> focusWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>            circle<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>circle <span class="token operator">==</span> ol<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                circle <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">removeElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token function">autoPlayPic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script language<span class="token operator">=</span><span class="token string">"javascript"</span><span class="token operator">&gt;</span>        <span class="token keyword">var</span> mySwiper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Swiper</span><span class="token punctuation">(</span><span class="token string">'.swiper-container'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            grabCursor<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>移动端轮播图实现效果(原生js)</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">"X-UA-Compatible"</span> content<span class="token operator">=</span><span class="token string">"IE=edge"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"./js/index.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>        <span class="token operator">*</span> <span class="token punctuation">{</span>            margin<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            padding<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        html<span class="token punctuation">,</span>        body <span class="token punctuation">{</span>            width<span class="token operator">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>            height<span class="token operator">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        li <span class="token punctuation">{</span>            list<span class="token operator">-</span>style<span class="token operator">:</span> none<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>box <span class="token punctuation">{</span>            position<span class="token operator">:</span> relative<span class="token punctuation">;</span>            width<span class="token operator">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>            <span class="token comment">/* height: 75px; */</span>            overflow<span class="token operator">:</span> hidden<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>box ul <span class="token punctuation">{</span>            width<span class="token operator">:</span> <span class="token number">500</span><span class="token operator">%</span><span class="token punctuation">;</span>            margin<span class="token operator">-</span>left<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>            overflow<span class="token operator">:</span> hidden<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>box ul li <span class="token punctuation">{</span>            float<span class="token operator">:</span> left<span class="token punctuation">;</span>            width<span class="token operator">:</span> <span class="token number">20</span><span class="token operator">%</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>box ul li img <span class="token punctuation">{</span>            width<span class="token operator">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>            display<span class="token operator">:</span> block<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>box <span class="token punctuation">.</span>pagination <span class="token punctuation">{</span>            position<span class="token operator">:</span> absolute<span class="token punctuation">;</span>            bottom<span class="token operator">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>            right<span class="token operator">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>            width<span class="token operator">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>            height<span class="token operator">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>            <span class="token comment">/* background-color: red; */</span>            z<span class="token operator">-</span>index<span class="token operator">:</span> <span class="token number">99</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>box <span class="token punctuation">.</span>pagination li <span class="token punctuation">{</span>            width<span class="token operator">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>            height<span class="token operator">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>            float<span class="token operator">:</span> left<span class="token punctuation">;</span>            margin<span class="token operator">:</span> <span class="token number">0</span> <span class="token number">3</span>px<span class="token punctuation">;</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> #fff<span class="token punctuation">;</span>            border<span class="token operator">-</span>radius<span class="token operator">:</span> <span class="token number">2</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>box <span class="token punctuation">.</span>pagination li<span class="token punctuation">.</span>current <span class="token punctuation">{</span>            width<span class="token operator">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"box"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"./upload/focus3.jpg"</span> alt<span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"./upload/focus1.jpg"</span> alt<span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"./upload/focus2.jpg"</span> alt<span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"./upload/focus3.jpg"</span> alt<span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"./upload/focus1.jpg"</span> alt<span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>ol <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">'pagination'</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"current"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>ol<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//js部分</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> ul <span class="token operator">=</span> box<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> w <span class="token operator">=</span> box<span class="token punctuation">.</span>offsetWidth<span class="token punctuation">;</span>    <span class="token keyword">var</span> ol <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'ol'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//利用定时器自动轮播</span>    <span class="token comment">//添加一个鼠标按下停止 松开播放</span>    <span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token function">autoPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">autoPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> translatex <span class="token operator">=</span> <span class="token operator">-</span>index <span class="token operator">*</span> w<span class="token punctuation">;</span>            ul<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transition <span class="token operator">=</span> <span class="token string">'all .3s'</span><span class="token punctuation">;</span>            ul<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">translateX(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>translatex<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment">//手动轮播</span>    <span class="token keyword">var</span> startX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> moveX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    ul<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'touchstart'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// console.log(timer);</span>        <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>        timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        startX <span class="token operator">=</span> e<span class="token punctuation">.</span>targetTouches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>pageX<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    ul<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'touchmove'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        moveX <span class="token operator">=</span> e<span class="token punctuation">.</span>targetTouches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>pageX <span class="token operator">-</span> startX<span class="token punctuation">;</span>        <span class="token keyword">var</span> translatex <span class="token operator">=</span> <span class="token operator">-</span>index <span class="token operator">*</span> w <span class="token operator">+</span> moveX<span class="token punctuation">;</span>        ul<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transition <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>        ul<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">translateX(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>translatex<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    ul<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'touchend'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>moveX<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>moveX <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                index<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                index<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">var</span> translatex <span class="token operator">=</span> <span class="token operator">-</span>index <span class="token operator">*</span> w<span class="token punctuation">;</span>            ul<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">translateX(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>translatex<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>            ul<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transition <span class="token operator">=</span> <span class="token string">'all .3s'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> translatex <span class="token operator">=</span> <span class="token operator">-</span>index <span class="token operator">*</span> w<span class="token punctuation">;</span>            ul<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">translateX(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>translatex<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>            ul<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transition <span class="token operator">=</span> <span class="token string">'all .3s'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">autoPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    ul<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'transitionend'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//  transitioned单词不要打错了这是过度结束事件的方法console.log(transitionend);</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> ul<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment">//去掉过度效果,然后立即跳转</span>            ul<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transition <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>            ul<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token string">'translateX(0px)'</span><span class="token punctuation">;</span>            <span class="token comment">// ul.style.transform = `translateX(${translatex}px)`;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            index <span class="token operator">=</span> ul<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">;</span>            ul<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transition <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>            ul<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">translateX(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token operator">-</span>index <span class="token operator">*</span> w<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//圆点跟随事件把ol的li带有current 类名选出来去掉类名remove</span>        ol<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.current'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">'current'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ol<span class="token punctuation">.</span>children<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'current'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> BOM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 轮播图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BOM视口监听事件的运用</title>
      <link href="/2019/05/1658604.html"/>
      <url>/2019/05/1658604.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>BOM操作</p><p>Scroll 操作 </p><p>x&amp;y轴滚动同时存在</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">        <span class="token selector">.baba</span> <span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>            <span class="token property">overflow</span><span class="token punctuation">:</span> scroll<span class="token punctuation">;</span>                  <span class="token punctuation">}</span>        <span class="token selector">img</span> <span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> 1200px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 990px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>baba<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../img/preview.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>scrollY轴滚动条效果</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">  <span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>        <span class="token punctuation">.</span>box <span class="token punctuation">{</span>            width<span class="token operator">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>            height<span class="token operator">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>            border<span class="token operator">:</span> <span class="token number">2</span>px solid red<span class="token punctuation">;</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> cyan<span class="token punctuation">;</span>            border<span class="token operator">-</span>radius<span class="token operator">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>            overflow<span class="token operator">:</span> auto<span class="token punctuation">;</span>            <span class="token comment">/* overflow: scroll; */</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 立即执行函数<span class="token operator">:</span>自调用函数可以避免变量污染 <span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> scrollWidth<span class="token operator">:</span>盒子的实际宽度    scrollHeight<span class="token operator">:</span>盒子的实际高度    scrollTop<span class="token operator">:</span>溢出的高度    scrollLeft<span class="token operator">:</span>溢出的宽度 <span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"box"</span><span class="token operator">&gt;</span>        <span class="token function">锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD））锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span><span class="token function">斤（0xBDEF）拷（0xBFBD）锟</span><span class="token punctuation">(</span><span class="token number">0xEFBF</span><span class="token punctuation">)</span>斤（<span class="token number">0xBDEF</span>）拷（<span class="token number">0xBFBD</span>）    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>        <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'scroll'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>scrollWidth<span class="token punctuation">,</span> div<span class="token punctuation">.</span>scrollHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>search焦点</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>      <span class="token keyword">var</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// input.addEventListener('input', function () {</span>      <span class="token comment">//     console.log(input.value);</span>      <span class="token comment">// })</span>      <span class="token comment">//oninput 在输入值的时候就触发</span>      <span class="token comment">// onchange 在输入框时只有失去焦点并且值改变才触发</span>      input<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>offset方法</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">  <span class="token operator">*</span> <span class="token punctuation">{</span>            margin<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            padding<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>baba <span class="token punctuation">{</span>            width<span class="token operator">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>            height<span class="token operator">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>            margin<span class="token operator">:</span> <span class="token number">200</span>px auto<span class="token punctuation">;</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> gold<span class="token punctuation">;</span>            position<span class="token operator">:</span> relative<span class="token punctuation">;</span>            <span class="token comment">/* overflow: hidden; */</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>son <span class="token punctuation">{</span>            position<span class="token operator">:</span> absoute<span class="token punctuation">;</span>            width<span class="token operator">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            height<span class="token operator">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            margin<span class="token operator">:</span> <span class="token number">30</span>px auto<span class="token punctuation">;</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> cyan<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">'baba'</span><span class="token operator">&gt;</span><span class="token number">123</span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"son"</span><span class="token operator">&gt;</span><span class="token number">345</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>        <span class="token comment">//offsetTop:元素具有定位父级元素的Y轴大小(如果没有定位的父级元素,就是到body的距离);</span>        <span class="token comment">//offsetLeft:元素具有定位父级元素的X轴大小(如果没有定位的父级元素,就是到body的距离);</span>        <span class="token keyword">var</span> baba <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.baba'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> son <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.son'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>baba<span class="token punctuation">.</span>offsetTop<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>baba<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son<span class="token punctuation">.</span>offsetTop<span class="token punctuation">,</span> son<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用offset获取当前坐标写入网页</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>      div <span class="token punctuation">{</span>          width<span class="token operator">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>          height<span class="token operator">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>          background<span class="token operator">-</span>color<span class="token operator">:</span> gold<span class="token punctuation">;</span>          margin<span class="token operator">:</span> <span class="token number">100</span>px auto<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"div"</span><span class="token operator">&gt;</span><span class="token number">2333</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>  <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mousemove"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">var</span> x <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offsetLeft<span class="token punctuation">;</span>          <span class="token keyword">var</span> y <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">x坐标是:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">y坐标是:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>offsetX<span class="token punctuation">,</span> e<span class="token punctuation">.</span>offsetY<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个简单的动画与函数的方法</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>        <span class="token punctuation">.</span>box <span class="token punctuation">{</span>            width<span class="token operator">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            height<span class="token operator">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> aqua<span class="token punctuation">;</span>            position<span class="token operator">:</span> absolute<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">'box'</span><span class="token operator">&gt;</span><span class="token number">2333</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>        <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> boxs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'boxs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>div<span class="token punctuation">.</span>offsetLeft <span class="token operator">&gt;=</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> div<span class="token punctuation">.</span>offsetLeft <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>封装animate函数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">  <span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>        div <span class="token punctuation">{</span>            position<span class="token operator">:</span> absolute<span class="token punctuation">;</span>            width<span class="token operator">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>            height<span class="token operator">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> cyan<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>        <span class="token keyword">function</span> <span class="token function">animate</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> target<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">clearInterval</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>            obj<span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>offsetLeft <span class="token operator">&gt;=</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">clearInterval</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// obj.style.backgroundColor = "purple";</span>                    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                obj<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> obj<span class="token punctuation">.</span>offsetLeft <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">animate</span><span class="token punctuation">(</span>div<span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">'purple'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">animate</span><span class="token punctuation">(</span>div<span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>综合案例调用前面用到animate,以及bom 中的pageYoffset实现一个页面滚动&amp;返回一个固定位置的btn元素事件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>        <span class="token punctuation">.</span>slider<span class="token operator">-</span>bar <span class="token punctuation">{</span>            position<span class="token operator">:</span> absolute<span class="token punctuation">;</span>            left<span class="token operator">:</span> <span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>            top<span class="token operator">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>            margin<span class="token operator">-</span>left<span class="token operator">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span>            width<span class="token operator">:</span> <span class="token number">45</span>px<span class="token punctuation">;</span>            height<span class="token operator">:</span> <span class="token number">130</span>px<span class="token punctuation">;</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> pink<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>w <span class="token punctuation">{</span>            width<span class="token operator">:</span> <span class="token number">1200</span>px<span class="token punctuation">;</span>            margin<span class="token operator">:</span> <span class="token number">10</span>px auto<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>header <span class="token punctuation">{</span>            height<span class="token operator">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> purple<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>banner <span class="token punctuation">{</span>            height<span class="token operator">:</span> <span class="token number">250</span>px<span class="token punctuation">;</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> skyblue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>main <span class="token punctuation">{</span>            height<span class="token operator">:</span> <span class="token number">1000</span>px<span class="token punctuation">;</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> yellowgreen<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        span <span class="token punctuation">{</span>            display<span class="token operator">:</span> none<span class="token punctuation">;</span>            position<span class="token operator">:</span> absolute<span class="token punctuation">;</span>            bottom<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"slider-bar"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">'goBack'</span><span class="token operator">&gt;</span>返回顶部<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"header w"</span><span class="token operator">&gt;</span>header<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"banner w"</span><span class="token operator">&gt;</span>banner<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"main w"</span><span class="token operator">&gt;</span>main<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>        <span class="token keyword">var</span> sliderBar <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.slider-bar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> banner <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.banner'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> main <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.main'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> mainTop <span class="token operator">=</span> main<span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>        <span class="token keyword">var</span> bannerTop <span class="token operator">=</span> banner<span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>        <span class="token keyword">var</span> sliderBarTop <span class="token operator">=</span> sliderBar<span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>        <span class="token keyword">var</span> goBack <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.goBack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'scroll'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>pageYOffset <span class="token operator">&gt;=</span> bannerTop<span class="token punctuation">)</span> <span class="token punctuation">{</span>                sliderBar<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token string">'fixed'</span><span class="token punctuation">;</span>                sliderBar<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> sliderBarTop <span class="token operator">-</span> bannerTop <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                sliderBar<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token string">'absolute'</span><span class="token punctuation">;</span>                sliderBar<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token string">'300px'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>pageYOffset <span class="token operator">&gt;=</span> mainTop<span class="token punctuation">)</span> <span class="token punctuation">{</span>                goBack<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                goBack<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment">//返回动画顶部</span>        goBack<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">animate</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment">// 调用X轴移动函数</span>        <span class="token keyword">function</span> <span class="token function">animate</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> target<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">clearInterval</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>            obj<span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> step <span class="token operator">=</span> <span class="token punctuation">(</span>target <span class="token operator">-</span> obj<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span>                step <span class="token operator">=</span> step <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span> <span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>offsetLeft <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">clearInterval</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>                    callback <span class="token operator">&amp;&amp;</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                window<span class="token punctuation">.</span><span class="token function">scroll</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> window<span class="token punctuation">.</span>pageYOffset <span class="token operator">+</span> step<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>综合案例2模态框事件(移动拖拽,显示隐藏)</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>        <span class="token punctuation">.</span>login<span class="token operator">-</span>header <span class="token punctuation">{</span>            width<span class="token operator">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>            text<span class="token operator">-</span>align<span class="token operator">:</span> center<span class="token punctuation">;</span>            height<span class="token operator">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>            font<span class="token operator">-</span>size<span class="token operator">:</span> <span class="token number">24</span>px<span class="token punctuation">;</span>            line<span class="token operator">-</span>height<span class="token operator">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ul<span class="token punctuation">,</span>        li<span class="token punctuation">,</span>        ol<span class="token punctuation">,</span>        dl<span class="token punctuation">,</span>        dt<span class="token punctuation">,</span>        dd<span class="token punctuation">,</span>        div<span class="token punctuation">,</span>        p<span class="token punctuation">,</span>        span<span class="token punctuation">,</span>        h1<span class="token punctuation">,</span>        h2<span class="token punctuation">,</span>        h3<span class="token punctuation">,</span>        h4<span class="token punctuation">,</span>        h5<span class="token punctuation">,</span>        h6<span class="token punctuation">,</span>        a <span class="token punctuation">{</span>            padding<span class="token operator">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>            margin<span class="token operator">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>login <span class="token punctuation">{</span>            display<span class="token operator">:</span> none<span class="token punctuation">;</span>            width<span class="token operator">:</span> <span class="token number">512</span>px<span class="token punctuation">;</span>            height<span class="token operator">:</span> <span class="token number">280</span>px<span class="token punctuation">;</span>            position<span class="token operator">:</span> fixed<span class="token punctuation">;</span>            border<span class="token operator">:</span> #ebebeb solid <span class="token number">1</span>px<span class="token punctuation">;</span>            left<span class="token operator">:</span> <span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>            top<span class="token operator">:</span> <span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>            background<span class="token operator">:</span> #ffffff<span class="token punctuation">;</span>            box<span class="token operator">-</span>shadow<span class="token operator">:</span> <span class="token number">0</span>px <span class="token number">0</span>px <span class="token number">20</span>px #ddd<span class="token punctuation">;</span>            z<span class="token operator">-</span>index<span class="token operator">:</span> <span class="token number">9999</span><span class="token punctuation">;</span>            transform<span class="token operator">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>login<span class="token operator">-</span>title <span class="token punctuation">{</span>            width<span class="token operator">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>            margin<span class="token operator">:</span> <span class="token number">10</span>px <span class="token number">0</span>px <span class="token number">0</span>px <span class="token number">0</span>px<span class="token punctuation">;</span>            text<span class="token operator">-</span>align<span class="token operator">:</span> center<span class="token punctuation">;</span>            line<span class="token operator">-</span>height<span class="token operator">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>            height<span class="token operator">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>            font<span class="token operator">-</span>size<span class="token operator">:</span> <span class="token number">18</span>px<span class="token punctuation">;</span>            position<span class="token operator">:</span> relative<span class="token punctuation">;</span>            cursor<span class="token operator">:</span> move<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>login<span class="token operator">-</span>input<span class="token operator">-</span>content <span class="token punctuation">{</span>            margin<span class="token operator">-</span>top<span class="token operator">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>login<span class="token operator">-</span>button <span class="token punctuation">{</span>            width<span class="token operator">:</span> <span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>            margin<span class="token operator">:</span> <span class="token number">30</span>px auto <span class="token number">0</span>px auto<span class="token punctuation">;</span>            line<span class="token operator">-</span>height<span class="token operator">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>            font<span class="token operator">-</span>size<span class="token operator">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>            border<span class="token operator">:</span> #ebebeb <span class="token number">1</span>px solid<span class="token punctuation">;</span>            text<span class="token operator">-</span>align<span class="token operator">:</span> center<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>login<span class="token operator">-</span>bg <span class="token punctuation">{</span>            display<span class="token operator">:</span> none<span class="token punctuation">;</span>            width<span class="token operator">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>            height<span class="token operator">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>            position<span class="token operator">:</span> fixed<span class="token punctuation">;</span>            top<span class="token operator">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>            left<span class="token operator">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>            background<span class="token operator">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        a <span class="token punctuation">{</span>            text<span class="token operator">-</span>decoration<span class="token operator">:</span> none<span class="token punctuation">;</span>            color<span class="token operator">:</span> #<span class="token number">000000</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>login<span class="token operator">-</span>button a <span class="token punctuation">{</span>            display<span class="token operator">:</span> block<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>login<span class="token operator">-</span>input input<span class="token punctuation">.</span>list<span class="token operator">-</span>input <span class="token punctuation">{</span>            float<span class="token operator">:</span> left<span class="token punctuation">;</span>            line<span class="token operator">-</span>height<span class="token operator">:</span> <span class="token number">35</span>px<span class="token punctuation">;</span>            height<span class="token operator">:</span> <span class="token number">35</span>px<span class="token punctuation">;</span>            width<span class="token operator">:</span> <span class="token number">350</span>px<span class="token punctuation">;</span>            border<span class="token operator">:</span> #ebebeb <span class="token number">1</span>px solid<span class="token punctuation">;</span>            text<span class="token operator">-</span>indent<span class="token operator">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>login<span class="token operator">-</span>input <span class="token punctuation">{</span>            overflow<span class="token operator">:</span> hidden<span class="token punctuation">;</span>            margin<span class="token operator">:</span> <span class="token number">0</span>px <span class="token number">0</span>px <span class="token number">20</span>px <span class="token number">0</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>login<span class="token operator">-</span>input label <span class="token punctuation">{</span>            float<span class="token operator">:</span> left<span class="token punctuation">;</span>            width<span class="token operator">:</span> <span class="token number">90</span>px<span class="token punctuation">;</span>            padding<span class="token operator">-</span>right<span class="token operator">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>            text<span class="token operator">-</span>align<span class="token operator">:</span> right<span class="token punctuation">;</span>            line<span class="token operator">-</span>height<span class="token operator">:</span> <span class="token number">35</span>px<span class="token punctuation">;</span>            height<span class="token operator">:</span> <span class="token number">35</span>px<span class="token punctuation">;</span>            font<span class="token operator">-</span>size<span class="token operator">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>login<span class="token operator">-</span>title span <span class="token punctuation">{</span>            position<span class="token operator">:</span> absolute<span class="token punctuation">;</span>            font<span class="token operator">-</span>size<span class="token operator">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span>            right<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">20</span>px<span class="token punctuation">;</span>            top<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">30</span>px<span class="token punctuation">;</span>            background<span class="token operator">:</span> #<span class="token constant">F8FCFF</span><span class="token punctuation">;</span>            border<span class="token operator">:</span> #ebebeb solid <span class="token number">1</span>px<span class="token punctuation">;</span>            width<span class="token operator">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>            height<span class="token operator">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>            border<span class="token operator">-</span>radius<span class="token operator">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"login-header"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>a id<span class="token operator">=</span><span class="token string">"link"</span> href<span class="token operator">=</span><span class="token string">"javascript:;"</span><span class="token operator">&gt;</span>点击，弹出登录框<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"login"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"login"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"title"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"login-title"</span><span class="token operator">&gt;</span>登录会员            <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span><span class="token operator">&lt;</span>a id<span class="token operator">=</span><span class="token string">"closeBtn"</span> href<span class="token operator">=</span><span class="token string">"javascript:void(0);"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"close-login"</span><span class="token operator">&gt;</span>关闭<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"login-input-content"</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"login-input"</span><span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>label<span class="token operator">&gt;</span>用户名：<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> placeholder<span class="token operator">=</span><span class="token string">"请输入用户名"</span> name<span class="token operator">=</span><span class="token string">"info[username]"</span> id<span class="token operator">=</span><span class="token string">"username"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"list-input"</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"login-input"</span><span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>label<span class="token operator">&gt;</span>登录密码：<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"password"</span> placeholder<span class="token operator">=</span><span class="token string">"请输入登录密码"</span> name<span class="token operator">=</span><span class="token string">"info[password]"</span> id<span class="token operator">=</span><span class="token string">"password"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"list-input"</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"loginBtn"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"login-button"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"javascript:void(0);"</span> id<span class="token operator">=</span><span class="token string">"login-button-submit"</span><span class="token operator">&gt;</span>登录会员<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 遮盖层 <span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"bg"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"login-bg"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>       <span class="token keyword">var</span> login <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#login'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> mask <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#bg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> link <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#link'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> closeBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#closeBtn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> title <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#title'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 注册开启事件</span>        link<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mask<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span><span class="token punctuation">;</span>            login<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment">// 注册关闭事件</span>        closeBtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mask<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>            login<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment">// 注册鼠标按下事件</span>        title<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mousedown'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 给title中心点位置</span>            <span class="token keyword">var</span> x <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX <span class="token operator">-</span> login<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">;</span>            <span class="token keyword">var</span> y <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY <span class="token operator">-</span> login<span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>            title<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> move<span class="token punctuation">)</span>            <span class="token comment">//注册鼠标跟随事件</span>            <span class="token keyword">function</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                login<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX <span class="token operator">-</span> x <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>                login<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY <span class="token operator">-</span> y <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//注册鼠标松开事件</span>            title<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mouseup'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                title<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> move<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> BOM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 视口监听事件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BOM定时器运用</title>
      <link href="/2019/05/1314970.html"/>
      <url>/2019/05/1314970.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1><p><em>Browser Object Model</em>（浏览器对象模型）由对象</p><ul><li><p><code>navigator</code></p></li><li><p><code>history</code></p></li><li><p><code>screen</code></p></li><li><p><code>location</code>的<code>document</code>子级组成<code>window</code>。</p></li></ul><p>节点中<code>document</code>是DOM（Document Object Model），文档对象模型，代表页面的内容。</p><p>所有浏览器都支持窗口对象，它代表窗口浏览器。</p><p>所有全局 JavaScript 对象、函数和变量都自动成为window对象的成员。</p><p>全局变量是 window 对象的属性。</p><p>全局函数是 window 对象的方法。</p><p>您可以使用 javascript 操作它使 JavaScript 有能力与浏览器”对话”</p><p>location.assign方法</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>button<span class="token operator">&gt;</span>跳转<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>      <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment">// location.href = 'http://cn.bing.com';</span>          location<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token string">'http://cn.bing.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以及前文写过的打开一个视口,还记得吗popUp这个方法,他也是BOM中的一种方法</p><p>页面跳转传递参数demo</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>13-index.html<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>     用户名: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uname<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>search<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//?name = andy</span>      <span class="token keyword">var</span> params <span class="token operator">=</span> location<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> arr <span class="token operator">=</span> params<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>      div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;span style = 'color:'&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span&gt;,欢迎您</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="demo-利用定时器写一个倒计时的效果"><a href="#demo-利用定时器写一个倒计时的效果" class="headerlink" title="demo 利用定时器写一个倒计时的效果"></a>demo 利用定时器写一个倒计时的效果</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">  <span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>        div <span class="token punctuation">{</span>            margin<span class="token operator">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        span <span class="token punctuation">{</span>            display<span class="token operator">:</span> inline<span class="token operator">-</span>block<span class="token punctuation">;</span>            width<span class="token operator">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>            height<span class="token operator">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> orange<span class="token punctuation">;</span>            font<span class="token operator">-</span>size<span class="token operator">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>            color<span class="token operator">:</span> #fff<span class="token punctuation">;</span>            text<span class="token operator">-</span>align<span class="token operator">:</span> center<span class="token punctuation">;</span>            line<span class="token operator">-</span>height<span class="token operator">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"hour"</span><span class="token operator">&gt;</span><span class="token number">1234</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"minute"</span><span class="token operator">&gt;</span><span class="token number">1234</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"second"</span><span class="token operator">&gt;</span><span class="token number">1234</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>        <span class="token keyword">var</span> span <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> futureTime <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"2022-2-28 17:00:00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> nowTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> times <span class="token operator">=</span> <span class="token punctuation">(</span>futureTime <span class="token operator">-</span> nowTime<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>times <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            span<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> h<span class="token punctuation">;</span>            <span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>times <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">%</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            span<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> m<span class="token punctuation">;</span>            <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>times <span class="token operator">%</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            span<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> s<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">setInterval</span><span class="token punctuation">(</span>countDown<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用定时器实现页面跳转(setInterval方法)</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>button<span class="token operator">&gt;</span>点我<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span><span class="token number">233333</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>        <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">'http://dnf.qq.com'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            timer<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>timer <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">'http://dnf.qq.com'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'您将在:'</span> <span class="token operator">+</span> timer <span class="token operator">+</span> <span class="token string">'秒后跳转至dnf官网'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用Dom请求当前地理位置</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>       <span class="token comment">// console.log(windows.navigator);</span>       window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span>geolocation<span class="token punctuation">.</span><span class="token function">getCurrentPosition</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">position</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>window.onresize获取或者设置当前的resize事件的处理函数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>      window<span class="token punctuation">.</span><span class="token function-variable function">onresize</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'窗口改变了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>window.confirm弹窗</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>        <span class="token keyword">var</span> str <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'输入值Z'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">'确定?'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> res <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">'确定?'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>倒计时的demo</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">   div <span class="token punctuation">{</span>            text<span class="token operator">-</span>align<span class="token operator">:</span> center<span class="token punctuation">;</span>            width<span class="token operator">:</span> <span class="token number">980</span>px<span class="token punctuation">;</span>            margin<span class="token operator">:</span> <span class="token number">200</span>px auto<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        span <span class="token punctuation">{</span>            <span class="token comment">/* background-color: orange; */</span>            font<span class="token operator">-</span>size<span class="token operator">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>            margin<span class="token operator">:</span> <span class="token number">70</span>px <span class="token number">20</span>px <span class="token number">20</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>距离<span class="token number">2022</span>春节<span class="token punctuation">,</span>还有<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"day"</span><span class="token operator">&gt;</span><span class="token number">1234</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"hour"</span><span class="token operator">&gt;</span><span class="token number">1234</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"minute"</span><span class="token operator">&gt;</span><span class="token number">1234</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"second"</span><span class="token operator">&gt;</span><span class="token number">1234</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>        <span class="token keyword">var</span> span <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> futureTime <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"2022-2-1 0:00:00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> nowTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> times <span class="token operator">=</span> <span class="token punctuation">(</span>futureTime <span class="token operator">-</span> nowTime<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>times <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            span<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>d<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">天</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>            <span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>times <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">%</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            span<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>h<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">时</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>            <span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>times <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">%</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            span<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>m<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">分</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>            <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>times <span class="token operator">%</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            span<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>s<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">秒</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">setInterval</span><span class="token punctuation">(</span>countDown<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>页面文本时钟</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">    <span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>        #nowtime <span class="token punctuation">{</span>            width<span class="token operator">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            height<span class="token operator">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> cyan<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"nowtime"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>        <span class="token keyword">function</span> <span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> date1 <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">var</span> div1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"nowtime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            div1<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> date1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token string">"getDate()"</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> BOM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 定时器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>了解什么是事件冒泡</title>
      <link href="/2019/05/1011607.html"/>
      <url>/2019/05/1011607.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Dom事件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">    <span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>        <span class="token punctuation">.</span>map <span class="token punctuation">{</span>            width<span class="token operator">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>            height<span class="token operator">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> cyan<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> e<span class="token punctuation">.</span>target  返回的是触发对象  <span class="token keyword">this</span> 返回的是绑定对象 <span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"map"</span><span class="token operator">&gt;</span>map<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>        <span class="token keyword">var</span> map <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.map'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment">// e.target    目标元素    e.type 事件类型</span>        <span class="token keyword">var</span> map <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.map'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="demo-键盘监听事件"><a href="#demo-键盘监听事件" class="headerlink" title="demo 键盘监听事件"></a>demo 键盘监听事件</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>        <span class="token comment">// onkeydown</span>        <span class="token comment">// onkeyup 弹起</span>        <span class="token comment">// onkeypress  ..区分大小写dxXXW</span>        <span class="token comment">// document.addEventListener('keydown', function (e) {</span>        <span class="token comment">//     console.log('keydown');</span>        <span class="token comment">// });</span>        document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'keyup'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'up:'</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>keyCode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'keypress'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'press:'</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>keyCode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="search框s键监听事件"><a href="#search框s键监听事件" class="headerlink" title="search框s键监听事件"></a>search框s键监听事件</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>        <span class="token operator">*</span> <span class="token punctuation">{</span>            margin<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            padding<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>search <span class="token punctuation">{</span>            position<span class="token operator">:</span> relative<span class="token punctuation">;</span>            width<span class="token operator">:</span> <span class="token number">178</span>px<span class="token punctuation">;</span>            margin<span class="token operator">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>con <span class="token punctuation">{</span>            display<span class="token operator">:</span> none<span class="token punctuation">;</span>            position<span class="token operator">:</span> absolute<span class="token punctuation">;</span>            top<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">40</span>px<span class="token punctuation">;</span>            width<span class="token operator">:</span> <span class="token number">171</span>px<span class="token punctuation">;</span>            border<span class="token operator">:</span> <span class="token number">1</span>px solid <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            box<span class="token operator">-</span>shadow<span class="token operator">:</span> <span class="token number">0</span> <span class="token number">2</span>px <span class="token number">4</span>px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            padding<span class="token operator">:</span> <span class="token number">5</span>px <span class="token number">0</span><span class="token punctuation">;</span>            font<span class="token operator">-</span>size<span class="token operator">:</span> <span class="token number">18</span>px<span class="token punctuation">;</span>            line<span class="token operator">-</span>height<span class="token operator">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>            color<span class="token operator">:</span> #<span class="token number">333</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>con<span class="token operator">:</span><span class="token operator">:</span>before <span class="token punctuation">{</span>            content<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">;</span>            width<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            height<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            position<span class="token operator">:</span> absolute<span class="token punctuation">;</span>            top<span class="token operator">:</span> <span class="token number">28</span>px<span class="token punctuation">;</span>            left<span class="token operator">:</span> <span class="token number">18</span>px<span class="token punctuation">;</span>            border<span class="token operator">:</span> <span class="token number">8</span>px solid #<span class="token number">000</span><span class="token punctuation">;</span>            border<span class="token operator">-</span>style<span class="token operator">:</span> solid dashed dashed<span class="token punctuation">;</span>            border<span class="token operator">-</span>color<span class="token operator">:</span> #fff transparent transparent<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"search"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"con"</span><span class="token operator">&gt;</span><span class="token number">234</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> placeholder<span class="token operator">=</span><span class="token string">"请输入快递单号"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"jd"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>        <span class="token keyword">var</span> search <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'keyup'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>keyCode <span class="token operator">===</span> <span class="token number">83</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                search<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> con <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.con'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> input <span class="token operator">=</span> <span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.jd'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        input<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'keyup'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">!==</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                con<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span><span class="token punctuation">;</span>                con<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                con<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        input<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'blur'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            con<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        input<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'focus'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">!==</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                con<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="demo3阻止方法的默认属性"><a href="#demo3阻止方法的默认属性" class="headerlink" title="demo3阻止方法的默认属性"></a>demo3阻止方法的默认属性</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"http:www.qq.com"</span><span class="token operator">&gt;</span><span class="token constant">QQ</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"name"</span> value<span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> value<span class="token operator">=</span><span class="token string">""</span> id<span class="token operator">=</span><span class="token string">"submit"</span><span class="token operator">&gt;</span>   <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>       <span class="token keyword">var</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       a<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">var</span> submit <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#submit'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       submit<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token comment">// var father = document.querySelector('.father');</span>       <span class="token comment">// var son = document.querySelector('.son');</span>       <span class="token comment">// father.onclick = function () {</span>       <span class="token comment">//     alert("father");</span>       <span class="token comment">// }</span>       <span class="token comment">// son.onclick = function () {</span>       <span class="token comment">//     alert = ("son");</span>       <span class="token comment">//     e.stopPropagation();</span>       <span class="token comment">// }</span>       <span class="token comment">// document.body.onclick = function () {</span>       <span class="token comment">//     alert("body");</span>       <span class="token comment">// }</span>       <span class="token comment">// document.onclick = function () {</span>       <span class="token comment">//     alert("document");</span>       <span class="token comment">// }</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="事件冒泡-event-bubbles"><a href="#事件冒泡-event-bubbles" class="headerlink" title="事件冒泡 (event.bubbles)"></a>事件冒泡 (event.bubbles)</h1><pre class="line-numbers language-less" data-language="less"><code class="language-less">事件冒泡：当一个元素接收到事件时，会把它接收到的事件逐级向上传播给它的祖先元素，一直传到顶层的 window 对象（关于最后传播到的顶层对象，不同浏览器有可能不同，例如 IE9 及其以上的 IE、FireFox、Chrome、Safari 等浏览器，事件冒泡的顶层对象为 window 对象，而 IE7<span class="token operator">/</span>8 顶层对象则为 document对象）。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>事件委托</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>國立武漢大學<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>國立武漢大學<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>國立武漢大學<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>國立武漢大學<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>國立武漢大學<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>國立武漢大學<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>國立武漢大學<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>國立武漢大學<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>國立武漢大學<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>國立武漢大學<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>國立武漢大學<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>國立武漢大學<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>       `   <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>       <span class="token keyword">var</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       ul<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"楚國八百年"</span><span class="token punctuation">)</span>           e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">'cyan'</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span>       <span class="token comment">// 事件委托本质就是冒泡...  好处是动态能添加标签,会触发父级元素身上的事件;</span>   <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>鼠标禁用事件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">你要干嘛<span class="token operator">?</span>  <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>      document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'contextmenu'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 禁用右键</span>      <span class="token comment">// 禁止选中文字</span>      document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'selectstart'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>鼠标移动事件(图片跟随鼠标)</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"> img <span class="token punctuation">{</span>            position<span class="token operator">:</span> absolute<span class="token punctuation">;</span>            top<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">50</span><span class="token operator">%</span>px<span class="token punctuation">;</span>            border<span class="token operator">-</span>radius<span class="token operator">:</span> <span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"../img/tjf.gif"</span> alt<span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>        <span class="token keyword">var</span> pic <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> x <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX<span class="token punctuation">;</span>            <span class="token keyword">var</span> y <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY<span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'x是'</span> <span class="token operator">+</span> x<span class="token punctuation">,</span> <span class="token string">'y是'</span> <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>            pic<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> x <span class="token operator">-</span> <span class="token number">150</span> <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>            pic<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> y <span class="token operator">-</span> <span class="token number">110</span> <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>demo鼠标点击跟随变色事件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>     <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>國立武漢大學<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>button<span class="token operator">&gt;</span>刷新<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>     <span class="token keyword">var</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"ul"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span>     btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">var</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         li<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'Gakki'</span><span class="token punctuation">;</span>         ul<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span> ul<span class="token punctuation">.</span>firstChild<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     ul<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>localName <span class="token operator">===</span> <span class="token string">'li'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ul<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 ul<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>             e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">'cyan'</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> DOM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DOM操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOM表单操作</title>
      <link href="/2019/05/0839799.html"/>
      <url>/2019/05/0839799.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="DOM常见的方法"><a href="#DOM常见的方法" class="headerlink" title="DOM常见的方法"></a>DOM常见的方法</h1><h2 id="demo1通过声明数组变量生成表格"><a href="#demo1通过声明数组变量生成表格" class="headerlink" title="demo1通过声明数组变量生成表格"></a>demo1通过声明数组变量生成表格</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> datas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>               name<span class="token operator">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>               subject<span class="token operator">:</span> <span class="token string">'Java'</span><span class="token punctuation">,</span>               score<span class="token operator">:</span> <span class="token number">68</span>           <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>               name<span class="token operator">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>               subject<span class="token operator">:</span> <span class="token string">'Java'</span><span class="token punctuation">,</span>               score<span class="token operator">:</span> <span class="token number">68</span>           <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>               name<span class="token operator">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>               subject<span class="token operator">:</span> <span class="token string">'Java'</span><span class="token punctuation">,</span>               score<span class="token operator">:</span> <span class="token number">68</span>           <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>               name<span class="token operator">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>               subject<span class="token operator">:</span> <span class="token string">'Java'</span><span class="token punctuation">,</span>               score<span class="token operator">:</span> <span class="token number">68</span>           <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>               name<span class="token operator">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>               subject<span class="token operator">:</span> <span class="token string">'Java'</span><span class="token punctuation">,</span>               score<span class="token operator">:</span> <span class="token number">68</span>           <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                 <span class="token keyword">var</span> tbody <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'tbody'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> datas<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">var</span> tr <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'tr'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token keyword">in</span> datas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token keyword">var</span> td <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'td'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   td<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> datas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                   tr<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>td<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               <span class="token keyword">var</span> td <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'td'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               td<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"&lt;a href='javascript:;'&gt;删除&lt;/a&gt;"</span><span class="token punctuation">;</span>               tr<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>td<span class="token punctuation">)</span><span class="token punctuation">;</span>               tbody<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>tr<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token keyword">var</span> <span class="token keyword">as</span> <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">as</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">as</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token keyword">this</span><span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>           <span class="token punctuation">}</span>       <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="demo2克隆节点"><a href="#demo2克隆节点" class="headerlink" title="demo2克隆节点"></a>demo2克隆节点</h2><pre class="line-numbers language-none"><code class="language-none">&lt;ul&gt;       &lt;li&gt;1&lt;/li&gt;       &lt;li&gt;12&lt;/li&gt;       &lt;li&gt;123&lt;/li&gt;   &lt;/ul&gt;   &lt;script&gt;       var ul = document.querySelector('ul');       var lily = ul.children[1].cloneNode(true); //.cloneNode() 不赋值就是浅拷贝,只拷贝实参不拷贝子元素;赋true则深拷贝;       ul.append(lily);   &lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="demo3DOM节点元素移除"><a href="#demo3DOM节点元素移除" class="headerlink" title="demo3DOM节点元素移除"></a>demo3DOM节点元素移除</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>     <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>Jack<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>     <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>Jerry<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>     <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>Tom<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>     <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"lee"</span><span class="token operator">&gt;</span>lee<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>     <span class="token keyword">var</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">var</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">var</span> lee <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.lee'</span><span class="token punctuation">)</span>     ul<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>lee<span class="token punctuation">)</span><span class="token punctuation">;</span>     lee<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="demo4删除事件"><a href="#demo4删除事件" class="headerlink" title="demo4删除事件"></a>demo4删除事件</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">  <span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>        div <span class="token punctuation">{</span>            width<span class="token operator">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            height<span class="token operator">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> cyan<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>        <span class="token keyword">var</span> divp <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        divp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//这里添加一个监听事件</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> arguments<span class="token punctuation">.</span>callee<span class="token punctuation">)</span> <span class="token comment">//指向被调用者 移除click监听事件</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="demo5留言发布"><a href="#demo5留言发布" class="headerlink" title="demo5留言发布"></a>demo5留言发布</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>        <span class="token operator">*</span> <span class="token punctuation">{</span>            margin<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            padding<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ul <span class="token punctuation">{</span>            list<span class="token operator">-</span>style<span class="token operator">:</span> none<span class="token punctuation">;</span>            width<span class="token operator">:</span> <span class="token number">230</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ul li <span class="token punctuation">{</span>            height<span class="token operator">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> cyan<span class="token punctuation">;</span>            line<span class="token operator">-</span>height<span class="token operator">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>            margin<span class="token operator">-</span>top<span class="token operator">:</span> <span class="token number">3</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ul li a <span class="token punctuation">{</span>            float<span class="token operator">:</span> right<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>textarea cols<span class="token operator">=</span><span class="token string">"30"</span> rows<span class="token operator">=</span><span class="token string">"10"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>textarea<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>button<span class="token operator">&gt;</span>发布<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token number">2333</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token number">2333</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token number">2333</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span> <span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>        <span class="token keyword">var</span> text <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'textarea'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取dom元素</span>        <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取dom元素</span>        <span class="token keyword">var</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取dom元素</span>        btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//给btn绑定事件函数</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>text<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//当文本内容为空且仅存在空格符时候</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Please enter true value'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">var</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创建元素类型的字符串元素  li</span>            li<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> text<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token string">"&lt;a href ='javascript:;'&gt;删除&lt;/a&gt;"</span><span class="token punctuation">;</span>            ul<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span> ul<span class="token punctuation">.</span>firstChild<span class="token punctuation">)</span><span class="token punctuation">;</span>            text<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>            ul<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// console.log(2);</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>localName <span class="token operator">===</span> <span class="token string">'a'</span> <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>innerHTML <span class="token operator">===</span> <span class="token string">'删除'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment">// console.log(e.target.localName);</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注册事件和监听事件</p><p>传统注册事件：</p><p>利用on开头的事件 如onclick</p><p>特点：注册事件的唯一性，同一个元素只能设置一个处理函数最后注册的处理函数将会覆盖前面注册的所有处理函数</p><hr> <p>方法监听事件注册方式 ：</p><p>addEventListener() 是一个方法</p><p>特点：同一个元素，同一个事件可以注册多个监听器 ，多个事件处理程序</p><p>用法 addEventListener（type,listener[useCapture])<br>参数</p><p>type:需要监听的事件类型，如click, mouseover, 注意这里是不需要加 on</p><p>listener：事件处理函数，事件发生时，会调用的函数</p><p>useCapture：可选参数，布尔值，默认为false，表示在事件冒泡阶段调用事件处理程序（从最外层到最内层）；如果为true，则表示在事件捕获阶段调用事件处理程序（从最内层到最外层）</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>button<span class="token operator">&gt;</span>注册事件<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token operator">&lt;</span>button<span class="token operator">&gt;</span>监听事件<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>button<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span> <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>    <span class="token comment">// 第一种方式</span>    <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    btn<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    btn<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>demo新浪下拉单</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>        <span class="token operator">*</span> <span class="token punctuation">{</span>            margin<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            padding<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        li <span class="token punctuation">{</span>            list<span class="token operator">-</span>style<span class="token operator">-</span>type<span class="token operator">:</span> none<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        a <span class="token punctuation">{</span>            text<span class="token operator">-</span>decoration<span class="token operator">:</span> none<span class="token punctuation">;</span>            font<span class="token operator">-</span>size<span class="token operator">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>nav <span class="token punctuation">{</span>            margin<span class="token operator">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>nav<span class="token operator">&gt;</span>li <span class="token punctuation">{</span>            position<span class="token operator">:</span> relative<span class="token punctuation">;</span>            float<span class="token operator">:</span> left<span class="token punctuation">;</span>            width<span class="token operator">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span>            height<span class="token operator">:</span> <span class="token number">41</span>px<span class="token punctuation">;</span>            text<span class="token operator">-</span>align<span class="token operator">:</span> center<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>nav li a <span class="token punctuation">{</span>            display<span class="token operator">:</span> block<span class="token punctuation">;</span>            width<span class="token operator">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>            height<span class="token operator">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>            line<span class="token operator">-</span>height<span class="token operator">:</span> <span class="token number">41</span>px<span class="token punctuation">;</span>            color<span class="token operator">:</span> #<span class="token number">333</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>nav<span class="token operator">&gt;</span>li<span class="token operator">&gt;</span>a<span class="token operator">:</span>hover <span class="token punctuation">{</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> #eee<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>nav ul <span class="token punctuation">{</span>            display<span class="token operator">:</span> none<span class="token punctuation">;</span>            position<span class="token operator">:</span> absolute<span class="token punctuation">;</span>            top<span class="token operator">:</span> <span class="token number">41</span>px<span class="token punctuation">;</span>            left<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            width<span class="token operator">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>            border<span class="token operator">-</span>left<span class="token operator">:</span> <span class="token number">1</span>px solid #<span class="token constant">FECC5B</span><span class="token punctuation">;</span>            border<span class="token operator">-</span>right<span class="token operator">:</span> <span class="token number">1</span>px solid #<span class="token constant">FECC5B</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>nav ul li <span class="token punctuation">{</span>            border<span class="token operator">-</span>bottom<span class="token operator">:</span> <span class="token number">1</span>px solid #<span class="token constant">FECC5B</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>nav ul li a<span class="token operator">:</span>hover <span class="token punctuation">{</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> #<span class="token constant">FFF5DA</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"nav"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#"</span><span class="token operator">&gt;</span>微博<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>私信<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>评论<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>@我<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#"</span><span class="token operator">&gt;</span>微博<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>私信<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>评论<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>@我<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#"</span><span class="token operator">&gt;</span>微博<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>私信<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>评论<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>@我<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#"</span><span class="token operator">&gt;</span>微博<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>私信<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>评论<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>@我<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>        <span class="token keyword">var</span> nav <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.nav'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> lis <span class="token operator">=</span> nav<span class="token punctuation">.</span>children<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lis<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onmouseover</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onmouseout</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>demo节点操作</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>爪巴啊<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>爪巴啊<span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"adv"</span><span class="token operator">&gt;</span>爪巴啊<span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>爪巴啊<span class="token number">4</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>爪巴啊<span class="token number">5</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>       <span class="token keyword">var</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">var</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       li<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'null'</span><span class="token punctuation">;</span>       ul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//父节点.appendChild()</span>       <span class="token keyword">var</span> lili <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创建节点 document.createElement('节点名册');</span>       li<span class="token punctuation">.</span>firstChild<span class="token punctuation">.</span>nodeValue <span class="token operator">=</span> <span class="token string">'wtf?'</span><span class="token punctuation">;</span>       ul<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>lili<span class="token punctuation">,</span> ul<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//父节点.inserBefore('','位置节点')</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ul<span class="token punctuation">.</span>nextSibling<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//#text</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ul<span class="token punctuation">.</span>previousSibling<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//#text</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ul<span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&lt;div&gt;...&lt;/div&gt;</span>   <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token number">2044</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token number">2044</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token number">2044</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token number">2044</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token number">2044</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>      <span class="token comment">// var deemo = document.querySelector(".deemo");</span>      <span class="token comment">// console.log(deemo.parentNode);</span>      <span class="token comment">// console.log(deemo.parentNode.parentNode);</span>      <span class="token keyword">var</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"ul"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ul<span class="token punctuation">.</span>childNodes<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//NodeList(11)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ul<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//HTMLCollection(5)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ul<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&lt;li&gt;...&lt;/li&gt;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ul<span class="token punctuation">.</span>children<span class="token punctuation">[</span>ul<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&lt;li&gt;...&lt;/li&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> DOM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注册监听事件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排他思想的运用</title>
      <link href="/2019/05/0743861.html"/>
      <url>/2019/05/0743861.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="JavaScript排他思想"><a href="#JavaScript排他思想" class="headerlink" title="JavaScript排他思想"></a>JavaScript排他思想</h2><p>如果有同一组元素，我们想要某一个元素实现某种样式，需要用到循环的排他思想算法：</p><ol><li>所有元素全部清除样式（干掉其他人）</li><li>给当前元素设置样式（留下我自己）</li><li>注意顺序不能颠倒，首先干掉其他人，再设置自己</li></ol><h2 id="demo1多个按钮"><a href="#demo1多个按钮" class="headerlink" title="demo1多个按钮"></a>demo1多个按钮</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>button<span class="token operator">&gt;</span><span class="token constant">BTN1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>button<span class="token operator">&gt;</span><span class="token constant">BTN2</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>button<span class="token operator">&gt;</span><span class="token constant">BTN3</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>button<span class="token operator">&gt;</span><span class="token constant">BTN4</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>button<span class="token operator">&gt;</span><span class="token constant">BTN5</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>       <span class="token keyword">var</span> btns <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> btns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//此处是为了绑定事件</span>           btns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> btns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   btns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">"cyan"</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>   <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>首先去获取的一个伪数组</p></li><li><p>利用双重for循环</p></li><li><p>首先先排除其他人，然后才设置自己的样式，这种排除其他人的思想我们称为排他思想</p></li></ol><h2 id="demo2全选反选"><a href="#demo2全选反选" class="headerlink" title="demo2全选反选"></a>demo2全选反选</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">  <span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>        <span class="token operator">*</span> <span class="token punctuation">{</span>            padding<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            margin<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>wrap <span class="token punctuation">{</span>            width<span class="token operator">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>            margin<span class="token operator">:</span> <span class="token number">100</span>px auto <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        table <span class="token punctuation">{</span>            border<span class="token operator">-</span>collapse<span class="token operator">:</span> collapse<span class="token punctuation">;</span>            border<span class="token operator">-</span>spacing<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            border<span class="token operator">:</span> <span class="token number">1</span>px solid #c0c0c0<span class="token punctuation">;</span>            width<span class="token operator">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        th<span class="token punctuation">,</span>        td <span class="token punctuation">{</span>            border<span class="token operator">:</span> <span class="token number">1</span>px solid #d0d0d0<span class="token punctuation">;</span>            color<span class="token operator">:</span> #<span class="token number">404060</span><span class="token punctuation">;</span>            padding<span class="token operator">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        th <span class="token punctuation">{</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> #<span class="token number">09</span>c<span class="token punctuation">;</span>            font<span class="token operator">:</span> bold <span class="token number">16</span>px <span class="token string">"微软雅黑"</span><span class="token punctuation">;</span>            color<span class="token operator">:</span> #fff<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        td <span class="token punctuation">{</span>            font<span class="token operator">:</span> <span class="token number">14</span>px <span class="token string">"微软雅黑"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        tbody tr <span class="token punctuation">{</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> #f0f0f0<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        tbody tr<span class="token operator">:</span>hover <span class="token punctuation">{</span>            cursor<span class="token operator">:</span> pointer<span class="token punctuation">;</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> #fafafa<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"wrap"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>table<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>thead<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>th<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> id<span class="token operator">=</span><span class="token string">"j_cbAll"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>th<span class="token operator">&gt;</span>商品<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>th<span class="token operator">&gt;</span>价钱<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>thead<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>tbody id<span class="token operator">=</span><span class="token string">"j_tb"</span><span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>iPhone8<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token number">8000</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>iPad Pro<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token number">5000</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>iPad Air<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token number">2000</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>Apple Watch<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token number">2000</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>tbody<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>        <span class="token keyword">var</span> cbAll <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#j_cbAll"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> cbItems <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"#j_tb input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cbAll<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cbItems<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                cbItems<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>checked <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>checked<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cbItems<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cbItems<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cbItems<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cbItems<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>checked<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                cbAll<span class="token punctuation">.</span>checked <span class="token operator">=</span> flag<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="demo3表格隔行变色"><a href="#demo3表格隔行变色" class="headerlink" title="demo3表格隔行变色"></a>demo3表格隔行变色</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>        table <span class="token punctuation">{</span>            width<span class="token operator">:</span> <span class="token number">800</span>px<span class="token punctuation">;</span>            margin<span class="token operator">:</span> <span class="token number">100</span>px auto<span class="token punctuation">;</span>            text<span class="token operator">-</span>align<span class="token operator">:</span> center<span class="token punctuation">;</span>            border<span class="token operator">-</span>collapse<span class="token operator">:</span> collapse<span class="token punctuation">;</span>            font<span class="token operator">-</span>size<span class="token operator">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        thead tr <span class="token punctuation">{</span>            height<span class="token operator">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> skyblue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        tbody tr <span class="token punctuation">{</span>            height<span class="token operator">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        tbody td <span class="token punctuation">{</span>            border<span class="token operator">-</span>bottom<span class="token operator">:</span> <span class="token number">1</span>px solid #d7d7d7<span class="token punctuation">;</span>            font<span class="token operator">-</span>size<span class="token operator">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span>            color<span class="token operator">:</span> blue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>bg <span class="token punctuation">{</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> pink<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>table<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>thead<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>th<span class="token operator">&gt;</span>代码<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>th<span class="token operator">&gt;</span>名称<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>th<span class="token operator">&gt;</span>最新公布净值<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>th<span class="token operator">&gt;</span>累计净值<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>th<span class="token operator">&gt;</span>前单位净值<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>th<span class="token operator">&gt;</span>净值增长率<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>thead<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>tbody<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token number">003526</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>农银金穗<span class="token number">3</span>个月定期开放债券<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token number">1.075</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token number">1.079</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token number">1.074</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">+</span><span class="token number">0.047</span><span class="token operator">%</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token number">003526</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>农银金穗<span class="token number">3</span>个月定期开放债券<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token number">1.075</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token number">1.079</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token number">1.074</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">+</span><span class="token number">0.047</span><span class="token operator">%</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token number">003526</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>农银金穗<span class="token number">3</span>个月定期开放债券<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token number">1.075</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token number">1.079</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token number">1.074</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">+</span><span class="token number">0.047</span><span class="token operator">%</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token number">003526</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>农银金穗<span class="token number">3</span>个月定期开放债券<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token number">1.075</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token number">1.079</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token number">1.074</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">+</span><span class="token number">0.047</span><span class="token operator">%</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token number">003526</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>农银金穗<span class="token number">3</span>个月定期开放债券<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token number">1.075</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token number">1.079</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token number">1.074</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">+</span><span class="token number">0.047</span><span class="token operator">%</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token number">003526</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>农银金穗<span class="token number">3</span>个月定期开放债券<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token number">1.075</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token number">1.079</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token number">1.074</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">+</span><span class="token number">0.047</span><span class="token operator">%</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tbody<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>        <span class="token keyword">var</span> trs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'tbody'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'tr'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> trs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            trs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onmouseover</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'bg'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            trs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onmouseout</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="demo4打开一个视口"><a href="#demo4打开一个视口" class="headerlink" title="demo4打开一个视口"></a>demo4打开一个视口</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"javascript:popUP('http://www.baidu.com/');"</span><span class="token operator">&gt;</span>baidu<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>  <span class="token comment">//Chrome会拦截弹窗,允许即可</span>   <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>       <span class="token keyword">function</span> <span class="token function">popUp</span><span class="token punctuation">(</span><span class="token parameter">winURL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>winURL<span class="token punctuation">,</span> <span class="token string">" popup"</span><span class="token punctuation">,</span> <span class="token string">"width=400,height=280"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token function">popUp</span><span class="token punctuation">(</span><span class="token string">'http://www.baidu.com/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="demo5循环精灵图"><a href="#demo5循环精灵图" class="headerlink" title="demo5循环精灵图"></a>demo5循环精灵图</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>        <span class="token operator">*</span> <span class="token punctuation">{</span>            margin<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            padding<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        li <span class="token punctuation">{</span>            list<span class="token operator">-</span>style<span class="token operator">-</span>type<span class="token operator">:</span> none<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>box <span class="token punctuation">{</span>            width<span class="token operator">:</span> <span class="token number">250</span>px<span class="token punctuation">;</span>            margin<span class="token operator">:</span> <span class="token number">100</span>px auto<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>box li <span class="token punctuation">{</span>            float<span class="token operator">:</span> left<span class="token punctuation">;</span>            width<span class="token operator">:</span> <span class="token number">24</span>px<span class="token punctuation">;</span>            height<span class="token operator">:</span> <span class="token number">24</span>px<span class="token punctuation">;</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> pink<span class="token punctuation">;</span>            margin<span class="token operator">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span>            background<span class="token operator">:</span> <span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>img<span class="token operator">/</span>sprite<span class="token punctuation">.</span>png<span class="token punctuation">)</span> no<span class="token operator">-</span>repeat<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"box"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>        <span class="token keyword">var</span> lis <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lis<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> index <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">44</span><span class="token punctuation">;</span>            lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundPosition <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">0 -</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>index<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>demo6tab栏切换</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>        <span class="token operator">*</span> <span class="token punctuation">{</span>            margin<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            padding<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        li <span class="token punctuation">{</span>            list<span class="token operator">-</span>style<span class="token operator">-</span>type<span class="token operator">:</span> none<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>tab <span class="token punctuation">{</span>            width<span class="token operator">:</span> <span class="token number">978</span>px<span class="token punctuation">;</span>            margin<span class="token operator">:</span> <span class="token number">100</span>px auto<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>tab_list <span class="token punctuation">{</span>            height<span class="token operator">:</span> <span class="token number">39</span>px<span class="token punctuation">;</span>            border<span class="token operator">:</span> <span class="token number">1</span>px solid #ccc<span class="token punctuation">;</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> #f1f1f1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>tab_list li <span class="token punctuation">{</span>            float<span class="token operator">:</span> left<span class="token punctuation">;</span>            height<span class="token operator">:</span> <span class="token number">39</span>px<span class="token punctuation">;</span>            line<span class="token operator">-</span>height<span class="token operator">:</span> <span class="token number">39</span>px<span class="token punctuation">;</span>            padding<span class="token operator">:</span> <span class="token number">0</span> <span class="token number">20</span>px<span class="token punctuation">;</span>            text<span class="token operator">-</span>align<span class="token operator">:</span> center<span class="token punctuation">;</span>            cursor<span class="token operator">:</span> pointer<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>tab_list <span class="token punctuation">.</span>current <span class="token punctuation">{</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> #c81623<span class="token punctuation">;</span>            color<span class="token operator">:</span> #fff<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>item_info <span class="token punctuation">{</span>            padding<span class="token operator">:</span> <span class="token number">20</span>px <span class="token number">0</span> <span class="token number">0</span> <span class="token number">20</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>item <span class="token punctuation">{</span>            display<span class="token operator">:</span> none<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tab"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tab_list"</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"current"</span><span class="token operator">&gt;</span>商品介绍<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>规格与包装<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>售后保障<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>商品评价（<span class="token number">50000</span>）<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>手机社区<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tab_con"</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"item"</span> style<span class="token operator">=</span><span class="token string">"display: block;"</span><span class="token operator">&gt;</span>                商品介绍模块内容            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"item"</span><span class="token operator">&gt;</span>                规格与包装模块内容            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"item"</span><span class="token operator">&gt;</span>                售后保障模块内容            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"item"</span><span class="token operator">&gt;</span>                商品评价（<span class="token number">50000</span>）模块内容            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"item"</span><span class="token operator">&gt;</span>                手机社区模块内容            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>        <span class="token keyword">var</span> tab_list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.tab_list'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取dom元素</span>        <span class="token keyword">var</span> lis <span class="token operator">=</span> tab_list<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取dom元素</span>        <span class="token keyword">var</span> items <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'.item'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取dom元素</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lis<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//给所有li 注册事件</span>            lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//给遍历到的li 添加 index = i 的属性和属性值</span>            lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//绑定函数</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lis<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//第一遍循环</span>                    lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span> <span class="token comment">//给遍历到的li 赋空值;</span>                <span class="token punctuation">}</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'current'</span><span class="token punctuation">;</span> <span class="token comment">// 给遍历到的函数添加类名为'current'</span>                <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取 index这个dom元素</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//给遍历到的Dom添加 事件</span>                    items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>demo表单提交</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>        <span class="token comment">/* * {            margin: 0;            padding: 0;        } */</span>        div <span class="token punctuation">{</span>            display<span class="token operator">:</span> flex<span class="token punctuation">;</span>            align<span class="token operator">-</span>items<span class="token operator">:</span> center<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        input <span class="token punctuation">{</span>            margin<span class="token operator">-</span>left<span class="token operator">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>            width<span class="token operator">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            height<span class="token operator">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        table <span class="token punctuation">{</span>            width<span class="token operator">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span>            cursor<span class="token operator">:</span> pointer<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        table td <span class="token punctuation">{</span>            text<span class="token operator">-</span>align<span class="token operator">:</span> center<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        table th <span class="token punctuation">{</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> blueviolet<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        table tr <span class="token punctuation">{</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> pink<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>请输入姓名<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> id<span class="token operator">=</span><span class="token string">"username"</span> value<span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>请输入邮箱<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> id<span class="token operator">=</span><span class="token string">"email"</span> value<span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>button<span class="token operator">&gt;</span>添加<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>table<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>thead<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>th<span class="token operator">&gt;</span>姓名<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>th<span class="token operator">&gt;</span>邮箱<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>thead<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>tbody id<span class="token operator">=</span><span class="token string">"tb"</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>小黑<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>eocho@<span class="token number">126.</span>com<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>小白<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>echo@alibaba<span class="token punctuation">.</span>com<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tbody<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>         <span class="token keyword">var</span> username <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">var</span> email <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#email"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// btn.onclick = function () {</span>        <span class="token comment">//     if (username.value === "" || email.value === "") {</span>        <span class="token comment">//         alert("不要提交空信息");</span>        <span class="token comment">//         return;</span>        <span class="token comment">//     }</span>        <span class="token comment">//     var tr = document.createElement("tr"); // 声明创建一个tr</span>        <span class="token comment">//     tb.appendChild(tr); // 在tb节点插入tr</span>        <span class="token comment">//     var td = document.createElement("td");</span>        <span class="token comment">//     td.innerHTML = username.value;</span>        <span class="token comment">//     tr.appendChild(td);</span>        <span class="token comment">//     var td2 = document.createElement("td"); //声明:创建一个变量名为tb2的tb标签</span>        <span class="token comment">//     td2.innerHTML = email.value; //把email.value值写入tb2</span>        <span class="token comment">//     tr.appendChild(td2);</span>        <span class="token comment">// }</span>        btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>username<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">""</span> <span class="token operator">||</span> email<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"请输入正确的值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">var</span> tr <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"tr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tb<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>tr<span class="token punctuation">,</span> tb<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> td <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"td"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            td<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> username<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            tr<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>td<span class="token punctuation">,</span> tr<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> td2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"td"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            td2<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> email<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            tr<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>td2<span class="token punctuation">,</span> tr<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            username<span class="token punctuation">.</span>value <span class="token operator">=</span> email<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> DOM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOM入门</title>
      <link href="/2019/05/0510909.html"/>
      <url>/2019/05/0510909.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="JavaScript-的组成"><a href="#JavaScript-的组成" class="headerlink" title="JavaScript 的组成"></a>JavaScript 的组成</h1><ul><li><p><strong>ECMAScript</strong></p></li><li><p><em><em>DOM</em>(文档对象模型)</em>**</p></li><li><p><em><em>BOM</em>(浏览器对象模型)</em>**</p><hr></li></ul><h2 id="API"><a href="#API" class="headerlink" title="API"></a><strong>API</strong></h2><p><em>appliction programming interface</em>应用程序编程接口，是一些预先定义的函数.</p><h2 id="Web-API"><a href="#Web-API" class="headerlink" title="Web API"></a>Web API</h2><p>是浏览器提供的一套操作浏览器功能和页面元素的API（BOM和DOM）；</p><p>web编程（浏览器的网页编程）；</p><p>一般都有输入和输出（函数的传参和返回值）,Web Api 很多方法（函数）；</p><hr><h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><p><em>Document Object Model</em>（文档对象模型）</p><p>W3C推荐的处理可扩展标记语言，是一种标准编程接口</p><p>当网页加载时，浏览器会为页面创建一个文档对象模型..</p><p>所有对象都排列为树形结构…</p><pre class="line-numbers language-none"><code class="language-none">文档：docunment元素：标签节点：属性，空格，注释...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h1 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h1><ul><li>根据ID*( getElementById)*</li><li>根据标签名*(getElementByTagName)* 返回一个包括所有给定标签名称的元素的 HTML 集合<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCollection"><code>HTMLCollection</code></a>。 整个文件结构整体被搜索，包括根节点。返回的 <code>HTML集合</code>是动态的，可以自动更新自己来保持和 DOM 树的同步而不用再次调用 <code>document.getElementsByTagName()</code> 。</li><li>通过标签的NAME属性值获取一组节点集合*(getElementByName)*</li><li>通过指定的上下文或按照class名取指定的标签，获取的是一个<strong>元素集合</strong> <em>（getElementClassName）</em></li><li>使用类名选择器获取<em>（doucument.querySelector(‘选择器’)）</em>  返回值永远是一个DOM对象,即使可以匹配多个,以第一匹配的为准,获取不到就是null</li><li>在指定上下文中通过选择器获取一组元素集合(<strong>伪数组+=不能使用数组的内置方法</strong>),返回值:永远是一个伪数组,即使可以匹配1个这个伪数组长度为1,元素是真正的DOM*（document.querySelectorAll(‘选择器’))*获取不到就是空元（<strong>通过数组方法取元素</strong>）</li><li><em>(doucument.body)</em>      body属性用于设置或返回文档体</li><li>*(doucument.doucumentElement)*以一个元素对象返回一个文档的文档元素</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>time<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>2021-10-20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">      <span class="token keyword">var</span> times <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"time"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>times<span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> times<span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>times<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印返回的元素对象 查看里面的属性和方法</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取DOM元素</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"time"</span><span class="token operator">&gt;</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">20</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"one"</span><span class="token operator">&gt;</span>第<span class="token number">1</span>天学习js<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">'toy'</span><span class="token operator">&gt;</span>第<span class="token number">2</span>天学习js<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">'toy'</span><span class="token operator">&gt;</span>第<span class="token number">3</span>天学习js<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">'toy'</span><span class="token operator">&gt;</span>第<span class="token number">4</span>天学习js<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>第<span class="token number">5</span>天学习js<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>第<span class="token number">6</span>天学习js<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>第<span class="token number">7</span>天学习js<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>第<span class="token number">8</span>天学习js<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>第<span class="token number">9</span>天学习js<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>第<span class="token number">10</span>天学习js<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>        <span class="token keyword">var</span> times <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"time"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>times<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> times<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>times<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> lis <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lis<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回值永远是伪数组</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lis<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> lis <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lis<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> lis <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">"toy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lis<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> lis <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//他只要一个</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lis<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&lt;li class="one"&gt;第1天学习js&lt;/li&gt;</span>        <span class="token keyword">var</span> lis <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span> <span class="token comment">//CSS选择器,得到的是伪数组,容器里装的是DOM</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lis<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>元素的属性获取</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"https://www.baidu.com"</span><span class="token operator">&gt;</span>百度<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>button<span class="token operator">&gt;</span>修改<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>       <span class="token keyword">var</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           a<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">'https://parade001.github.io/'</span><span class="token punctuation">;</span>           a<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'My_blog'</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="事件组成"><a href="#事件组成" class="headerlink" title="事件组成"></a>事件组成</h3><ul><li>事件源(触发对象)</li><li>事件类型(触发类型)</li><li>事件处理程序(通过函数赋值完成)</li></ul><p>在github上看到一个比喻很是形象</p><pre class="line-numbers language-none"><code class="language-none">你考试不及格惹恼了你妈妈,你妈妈叫你爸去学校,当你放学出校门把你打一顿,当你放学出校门那刻,你被打了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>button<span class="token operator">&gt;</span>猜猜我是谁<span class="token operator">?</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>      <span class="token comment">// var btn = document.getElementsByTagName('button')[0]; //[0]因为...bytagname返回的是一个伪数组</span>      <span class="token comment">// btn.onclick = function () {</span>      <span class="token comment">//     alert('我是大傻逼');</span>      <span class="token comment">// }</span>      <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'你是狗'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>赋值操作</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>今天是雨天<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>button<span class="token operator">&gt;</span>记得带伞<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>      <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"&lt;span style=color:red&gt;爪巴啊&lt;/span&gt;"</span>          <span class="token comment">// div.innerText = "&lt;span style=color:red&gt;爪巴啊&lt;/span&gt;"// interHTMl可以识别网页元素标签,innerText则不行;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>操作元素的deemo</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>button<span class="token operator">&gt;</span>当前时间为<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>时间<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>时间<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>        <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            div<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> year <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> month <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> dates <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'星期日'</span><span class="token punctuation">,</span> <span class="token string">'星期一'</span><span class="token punctuation">,</span> <span class="token string">'星期二'</span><span class="token punctuation">,</span> <span class="token string">'星期三'</span><span class="token punctuation">,</span> <span class="token string">'星期四'</span><span class="token punctuation">,</span> <span class="token string">'星期五'</span><span class="token punctuation">,</span> <span class="token string">'星期六'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> day <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">'今天是:'</span> <span class="token operator">+</span> year <span class="token operator">+</span> <span class="token string">'年'</span> <span class="token operator">+</span> month <span class="token operator">+</span> <span class="token string">'月'</span> <span class="token operator">+</span> dates <span class="token operator">+</span> <span class="token string">'日'</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>day<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过更改路径达到更换图片的deemo</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> ldh <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'ldh'</span><span class="token punctuation">)</span>      <span class="token keyword">var</span> zxy <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'zxy'</span><span class="token punctuation">)</span>      <span class="token keyword">var</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span>      zxy<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token comment">// 图片路径 ; //通过更改路径更换图片;</span>              img<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">'张学友'</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      ldh<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token comment">// 图片路径;</span>              img<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">'刘德华'</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>京东密码框表单元素的deemo</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>     <span class="token punctuation">.</span>box input <span class="token punctuation">{</span>            width<span class="token operator">:</span> <span class="token number">370</span>px<span class="token punctuation">;</span>            height<span class="token operator">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>            line<span class="token operator">-</span>height<span class="token operator">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>            border<span class="token operator">:</span> none<span class="token punctuation">;</span>            outline<span class="token operator">:</span> none<span class="token punctuation">;</span>            text<span class="token operator">-</span>align<span class="token operator">:</span> center<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>input_style <span class="token punctuation">{</span>            color<span class="token operator">:</span> #aaa<span class="token punctuation">;</span>            border<span class="token operator">:</span> <span class="token number">1</span>px solid #d9d9d9<span class="token punctuation">;</span>            outline<span class="token operator">:</span> none<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>input_text_focus <span class="token punctuation">{</span>            border<span class="token operator">:</span> <span class="token number">1</span>px solid #ffd6db<span class="token punctuation">;</span>            color<span class="token operator">:</span> #<span class="token number">888</span><span class="token punctuation">;</span>            outline<span class="token operator">:</span> none<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>box <span class="token punctuation">{</span>            margin<span class="token operator">:</span> <span class="token number">100</span>px auto<span class="token punctuation">;</span>            width<span class="token operator">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>            border<span class="token operator">:</span> <span class="token number">1</span>px solid #ccc<span class="token punctuation">;</span>            border<span class="token operator">-</span>radius<span class="token operator">:</span> <span class="token number">15</span>px <span class="token number">15</span>px <span class="token number">15</span>px <span class="token number">15</span>px<span class="token punctuation">;</span>            display<span class="token operator">:</span> flex<span class="token punctuation">;</span>            justify<span class="token operator">-</span>content<span class="token operator">:</span> center<span class="token punctuation">;</span>            align<span class="token operator">-</span>items<span class="token operator">:</span> center<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"box"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> value<span class="token operator">=</span><span class="token string">"邮箱/ID/手机号"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"input_style"</span> style<span class="token operator">=</span><span class="token string">"color:#ccc"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>        <span class="token keyword">var</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        input<span class="token punctuation">.</span><span class="token function-variable function">onfocus</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">'邮箱/ID/手机号'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'input_style'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'Cyan'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        input<span class="token punctuation">.</span><span class="token function-variable function">onblur</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'邮箱/ID/手机号'</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'input_style'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'#9999'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Web API输入框焦点deemo</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>        <span class="token punctuation">.</span>box input <span class="token punctuation">{</span>            width<span class="token operator">:</span> <span class="token number">370</span>px<span class="token punctuation">;</span>            height<span class="token operator">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>            line<span class="token operator">-</span>height<span class="token operator">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>            border<span class="token operator">:</span> none<span class="token punctuation">;</span>            outline<span class="token operator">:</span> none<span class="token punctuation">;</span>            text<span class="token operator">-</span>align<span class="token operator">:</span> center<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>input_style <span class="token punctuation">{</span>            color<span class="token operator">:</span> #aaa<span class="token punctuation">;</span>            border<span class="token operator">:</span> <span class="token number">1</span>px solid #d9d9d9<span class="token punctuation">;</span>            outline<span class="token operator">:</span> none<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>input_text_focus <span class="token punctuation">{</span>            border<span class="token operator">:</span> <span class="token number">1</span>px solid #ffd6db<span class="token punctuation">;</span>            color<span class="token operator">:</span> #<span class="token number">888</span><span class="token punctuation">;</span>            outline<span class="token operator">:</span> none<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>box <span class="token punctuation">{</span>            margin<span class="token operator">:</span> <span class="token number">100</span>px auto<span class="token punctuation">;</span>            width<span class="token operator">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>            border<span class="token operator">:</span> <span class="token number">1</span>px solid #ccc<span class="token punctuation">;</span>            border<span class="token operator">-</span>radius<span class="token operator">:</span> <span class="token number">15</span>px <span class="token number">15</span>px <span class="token number">15</span>px <span class="token number">15</span>px<span class="token punctuation">;</span>            display<span class="token operator">:</span> flex<span class="token punctuation">;</span>            justify<span class="token operator">-</span>content<span class="token operator">:</span> center<span class="token punctuation">;</span>            align<span class="token operator">-</span>items<span class="token operator">:</span> center<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"box"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> value<span class="token operator">=</span><span class="token string">"邮箱/ID/手机号"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"input_style"</span> style<span class="token operator">=</span><span class="token string">"color:#ccc"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>        <span class="token keyword">var</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        input<span class="token punctuation">.</span><span class="token function-variable function">onfocus</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'input_style'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        input<span class="token punctuation">.</span><span class="token function-variable function">onblur</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'input_style'</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'邮箱/ID/手机号'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关闭广告的deemo</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">  <span class="token punctuation">.</span>box <span class="token punctuation">{</span>            position<span class="token operator">:</span> relative<span class="token punctuation">;</span>            width<span class="token operator">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>            height<span class="token operator">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            margin<span class="token operator">:</span> <span class="token number">100</span>px auto<span class="token punctuation">;</span>            background<span class="token operator">:</span> red<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>box img <span class="token punctuation">{</span>            width<span class="token operator">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>            height<span class="token operator">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>box <span class="token punctuation">.</span>close <span class="token punctuation">{</span>            position<span class="token operator">:</span> absolute<span class="token punctuation">;</span>            right<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            top<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>box <span class="token punctuation">.</span>stop <span class="token punctuation">{</span>            width<span class="token operator">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>            height<span class="token operator">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>box <span class="token punctuation">.</span>stop img <span class="token punctuation">{</span>            width<span class="token operator">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>            height<span class="token operator">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"box"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"../img/luzhou.jpg"</span> alt<span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"stop"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"../img/close.jpg"</span> alt<span class="token operator">=</span><span class="token string">""</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"close"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>        <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.stop'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            box<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下拉菜单的案例</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>        <span class="token operator">*</span> <span class="token punctuation">{</span>            margin<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            padding<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>baba <span class="token punctuation">{</span>            display<span class="token operator">:</span> flex<span class="token punctuation">;</span>            align<span class="token operator">-</span>items<span class="token operator">:</span> center<span class="token punctuation">;</span>            justify<span class="token operator">-</span>content<span class="token operator">:</span> center<span class="token punctuation">;</span>            margin<span class="token operator">:</span> <span class="token number">100</span>px auto<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        li <span class="token punctuation">{</span>            list<span class="token operator">-</span>style<span class="token operator">:</span> none<span class="token punctuation">;</span>            background<span class="token operator">:</span> #ccc<span class="token punctuation">;</span>            width<span class="token operator">:</span> <span class="token number">70</span>px<span class="token punctuation">;</span>            height<span class="token operator">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>            line<span class="token operator">-</span>height<span class="token operator">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>            text<span class="token operator">-</span>align<span class="token operator">:</span> center<span class="token punctuation">;</span>            border<span class="token operator">-</span>radius<span class="token operator">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        li a <span class="token punctuation">{</span>            font<span class="token operator">-</span>size<span class="token operator">:</span> <span class="token number">18</span>px<span class="token punctuation">;</span>            text<span class="token operator">-</span>decoration<span class="token operator">:</span> none<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>sow <span class="token punctuation">{</span>            text<span class="token operator">-</span>align<span class="token operator">:</span> center<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>cow <span class="token punctuation">{</span>            display<span class="token operator">:</span> flex<span class="token punctuation">;</span>            align<span class="token operator">-</span>items<span class="token operator">:</span> center<span class="token punctuation">;</span>            justify<span class="token operator">-</span>content<span class="token operator">:</span> center<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"baba"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>weibo<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">'sow'</span><span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">'cow'</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>微博<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">'cow'</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>微博<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">'cow'</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>微博<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">'cow'</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>微博<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">'cow'</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>微博<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>        <span class="token keyword">var</span> baba <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.baba'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> lis <span class="token operator">=</span> baba<span class="token punctuation">.</span>children<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lis<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onmouseover</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onmouseout</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>背景颜色关灯案例</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>        body <span class="token punctuation">{</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> aqua<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        p <span class="token punctuation">{</span>            color<span class="token operator">:</span> red<span class="token punctuation">;</span>            margin<span class="token operator">-</span>top<span class="token operator">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>            text<span class="token operator">-</span>align<span class="token operator">:</span> center<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>button<span class="token operator">&gt;</span>天黑请关灯<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>        <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> body <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">"#000"</span><span class="token punctuation">;</span>                flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">"#fff"</span><span class="token punctuation">;</span>                flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> DOM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 了解DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JQuery中Split运用</title>
      <link href="/2019/05/0330350.html"/>
      <url>/2019/05/0330350.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>微博发布demo</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"../js/jquery-3.6.0.min.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>        <span class="token punctuation">.</span>box <span class="token punctuation">{</span>            width<span class="token operator">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span>            height<span class="token operator">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> #ffff<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>span <span class="token punctuation">{</span>            width<span class="token operator">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            height<span class="token operator">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> #fefefe<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>btn <span class="token punctuation">{</span>            width<span class="token operator">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>            height<span class="token operator">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> black<span class="token punctuation">;</span>            color<span class="token operator">:</span> red<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        textarea <span class="token punctuation">{</span>            width<span class="token operator">:</span> <span class="token number">80</span><span class="token operator">%</span><span class="token punctuation">;</span>            height<span class="token operator">:</span> <span class="token number">80</span><span class="token operator">%</span><span class="token punctuation">;</span>            margin<span class="token operator">:</span> <span class="token number">20</span>px auto<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"box"</span> id<span class="token operator">=</span><span class="token string">"weibo"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>女拳微博<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>textarea name<span class="token operator">=</span><span class="token string">"name"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"txt"</span> id<span class="token operator">=</span><span class="token string">""</span> cols<span class="token operator">=</span><span class="token string">"30"</span> rows<span class="token operator">=</span><span class="token string">"10"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>textarea<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>button <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"btn"</span><span class="token operator">&gt;</span>开始打拳<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> li <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;li&gt;&lt;/li&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                li<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".txt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"ul"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prepend</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".txt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"ul"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideUp</span><span class="token punctuation">(</span><span class="token string">"slow"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>split demo</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>       <span class="token comment">// var arr = ['a', 'b', 'c'];</span>       <span class="token comment">// // 删除b元素  splice(从哪个位置开始删除, 删除几个元素)</span>       <span class="token comment">// arr.splice(1, 1);</span>       <span class="token comment">// console.log(arr);</span>       <span class="token comment">// const str = "baba likely cute";</span>       <span class="token comment">// const words = str.split("");</span>       <span class="token comment">// console.log(words[3]);</span>       <span class="token keyword">function</span> <span class="token function">splitString</span><span class="token punctuation">(</span><span class="token parameter">stringToSplit<span class="token punctuation">,</span> separator</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">var</span> arrayOfStrings <span class="token operator">=</span> stringToSplit<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>separator<span class="token punctuation">)</span><span class="token punctuation">;</span>           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'The original string is: "'</span> <span class="token operator">+</span> stringToSplit <span class="token operator">+</span>               <span class="token string">'"'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//The original string is: "Oh brave new world that has such people in it."</span>           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'The separator is: "'</span> <span class="token operator">+</span> separator <span class="token operator">+</span> <span class="token string">'"'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//The separator is: " "</span>           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"The array has "</span> <span class="token operator">+</span> arrayOfStrings<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token string">" elements: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//The array has 12 elements:</span>           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrayOfStrings<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>               console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrayOfStrings<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" / "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//讲arrayOfStrings[i]+/ 作为分割符</span>       <span class="token punctuation">}</span>       <span class="token keyword">var</span>           tempestString <span class="token operator">=</span> <span class="token string">"Oh brave new world that has such people in it."</span><span class="token punctuation">;</span>       <span class="token keyword">var</span>           monthString <span class="token operator">=</span> <span class="token string">"Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec"</span><span class="token punctuation">;</span>       <span class="token keyword">var</span> space <span class="token operator">=</span> <span class="token string">" "</span><span class="token punctuation">;</span>       <span class="token keyword">var</span> comma <span class="token operator">=</span> <span class="token string">","</span><span class="token punctuation">;</span>       <span class="token function">splitString</span><span class="token punctuation">(</span>tempestString<span class="token punctuation">,</span> space<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">splitString</span><span class="token punctuation">(</span>tempestString<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">splitString</span><span class="token punctuation">(</span>monthString<span class="token punctuation">,</span> comma<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JQuery事件委托及排他运用</title>
      <link href="/2019/05/0236025.html"/>
      <url>/2019/05/0236025.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>JQuery动画</p><p>demo淡入淡出的效果</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>button<span class="token operator">&gt;</span>淡入<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>button<span class="token operator">&gt;</span>淡出<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>button<span class="token operator">&gt;</span>切换<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>button<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>       <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeIn</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span><span class="token punctuation">)</span>           <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeOut</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span><span class="token punctuation">)</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>demo(each)循环</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token number">500</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token number">10</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token number">10</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"../js/jquery-3.6.0.min.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>       <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> dom</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           sum <span class="token operator">+=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span>dom<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//520</span>   <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>demo 手风琴效果</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"king"</span><span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>           <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"current"</span><span class="token operator">&gt;</span>               <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#"</span><span class="token operator">&gt;</span>                   <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"images/m1.jpg"</span> alt<span class="token operator">=</span><span class="token string">""</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"small"</span><span class="token operator">&gt;</span>                   <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"images/m.png"</span> alt<span class="token operator">=</span><span class="token string">""</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"big"</span><span class="token operator">&gt;</span>               <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>           <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>           <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>               <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#"</span><span class="token operator">&gt;</span>                   <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"images/l1.jpg"</span> alt<span class="token operator">=</span><span class="token string">""</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"small"</span><span class="token operator">&gt;</span>                   <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"images/l.png"</span> alt<span class="token operator">=</span><span class="token string">""</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"big"</span><span class="token operator">&gt;</span>               <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>           <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>           <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>               <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#"</span><span class="token operator">&gt;</span>                   <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"images/c1.jpg"</span> alt<span class="token operator">=</span><span class="token string">""</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"small"</span><span class="token operator">&gt;</span>                   <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"images/c.png"</span> alt<span class="token operator">=</span><span class="token string">""</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"big"</span><span class="token operator">&gt;</span>               <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>           <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>           <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>               <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#"</span><span class="token operator">&gt;</span>                   <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"images/w1.jpg"</span> alt<span class="token operator">=</span><span class="token string">""</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"small"</span><span class="token operator">&gt;</span>                   <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"images/w.png"</span> alt<span class="token operator">=</span><span class="token string">""</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"big"</span><span class="token operator">&gt;</span>               <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>           <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>           <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>               <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#"</span><span class="token operator">&gt;</span>                   <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"images/z1.jpg"</span> alt<span class="token operator">=</span><span class="token string">""</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"small"</span><span class="token operator">&gt;</span>                   <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"images/z.png"</span> alt<span class="token operator">=</span><span class="token string">""</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"big"</span><span class="token operator">&gt;</span>               <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>           <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>           <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>               <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#"</span><span class="token operator">&gt;</span>                   <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"images/h1.jpg"</span> alt<span class="token operator">=</span><span class="token string">""</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"small"</span><span class="token operator">&gt;</span>                   <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"images/h.png"</span> alt<span class="token operator">=</span><span class="token string">""</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"big"</span><span class="token operator">&gt;</span>               <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>           <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>           <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>               <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#"</span><span class="token operator">&gt;</span>                   <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"images/t1.jpg"</span> alt<span class="token operator">=</span><span class="token string">""</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"small"</span><span class="token operator">&gt;</span>                   <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"images/t.png"</span> alt<span class="token operator">=</span><span class="token string">""</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"big"</span><span class="token operator">&gt;</span>               <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>           <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>       <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".king li"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mouseover</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                       width<span class="token operator">:</span> <span class="token number">226</span>                   <span class="token punctuation">}</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">".small"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">siblings</span><span class="token punctuation">(</span><span class="token string">".big"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">siblings</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                       width<span class="token operator">:</span> <span class="token number">70</span>                   <span class="token punctuation">}</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">".small"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fade_in</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">siblings</span><span class="token punctuation">(</span><span class="token string">".big"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span><span class="token punctuation">)</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>demo_scroll</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>        <span class="token punctuation">.</span>container <span class="token punctuation">{</span>            width<span class="token operator">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>            height<span class="token operator">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> blue<span class="token punctuation">;</span>            margin<span class="token operator">:</span> <span class="token number">1000</span>px auto<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>back <span class="token punctuation">{</span>            width<span class="token operator">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            height<span class="token operator">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> green<span class="token punctuation">;</span>            position<span class="token operator">:</span> fixed<span class="token punctuation">;</span>            right<span class="token operator">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            bottom<span class="token operator">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"back"</span><span class="token operator">&gt;</span>返回顶部<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"container"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"../js/jquery-3.6.0.min.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>        <span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".container"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>top<span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scroll</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".back"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>show<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".back"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".back"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"body,html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                scrollTop<span class="token operator">:</span> <span class="token number">0</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Js JQ实现tab 切换</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">  <span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>        <span class="token operator">*</span> <span class="token punctuation">{</span>            margin<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            padding<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        li <span class="token punctuation">{</span>            list<span class="token operator">-</span>style<span class="token operator">-</span>type<span class="token operator">:</span> none<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>tab <span class="token punctuation">{</span>            width<span class="token operator">:</span> <span class="token number">978</span>px<span class="token punctuation">;</span>            margin<span class="token operator">:</span> <span class="token number">100</span>px auto<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>tab_list <span class="token punctuation">{</span>            height<span class="token operator">:</span> <span class="token number">39</span>px<span class="token punctuation">;</span>            border<span class="token operator">:</span> <span class="token number">1</span>px solid #ccc<span class="token punctuation">;</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> #f1f1f1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>tab_list li <span class="token punctuation">{</span>            float<span class="token operator">:</span> left<span class="token punctuation">;</span>            height<span class="token operator">:</span> <span class="token number">39</span>px<span class="token punctuation">;</span>            line<span class="token operator">-</span>height<span class="token operator">:</span> <span class="token number">39</span>px<span class="token punctuation">;</span>            padding<span class="token operator">:</span> <span class="token number">0</span> <span class="token number">20</span>px<span class="token punctuation">;</span>            text<span class="token operator">-</span>align<span class="token operator">:</span> center<span class="token punctuation">;</span>            cursor<span class="token operator">:</span> pointer<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>tab_list <span class="token punctuation">.</span>current <span class="token punctuation">{</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> #c81623<span class="token punctuation">;</span>            color<span class="token operator">:</span> #fff<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>item_info <span class="token punctuation">{</span>            padding<span class="token operator">:</span> <span class="token number">20</span>px <span class="token number">0</span> <span class="token number">0</span> <span class="token number">20</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>item <span class="token punctuation">{</span>            display<span class="token operator">:</span> none<span class="token punctuation">;</span>            display<span class="token operator">:</span> flex<span class="token punctuation">;</span>            align<span class="token operator">-</span>items<span class="token operator">:</span> center<span class="token punctuation">;</span>            justify<span class="token operator">-</span>content<span class="token operator">:</span> center<span class="token punctuation">;</span>            width<span class="token operator">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            text<span class="token operator">-</span>align<span class="token operator">:</span> center<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tab"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tab_list"</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"current"</span><span class="token operator">&gt;</span>商品介绍<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>规格与包装<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>售后保障<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>商品评价（<span class="token number">50000</span>）<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>手机社区<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tab_con"</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"item"</span> style<span class="token operator">=</span><span class="token string">"display: block;"</span><span class="token operator">&gt;</span>                商品介绍模块内容                商品介绍模块内容                商品介绍模块内容                商品介绍模块内容            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"item"</span><span class="token operator">&gt;</span>                规格与包装模块内容                规格与包装模块内容                规格与包装模块内容                规格与包装模块内容            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"item"</span><span class="token operator">&gt;</span>                售后保障模块内容                售后保障模块内容                售后保障模块内容            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"item"</span><span class="token operator">&gt;</span>                商品评价（<span class="token number">50000</span>）模块内容                商品评价（<span class="token number">50000</span>）模块内容                商品评价（<span class="token number">50000</span>）模块内容                商品评价（<span class="token number">50000</span>）模块内容            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"item"</span><span class="token operator">&gt;</span>                手机社区模块内容                手机社区模块内容                手机社区模块内容                手机社区模块内容            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span> <span class="token keyword">var</span> titles <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">".tab_list"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> lis <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> son <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">".item"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lis<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lis<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"current"</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> son<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                son<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            son<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"block"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// $(function () {</span>    <span class="token comment">//     $(".tab_list li").click(function () {</span>    <span class="token comment">//         $(this).addClass("current").siblings().removeClass("current");</span>    <span class="token comment">//         var index = $(this).index();</span>    <span class="token comment">//         $(".tab_con .item").eq(index).show().siblings().hide();</span>    <span class="token comment">//     })</span>    <span class="token comment">// })</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>demo 事件委托</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token number">4</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token number">5</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"../js/jquery-3.6.0.min.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>       <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"ul"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token string">"li"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Please enter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span>       <span class="token keyword">var</span> newLi <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;li&gt;我想吃苹果&lt;/li&gt;"</span><span class="token punctuation">)</span>       <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"ul"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>newLi<span class="token punctuation">)</span>   <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排他及手风琴效果 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JQuery入门</title>
      <link href="/2019/04/3054448.html"/>
      <url>/2019/04/3054448.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h1><p>是JS一个库文件,将Webapi的属性或方法进行了二次封装.</p><p>核心思想是隐式迭代,链式编程.</p><blockquote><p>=设计初衷引用作者一句话:wirte less, do more!</p></blockquote><p>编写第一个JQuery程序</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>title<span class="token operator">&gt;</span>第一个简单的jQuery程序<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"../js/jquery-3.6.0.min.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">&gt;</span>        <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'你好,欢迎来到jQuery世界'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$(document).ready()方法和window.load方法的区别</p><p>执行时间:$(document).ready()在页面框架下载文本才执行;</p><p>而window.load必须等页面全部加载下载完毕才能执行;</p><p>前者效率高于后者</p><p>执行数量不同:$(document).ready可以重复写多个,每次执行结果不同;</p><p>window.load虽然也可以执行多个,但仅输出一个执行结果</p><pre class="line-numbers language-none"><code class="language-none">$(document).ready(functiong{})可以简称成$(function(){})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="利用JQuery控制DOM对象"><a href="#利用JQuery控制DOM对象" class="headerlink" title="利用JQuery控制DOM对象"></a>利用JQuery控制DOM对象</h1><p>遍历内部的DOM元素的过程叫做: <em>隐式迭代</em>  (<em>把匹配的所有元素遍历循环,给每个元素添加css这个方法</em>)</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">  <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"../js/jquery-3.6.0.min.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token number">4</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"ul li"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"backgroundColor"</span><span class="token punctuation">,</span> <span class="token string">"yellow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取第一个li</span><span class="token comment">// var firstLi = $("ul li:first-child")</span><span class="token comment">//      console.log(firstLi);</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="JQuery选择器的类型"><a href="#JQuery选择器的类型" class="headerlink" title="JQuery选择器的类型"></a>JQuery选择器的类型</h1><ul><li><em><strong>基本选择器</strong></em></li></ul><ul><li><p><em><strong>层次选择器</strong></em></p></li><li><p><em><strong>过滤选择器</strong></em></p><ol><li><p><strong>简单过滤选择器</strong></p></li><li><p><strong>内容过滤选择器</strong></p></li><li><p><strong>可见性过滤选择器</strong></p></li><li><p><strong>属性过滤选择器</strong></p></li><li><p><strong>子元素过滤选择器</strong></p></li><li><p><strong>表单对象属性过滤选择器</strong></p></li></ol></li><li><p><em><strong>表单选择器</strong></em></p></li></ul><p><img src="C:\Users\xt_xi\AppData\Roaming\Typora\typora-user-images\1635668968296.png" alt="1635668968296"></p>]]></content>
      
      
      <categories>
          
          <category> JQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 了解JQuey </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript理解预解析</title>
      <link href="/2019/04/2752408.html"/>
      <url>/2019/04/2752408.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="JavaScript预解析"><a href="#JavaScript预解析" class="headerlink" title="JavaScript预解析"></a>JavaScript预解析</h1><p>JS运行机制分为2步</p><p>1、预解析</p><p>2、执行代码</p><p>预解析：在当前作用域下,js运行之前，会把带有var和function关键字的事先声明，并在内存中安排好。 然后再从上到下执行js语句。 <strong>预解析只会发生在通过var定义的变量和function（不是表达式式的function）上</strong>。如果内存中存在该变量名var，则忽略这个操作；预解析function时会将函数名和函数相绑定，如果有，则会在内存不开辟空间，但是函数体的地址会覆盖原函数体。通过var关键字定义的变量进行预解析的时候：都是<strong>声明declare，不管它有没有赋值，都会赋值undefined</strong>。</p><p>预解析分为</p><ul><li><strong>变量预解析（变量提升）</strong></li><li><strong>函数预解析（函数提升）</strong></li></ul><p>变量提升：将所有的变量声明提升到当前的作用域最前面，不提升赋值操作</p><p>函数提升：将所有的函数声明提升到当前的作用域的最前面，不调用函数</p><p>注意：进入函数体也会有预解析</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span>（！a<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//10</span><span class="token punctuation">}</span><span class="token function">fnn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> num <span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 123</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">f2</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//var num = undefined=&gt;456</span>    conlose<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//undefined</span>    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">456</span><span class="token punctuation">;</span>    <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//456</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//123</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//456</span>    num <span class="token operator">=</span> <span class="token number">456</span><span class="token punctuation">;</span>    <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//456</span><span class="token punctuation">}</span><span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//var a = 100; a相当于一个局部变量；</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//100</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//10</span><span class="token punctuation">}</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// var a = 100</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 打印函数体</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//10</span>    <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//报错</span><span class="token punctuation">}</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS概念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript理解原型</title>
      <link href="/2019/04/268177.html"/>
      <url>/2019/04/268177.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>JavaScript </p><p>原型模式:</p><p>​    1.理解原型:在自定义构造函数时，原型对象默认只会获得 constructor 属性，其他的所有方法都继承自Object。每次调用构造函数创建一个新实例，这个实例的内部[[Prototype]]指针就会被赋值为构造函数的原型对象</p><p>原型对象</p><p>原型链</p><img src="https://images.weserv.nl/?url=https://article.biliimg.com/bfs/article/e46469c3fdff9147d092e1a8e16d20b4837f3f48.png"><p>this 实际上是在函数被调用时发生的绑定，它指向什么完全取决于函数在哪里被调用（也就是函数的调用方法）。</p><hr>调用栈想象成一个函数调用链，就像我们在前面代码段的注释中所写的一样。<p>但是这种方法非常麻烦并且容易出错。另一个查看调用栈的方法是使用浏览器的调试工具。</p><p>绝大多数现代桌面浏览器都内置了开发者工具，其中包含 JavaScript 调试器。就本例来说，你可以在工具中给 foo() 函数的第一行代码设置一个断点，或者直接在第一行代码之前插入一条 debugger;语句。</p><p>运行代码时，调试器会在那个位置暂停，同时会展示当前位置的函数调用列表，这就是你的调用栈因此，如果你想要分析 this 的绑定，使用开发者工具得到调用栈，然后找到栈中第二个元素，这就是真正的调用位置。</p><p> this 的默认绑定指向全局对象</p><p>使用严格模式（strict mode），则不能将全局对象用于默认绑定，因此 this 会绑定到undefined：</p>]]></content>
      
      
      
        <tags>
            
            <tag> Prototype </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解this指向</title>
      <link href="/2019/04/2411527.html"/>
      <url>/2019/04/2411527.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>this指向是个老生常谈的话题</p><p>最近读了JS<strong>忍者秘籍及博客介绍</strong>,就先写下</p><p>假如有人问你this指向那里,你可以说:我也不知道.</p><hr>首先要想知道this的指向,首先得知道this是什么.<blockquote><p>当一个函数被调用时，会创建一个活动记录，有时也叫执行上下文，这个记录会包含函数在哪里被调用（调用栈）、函数的调用方式，传入的参数信息，this就是这个记录属性</p><p>​                                </p><p align="right">—–你不知道的JS上卷</p><p></p><hr>                                    </blockquote><blockquote><p>this是函数在调用时,除了函数的显参,还传入了叫做this的隐参(还有另一个叫做arguments)<br>this参数引用了该函数调用进行隐式<strong>关联的一个对象</strong>叫做<em><strong>函数的上下文</strong>function context</em>而函数上下文是一个概念,在JS语言中,this依赖于函数的调用方式<br>因此将this 称为<em>调用上下文</em>更好理解(invocation context)</p><p>​                                </p><p align="right">—-JavaScript忍者秘籍</p><p></p><hr>                </blockquote><blockquote><p>this绑定和函数声明的位置没有任何关系只取决于函数的调用方式.</p><p>this既不指向函数自身也不指向函数的词法作用域.他是在函数被调用时发生的绑定，指向完全取决于函数在哪里被调用.</p><p align="right">-----你不知道的JS上卷</p><p> ​                                            </p></blockquote><hr><h2 id="作为函数进行调用"><a href="#作为函数进行调用" class="headerlink" title="作为函数进行调用"></a>作为函数进行调用</h2><p>JS中允许函数作为函数进行调用,区别于其他的调用机制:方法,构造器,apply/call,如果函数没有通过,方法构造器,或者apply()/call()进行调用,我们可以认为它是”作为函数”进行调用,通常发生在函数使用()操作符进行调用的时候. </p><p>此时(普通函数,定时器函数,立即执行函数)this<em><strong>指向全局上下文–window对象</strong></em></p><p>​                                        </p><p align="right">—-JavaScript忍者秘籍</p><p></p><hr><h2 id="作为方法进行调用"><a href="#作为方法进行调用" class="headerlink" title="作为方法进行调用"></a>作为方法进行调用</h2><blockquote><p>将函数作为对象的一个方法<em>method</em>进行调用时,那么该对象变成了函数上下文.通俗解释的说,作为对象的一个方法进行调用时候,this指向这个拥有这个方法的对象(方法所属的对象).</p><p>​                                    </p><p align="right">—-JavaScript忍者秘籍</p><p></p><hr></blockquote><h2 id="作为构造器constructor进行调用"><a href="#作为构造器constructor进行调用" class="headerlink" title="作为构造器constructor进行调用"></a>作为构造器<em>constructor</em>进行调用</h2><p>构造器调用时就会发生:</p><blockquote><ul><li><p>创建一个新的对象</p></li><li><p>传递给构造器的对象是this参数,从而称为构造器的函数上下文</p></li><li><p>如果没有显示的返回值,新创建的对象则作为构造器的返回值进行返回    </p><p>​                                </p><p align="right">—-JavaScript忍者秘籍</p><p></p><hr></li></ul></blockquote><p>构造器的目的就是要去创造一个新对象并对其进行设置,然后将构造器的返回值进行返回.任何干扰这种意图的函数都不时候作为构造器.<br><em>即当函数<strong>作为构造器进行调用</strong>时候,<br><em><strong><em>this指向是对象</em>,原型对象里的方法也指向实例对象</strong></em></em></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> this指向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript数据类型检测</title>
      <link href="/2019/04/2159577.html"/>
      <url>/2019/04/2159577.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="JavaScript数据类型检测"><a href="#JavaScript数据类型检测" class="headerlink" title="JavaScript数据类型检测"></a>JavaScript数据类型检测</h1><h3 id="typeof-或-typeof"><a href="#typeof-或-typeof" class="headerlink" title="typeof   或  typeof()"></a>typeof   或  typeof()</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//number</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//number</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//string</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>abc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//string</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//boolean</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//boolean</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span>  <span class="token comment">//undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token comment">//object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'leeo'</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token boolean">false</span><span class="token keyword">var</span> bconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> num<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> name<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> b<span class="token punctuation">)</span><span class="token comment">// isNaN ture 为数字 flase 非数字</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="遍历数组返回最大值"><a href="#遍历数组返回最大值" class="headerlink" title="遍历数组返回最大值"></a>遍历数组返回最大值</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> num3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> num3<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    max <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> max<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入第一个数:'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> num2 <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入第二个数:'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> num3 <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入第三个数:'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">myFunction</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> num3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'最大值为:'</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="三元表达式求3个数最大值"><a href="#三元表达式求3个数最大值" class="headerlink" title="三元表达式求3个数最大值"></a>三元表达式求3个数最大值</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getArrMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输出第一个数字:'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">var</span> num2 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输出第二个数字:'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">var</span> num3 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输出第三个数字:'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> num1 <span class="token operator">&gt;</span> num2 <span class="token operator">?</span> <span class="token punctuation">(</span>num1 <span class="token operator">&gt;</span> num3 <span class="token operator">?</span> num1 <span class="token operator">:</span> num3<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>num2 <span class="token operator">&gt;</span> num3 <span class="token operator">?</span> num2 <span class="token operator">:</span> num3<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">getArrMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="翻转数组"><a href="#翻转数组" class="headerlink" title="翻转数组"></a>翻转数组</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">var</span> newArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               newArray<span class="token punctuation">[</span>newArray<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token keyword">return</span> newArray<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">var</span> sort <span class="token operator">=</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'teng'</span><span class="token punctuation">,</span> <span class="token string">'baba'</span><span class="token punctuation">,</span> <span class="token string">'yetu'</span><span class="token punctuation">,</span> <span class="token string">'xiong'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sort<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="while弹窗翻转"><a href="#while弹窗翻转" class="headerlink" title="while弹窗翻转"></a>while弹窗翻转</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入数字'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> nameArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>name <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> name <span class="token operator">!=</span> <span class="token string">''</span> <span class="token operator">&amp;&amp;</span> nameArray<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                name <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入数字'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                nameArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            nameArray<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">compareFunction</span><span class="token punctuation">(</span><span class="token parameter">param1<span class="token punctuation">,</span> param2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> param1 <span class="token operator">-</span> param2<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> nameArray<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span>nameArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="判断数组是否有素数"><a href="#判断数组是否有素数" class="headerlink" title="判断数组是否有素数"></a>判断数组是否有素数</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"请输入一个数:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> isPrime <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> x<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    isPrime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isPrime <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'是素数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'不是素数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="简易的计算机deemo"><a href="#简易的计算机deemo" class="headerlink" title="简易的计算机deemo"></a>简易的计算机deemo</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getRes</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> symbol<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>symbol<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token string">'+'</span><span class="token operator">:</span>                    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'-'</span><span class="token operator">:</span>                    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'*'</span><span class="token operator">:</span>                    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'/'</span><span class="token operator">:</span>                    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token operator">:</span>                    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">'运算符输入错误'</span><span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入一个数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> symbol <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入运算符'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> num2 <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入一个数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'结果为：'</span> <span class="token operator">+</span> <span class="token function">getRes</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> symbol<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript函数及类数组</title>
      <link href="/2019/04/195323.html"/>
      <url>/2019/04/195323.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="JavaScript函数"><a href="#JavaScript函数" class="headerlink" title="JavaScript函数"></a>JavaScript函数</h1><p><strong>1.概念</strong></p><p>将相同的业务逻辑封装起来</p><p>函数是第一型对象first-class Object   </p><p>MDN:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">在 JavaScript 中，函数是一等对象，因为它们可以像任何其他对象一样拥有属性和方法。它们与其他对象的区别在于可以调用函数。简而言之，它们是 Function 对象<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>wiki:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">在计算机科学中，如果一种编程语言将函数视为一等对象，则称其支持一等函数（或函数字面量）。具体来说，这意味着该语言支持在程序执行期间构造新函数，将它们存储在数据结构中，将它们作为参数传递给其他函数，并将它们作为其他函数的值返回。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>特点:</p><ul><li>通过字面量进行创建</li><li>赋值给变量或者属性</li><li>作为参数进行传递</li><li>作为函数结果进行返回</li><li>拥有属性和方法</li><li>函数是 Object 类型的一个实例</li><li>一个函数可以有属性，并且有一个指向它的构造函数方法的链接</li><li>您可以将函数存储在变量中</li><li>您可以将函数作为参数传递给另一个函数</li><li>您可以从函数返回该函数</li></ul><p><strong>2.语法</strong>**</p><ul><li><p>函数的声明(声明式/匿名式)</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是声明式的函数"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是表达式式的函数"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>表达式式（匿名式） 函数也是一种数据类型</p></li></ul><p><strong>3.函数的调用</strong></p><p>用JS编程语言创建你的hello world</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">MyFunction</span><span class="token punctuation">(</span><span class="token parameter">参数<span class="token number">1</span>，参数<span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">MyFunction</span><span class="token punctuation">(</span>参数<span class="token number">1</span>，参数<span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4.返回值</strong></p><p>函数可以有返回值，也可以没有返回值，根据业务逻辑</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> name<span class="token operator">+</span><span class="token string">",请问图书馆怎么走？"</span>   <span class="token comment">// return 返回值</span><span class="token punctuation">}</span><span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token string">"学姐"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意事项：</p><p>1.return 可以终止函数的执行，return后面可以不跟 数据</p><p>2.如果函数没有return 默认返回就是undefined</p><p>5.<em><strong>作用域</strong></em></p><p>概念：代码（变量）起作用效果的区间范围(负责收集并维护由所有声明的标识符（变量）组成的一系列查询，并实施一套非常严格的规则，确定当前执行的代码对这些标识符的访问权限)用域是根据名称查找变量的一套规则。实际情况中，通常需要同时顾及几个作用域。<br>当一个块或函数嵌套在另一个块或函数中时，就发生了作用域的嵌套。因此，在当前作用域中无法找到某个变量时，引擎就会在外层嵌套的作用域中继续查找，直到找到该变量，或抵达最外层的作用域（也就是全局作用域）为止</p><p>分类：全局作用域   局部作用域</p><p>重点：es6之前只有函数的{}才有限定作用域</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> c<span class="token punctuation">;</span>       <span class="token keyword">var</span> <span class="token function-variable function">changStuff</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           a <span class="token operator">=</span> a <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span>           b<span class="token punctuation">.</span>item <span class="token operator">=</span> <span class="token string">"changed"</span><span class="token punctuation">;</span>           c <span class="token operator">=</span> <span class="token punctuation">{</span>               item<span class="token operator">:</span> <span class="token string">"changed"</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>       <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>       <span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>           item<span class="token operator">:</span> <span class="token string">"unchanged"</span>       <span class="token punctuation">}</span><span class="token punctuation">;</span>       <span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>           item<span class="token operator">:</span> <span class="token string">"unchanged"</span>       <span class="token punctuation">}</span><span class="token punctuation">;</span>       <span class="token function">changStuff</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>思考上面其中返回值。</p><p><strong>6.执行上下文与作用域链条</strong></p><p>执行上下文（以下简称“上下文”）的概念在 JavaScript 中是颇为重要的。变量或函数的上下文决定了它们可以访问哪些数据，以及它们的行为。每个上下文都有一个关联的变量对象（variable object），而这个上下文中定义的所有变量和函数都存在于这个对象上。虽然无法通过代码访问变量对象，但后台处理数据会用到它。<br>全局上下文是最外层的上下文</p><p>​    上下文在其所有代码都执行完毕后会被销毁，包括定义在它上面的所有变量和函数（全局上下文在应用程序退出前才会被销毁，比如关闭网页或退出浏览器）。<br>每个函数调用都有自己的上下文。当代码执行流进入函数时，函数的上下文被推到一个上下文栈上。在函数执行完之后，上下文栈会弹出该函数上下文，将控制权返还给之前的执行上下文。ECMAScript程序的执行流就是通过这个上下文栈进行控制的。<br>​    上下文中的代码在执行的时候，会创建变量对象的一个作用域链（scope chain）。这个作用域链决定了各级上下文中的代码在访问变量和函数时的顺序。代码正在执行的上下文的变量对象始终位于作用域链的最前端。</p><p>​    如果上下文是函数，则其活动对象（activation object）用作变量对象。活动对象最初只有一个定义变量：arguments。（全局上下文中没有这个变量。）作用域链中的下一个变量对象来自包含上下文，再下一个对象来自再下一个包含上下文。以此类推直至全局上下文；全局上下文的变量对象始终是作用域链的最后一个变量对象。<br>代码执行时的标识符解析是通过沿作用域链逐级搜索标识符名称完成的。搜索过程始终从作用域链的最前端开始，然后逐级往后，直到找到标识符。（如果没有找到标识符，那么通常会报错。） </p><h1 id="JavaScript对象"><a href="#JavaScript对象" class="headerlink" title="JavaScript对象"></a>JavaScript对象</h1><p>JS对象是一组无序的相关属性和方法的集合</p><p>创建对象的方式</p><ul><li>使用 Object构造函数</li><li>对象字面量</li><li>工厂模式</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> job</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            o<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>            o<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>            o<span class="token punctuation">.</span>job <span class="token operator">=</span> job<span class="token punctuation">;</span>            o<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> o<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> person1 <span class="token operator">=</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">"叶灿"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"长方体移动工程师"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> person2 <span class="token operator">=</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">"洒洒"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"混世大魔王"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">createPerson</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">createPerson</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//工厂模式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\xt_xi\my_blog\my_blog\blog\pic\Snipaste_2021-10-19_22-59-57.png"></p><p>这里，函数 createPerson()接收 3 个参数，根据这几个参数构建了一个包含 Person信息的对象。</p><p>可以用不同的参数多次调用这个函数，每次都会返回包含 3 个属性和 1 个方法的对象。这种工厂模式虽<br>然可以解决创建多个类似对象的问题，但没有解决对象标识问题（即新创建的对象是什么类型）。 </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Myfunction</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> age<span class="token punctuation">,</span> skill</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// Myfunction 构造函数泛指某一大类封装的是对象</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>skill <span class="token operator">=</span> skill<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sing</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">good</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'爱好'</span> <span class="token operator">+</span> good<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> sings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Myfunction</span><span class="token punctuation">(</span><span class="token string">'叶灿'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span><span class="token string">'20'</span><span class="token punctuation">,</span> <span class="token string">'火山C'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sings<span class="token punctuation">)</span><span class="token punctuation">;</span>        sings<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token string">"KTV里摸摸唱唱绅士"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使用 Object构造函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\xt_xi\my_blog\my_blog\blog\pic\Snipaste_2021-10-19_23-07-06.png" alt="Snipaste_2021-10-19_23-07-06"></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span>username <span class="token operator">=</span> <span class="token string">'叶灿'</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span>gender <span class="token operator">=</span> <span class="token string">'男'</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span>skill <span class="token operator">=</span> <span class="token string">'搬钢筋'</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'土木工程给爷速度爪巴啊！！！！！！！ '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>gender<span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使用 Object构造函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>没有显式地创建对象。</li><li>属性和方法直接赋值给了 this。</li><li>没有 return。<br>另外，要注意函数名 Person的首字母大写了。按照惯例，构造函数名称的首字母都是要大写的，</li></ul><p>对象字面量**</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> wtf <span class="token operator">=</span> <span class="token punctuation">{</span>            username<span class="token operator">:</span> <span class="token string">'洒洒'</span><span class="token punctuation">,</span>            age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>            gender<span class="token operator">:</span> <span class="token string">'男'</span><span class="token punctuation">,</span>            <span class="token function-variable function">sayLove</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Do you love me?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>wtf<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>wtf<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//关联数组的语法</span>        <span class="token comment">// 调用对象的方法sayHi 对象名.方法名()</span>        wtf<span class="token punctuation">.</span><span class="token function">sayLove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//对象字面量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数deemo</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">return</span> a<span class="token punctuation">;</span>           <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>               <span class="token keyword">return</span> b           <span class="token punctuation">}</span>           <span class="token keyword">return</span> a <span class="token operator">&gt;</span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//利用函数求两个数的最大值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment">//a大于b</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">return</span> a              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                  <span class="token keyword">return</span> c              <span class="token punctuation">}</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              <span class="token comment">//b大于a</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&gt;</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">return</span> b              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                  <span class="token keyword">return</span> c              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> a <span class="token operator">&gt;</span> b <span class="token operator">?</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> c <span class="token operator">?</span> a <span class="token operator">:</span> c<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>b <span class="token operator">&gt;</span> c <span class="token operator">?</span> b <span class="token operator">:</span> c<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">do</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入用户名:'</span><span class="token punctuation">)</span>            <span class="token keyword">var</span> key <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入密码:'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>name <span class="token operator">!=</span> <span class="token string">'user'</span> <span class="token operator">||</span> key <span class="token operator">!=</span> <span class="token string">'123456'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'登录成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//do while实现验证框登录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入用户名:'</span><span class="token punctuation">)</span>            <span class="token keyword">var</span> key <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入密码:'</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">!=</span> <span class="token string">'user'</span> <span class="token operator">||</span> key <span class="token operator">!=</span> <span class="token string">'123456'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'用户名不存在或者密码错误'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'登录成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// while实现验证框登录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//过滤掉0</span>       <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">323</span><span class="token punctuation">,</span> <span class="token number">323</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>       <span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               newArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 计算0 - 100 整数和, 个位数为3跳过</span>        <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">!==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                str <span class="token operator">+=</span> i            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span>      <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              i<span class="token operator">++</span>              <span class="token keyword">continue</span>          <span class="token punctuation">}</span>          sum <span class="token operator">+=</span> i          i<span class="token operator">++</span>      <span class="token punctuation">}</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>求数组最大值</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">232</span><span class="token punctuation">,</span> <span class="token number">3232</span><span class="token punctuation">,</span> <span class="token number">4554</span><span class="token punctuation">,</span> <span class="token number">5454</span><span class="token punctuation">,</span> <span class="token number">12313</span><span class="token punctuation">]</span>       <span class="token keyword">var</span> max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>               max <span class="token operator">=</span> arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>求数组最小值</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">322</span><span class="token punctuation">,</span> <span class="token number">232</span><span class="token punctuation">,</span> <span class="token number">2313</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">323</span><span class="token punctuation">,</span> <span class="token number">232</span><span class="token punctuation">,</span> <span class="token number">324</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">43434</span><span class="token punctuation">]</span>       <span class="token keyword">var</span> min <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min<span class="token punctuation">)</span> <span class="token punctuation">{</span>               min <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数组内分割字符串</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'pink'</span><span class="token punctuation">,</span> <span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'cyan'</span><span class="token punctuation">]</span>      <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">''</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          str <span class="token operator">+=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'|'</span>      <span class="token punctuation">}</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><h3 id="math"><a href="#math" class="headerlink" title="math"></a>math</h3><h5 id="Math-数学"><a href="#Math-数学" class="headerlink" title="Math  数学"></a>Math  数学</h5><p>属性：Math.PI  </p><p>方法：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//1.最大值</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span>  <span class="token comment">//9</span><span class="token comment">//Math.max() 不能求数组的最大值</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment">//NaN</span><span class="token comment">//求数组的最大值解决方案，后期学</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment">//76</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">//76</span><span class="token comment">//2.求绝对值</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">//1</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token comment">//1</span><span class="token comment">//3.向下取整</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">1.3</span><span class="token punctuation">)</span> <span class="token comment">//1</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">1.9</span><span class="token punctuation">)</span> <span class="token comment">//1</span><span class="token comment">//4.向上取整</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">1.2</span><span class="token punctuation">)</span>  <span class="token comment">//2</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">1.9</span><span class="token punctuation">)</span>  <span class="token comment">//2</span><span class="token comment">//5.四舍五入</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">)</span>  <span class="token comment">//1</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">1.8</span><span class="token punctuation">)</span>  <span class="token comment">//2</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.1</span><span class="token punctuation">)</span> <span class="token comment">//1</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.5</span><span class="token punctuation">)</span> <span class="token comment">//1   负数时,  .5往大了取整</span><span class="token comment">//6.取随机数  [0,1)   从0到1,包括0，不包括1</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//获取两个数之间的整数，包括两个整数的算法</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> min<span class="token punctuation">;</span> <span class="token comment">//含最大值，含最小值 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Date-日期"><a href="#Date-日期" class="headerlink" title="Date 日期"></a>Date 日期</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//获取当天时间对象</span><span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">'2021-4-17'</span><span class="token punctuation">)</span>   <span class="token comment">//取参数时间对象</span><span class="token comment">//date不好用</span>date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//年</span>date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span>   <span class="token comment">//月份    注意date.getMonth()要加1才能得到正确的月份</span>date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">//日期</span>date<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment">//星期几   注意date.getDay()得到的值是[0-6]  星期日是0</span>date<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment">//时</span>date<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">//分</span>date<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">//秒</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>时间戳：</strong></p><p>解释：从1970年1月1日 到 一个时间点 经过了多少毫秒</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//方式1：valueOf  getTime</span><span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//从1970年1月1日 到 现在 经过了多少毫秒</span>cosole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//方式2： +new Date</span><span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">'2000-01-01'</span><span class="token punctuation">)</span> <span class="token comment">//从1970年1月1日 到 '2000-01-01' 经过了多少毫秒</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token comment">//方式3： Date.now()   //从1970年1月1日 到 现在 经过了多少毫秒</span><span class="token keyword">var</span> date <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token comment">//案例:计算从你出生到现在活了多少天?</span><span class="token keyword">var</span> nowTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> birthTime <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">'2001-3-20'</span><span class="token punctuation">)</span><span class="token keyword">var</span> time <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">(</span>nowTime<span class="token operator">-</span>birthTime<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1000</span><span class="token operator">/</span><span class="token number">60</span><span class="token operator">/</span><span class="token number">60</span><span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//案例：倒计时效果</span><span class="token keyword">function</span> <span class="token function">countDown</span><span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> nowTime <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回的是当前时间总的毫秒数</span>    <span class="token keyword">var</span> inputTime <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回的是用户输入未来时间的总毫秒数</span>    <span class="token keyword">var</span> times <span class="token operator">=</span> <span class="token punctuation">(</span>inputTime <span class="token operator">-</span> nowTime<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">;</span> <span class="token comment">// times是剩余时间总的秒数 </span>    <span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>times <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 天</span>    <span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>times <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">%</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//时</span>    <span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>times <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">%</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 分</span>    <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>times <span class="token operator">%</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 当前的秒</span>      <span class="token keyword">return</span> d <span class="token operator">+</span> <span class="token string">'天'</span> <span class="token operator">+</span> h <span class="token operator">+</span> <span class="token string">'时'</span> <span class="token operator">+</span> m <span class="token operator">+</span> <span class="token string">'分'</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">'秒'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Array数组"><a href="#Array数组" class="headerlink" title="Array数组"></a>Array数组</h5><p><strong>1.数组类型检测</strong> </p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//object</span><span class="token comment">//arr 是否是 Array的实例</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.数组元素的添加与删除</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//push  在数组的后面添加元素</span><span class="token number">1.</span>修改了原数组<span class="token number">2.</span>参数：追加的元素<span class="token number">2.</span>返回值：是追加后数组的长度<span class="token keyword">var</span> arr<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token comment">//返回值是5   原数组变成了[1,2,3,4,5]</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">//返回值是4   原数组变成了[1,2,3,[4,5]]</span><span class="token comment">//unshift  在数组的前面追加元素</span><span class="token number">1.</span>修改了原数组<span class="token number">2.</span>参数：追加的元素<span class="token number">2.</span>返回值：是追加后数组的长度<span class="token keyword">var</span> arr<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>   <span class="token comment">//返回值是5   原数组变成了[4,5,1,2,3]</span><span class="token comment">//pop  删除数组的最后一个元素</span><span class="token number">1.</span>修改了原数组<span class="token number">2.</span>参数：无<span class="token number">2.</span>返回值：删除的那个元素<span class="token keyword">var</span> arr<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">//返回值是3   原数组变成了[1,2]</span><span class="token comment">//shift 删除数组的第一个元素</span><span class="token number">1.</span>修改了原数组<span class="token number">2.</span>参数：无<span class="token number">2.</span>返回值：删除的那个元素<span class="token keyword">var</span> arr<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">//返回值是1   原数组变成了[2,3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3.数组的反转</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//数组.reverse()  反转数组</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>   <span class="token comment">//[4,3,2,1]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4.数组的排序</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//数组.sort()     数组排序</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">-</span> b    <span class="token comment">//数组升序</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>   <span class="token comment">//[2,4,8,9,12]</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">-</span>b    <span class="token comment">//数组降序</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>   <span class="token comment">//[12，9，8，4，2]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>5.数组的索引</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//根据元素找下标   indexOf()    lastIndexOf()  </span><span class="token comment">//indexOf()   从数组的左边向右边找，找到一个就马上返回下标   没有找到返回-1</span><span class="token comment">//lastIndexOf()   从数组的右边向左边找，找到一个就马上返回下标   没有找到返回-1</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment">//2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment">//-1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//5</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment">//-1</span><span class="token comment">//案例 数组去重</span><span class="token comment">//方案1</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">]</span><span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>newArr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token comment">//方案2   暂时了解   可以关注数组的includes方法</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">]</span><span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>newArr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token comment">//方案3  暂时了解   可以关注数组的reduce方法</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">]</span><span class="token keyword">var</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span>value<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>acc<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        acc<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> acc<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>6.数组转换为字符串</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//数组.join()</span><span class="token keyword">var</span> arr <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">var</span> str <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>   <span class="token comment">//1,2,3</span><span class="token keyword">var</span> str <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>   <span class="token comment">//1&amp;2&amp;3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>7.数组合并</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//数组.concat()</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//没有修改原数组</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[1,2,3,4,5,6]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>8.数组的截取</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//数组.slice(start,end)   </span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span><span class="token string">'blue'</span><span class="token punctuation">,</span><span class="token string">'yellow'</span><span class="token punctuation">,</span><span class="token string">'pink'</span><span class="token punctuation">,</span><span class="token string">'purple'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//['blue','yellow']</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//没有修改原数组</span><span class="token comment">//数组.splice(start,count)</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span><span class="token string">'blue'</span><span class="token punctuation">,</span><span class="token string">'yellow'</span><span class="token punctuation">,</span><span class="token string">'pink'</span><span class="token punctuation">,</span><span class="token string">'purple'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//['blue','yellow','pink']</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//原数组修改了，截取后剩下的元素</span><span class="token comment">//面试题</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"小泷"</span><span class="token punctuation">,</span><span class="token string">'刘虎'</span><span class="token punctuation">,</span><span class="token string">"小苍"</span><span class="token punctuation">,</span><span class="token string">"小泽"</span><span class="token punctuation">,</span><span class="token string">"xiaosa"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//=&gt; [["小泷",'刘虎',"小苍"],["小泽","xiaosa"]]</span><span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">break</span>    <span class="token punctuation">}</span>    newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="String字符串"><a href="#String字符串" class="headerlink" title="String字符串"></a>String字符串</h5><p><strong>1.根据字符找索引</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//str.indexOf()  从左向右根据字符找索引，如果没有找到就返回-1</span><span class="token comment">//str.lastIndexOf()  从右向左根据字符找索引，如果没有找到就返回-1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>2.根据索引找字符</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//str.charAt(索引)</span><span class="token comment">//求字符串'abcaba'出现次数最多的字符及次数</span><span class="token comment">// 'abcaba' =&gt; (a 3)</span><span class="token comment">// 第一步：'abcaba' =&gt; {a:3,b:2,c:1}</span><span class="token comment">// 第二步：{a:3,b:2,c:1} =&gt; a 3</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"abcaba"</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        obj<span class="token punctuation">[</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">++</span>     <span class="token comment">//obj.a++   num++</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        obj<span class="token punctuation">[</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>   <span class="token comment">//{a:1,b:1,c:1}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// console.log(obj);</span><span class="token keyword">var</span> char <span class="token operator">=</span> <span class="token keyword">null</span><span class="token keyword">var</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">//{a:3,b:2,c:1}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&gt;</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>        max <span class="token operator">=</span> obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span>        char <span class="token operator">=</span> k<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">出现次数最多的字符是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>char<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,次数是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>max<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3.截取</strong></p><p>  替换指定的字符，如：g替换为22,ss替换为b等操作方法</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arry <span class="token operator">=</span> <span class="token string">"dsdsdsdsdsadfdsf"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arry<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//不包含end所在位置</span>       <span class="token comment">// 利用indexOf查找</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>arry<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//当找到该元素是执行花括弧内语句</span>           <span class="token keyword">var</span> arry <span class="token operator">=</span> arry<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arry<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">substr</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>length<span class="token punctuation">)</span> <span class="token comment">// 从start开始，截取length个字符串；</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.替换 </p><p>利用正则表达式替换</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arry <span class="token operator">=</span> <span class="token string">"dsdsdsdsdsadfdsf"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arry<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">dsd</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'dnf'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//dnfsdnfsdsadfdsf</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'我喜欢吃柠檬233239090opkjiooj'</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">"丫"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//我喜欢吃柠檬233239090丫pkji丫丫j</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h2><ol><li>理解原型<br>无论何时，只要创建一个函数，就会按照特定的规则为这个函数创建一个 prototype 属性（指向原型对象）。默认情况下，所有原型对象自动获得一个名为 constructor 的属性，指回与之关联的构造函数。</li></ol><p>在自定义构造函数时，原型对象默认只会获得 constructor 属性，其他的所有方法都继承自Object。每次调用构造函数创建一个新实例，这个实例的内部[[Prototype]]指针就会被赋值为构造函数的原型对象</p><ul><li><p>正常的原型链都会终止于 Object 的原型对象</p></li><li><p>Object 原型的原型是 null</p></li></ul><p>通过hasOwnProperty()方法用于确定某个属性是在实例上还是在原型对象上。这个方法是继承自 Object的，会在属性存在于调用它的对象实例上时返回 true，如下面的例子所示： </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Nicholas"</span><span class="token punctuation">;</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">29</span><span class="token punctuation">;</span> <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>job <span class="token operator">=</span> <span class="token string">"Software Engineer"</span><span class="token punctuation">;</span> <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">let</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">let</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false </span>person1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Greg"</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "Greg"，来自实例 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "Nicholas"，来自原型 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false </span><span class="token keyword">delete</span> person1<span class="token punctuation">.</span>name<span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "Nicholas"，来自原型 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false </span><span class="token comment">//在这个例子中，通过调用 hasOwnProperty()能够清楚地看到访问的是实例属性还是原型属性。</span><span class="token comment">//调用 person1.hasOwnProperty("name")只在重写 person1上 name 属性的情况下才返回 true，表</span>明此时 name 是一个实例属性，不是原型属性<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h1><h3 id="arguments属性"><a href="#arguments属性" class="headerlink" title="arguments属性"></a>arguments属性</h3><p>arguments（是个类数组对象，而不是一个数组）</p><ul><li>callee</li><li>length</li><li>Symbol</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//我们可以看到arguments还有属性callee，length和迭代器Symbol</span><span class="token punctuation">}</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token string">'tom'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">'lee'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span><span class="token punctuation">}</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token string">'cat'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">'home'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="arguments使用"><a href="#arguments使用" class="headerlink" title="arguments使用"></a>arguments使用</h3><p>函数在调用的时候，浏览器每次都会传递两个隐式参数：</p><ul><li><p>函数的上下文对象this</p></li><li><p>封装实参的对象arguments</p><p>1.在任意函数内部都有一个看不见的arguments，除了箭头函数外</p><p>2.arguments是一个长的像数组的伪数组，可以对它进行遍历</p><p>3.函数调用的实参变成了arguments的元素</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//6</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//10</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//14</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//js是一种弱类型的语言，没有重载机制，当我们重写函数时，会将原来的函数直接覆盖，这里我们能利用arguments，来判断传入的实参类型与数量进行不同的操作，然后返回不同的数值。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS函数是什么 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript里对象及数组的概念</title>
      <link href="/2019/04/141.html"/>
      <url>/2019/04/141.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="JavaScript-对象"><a href="#JavaScript-对象" class="headerlink" title="JavaScript 对象"></a>JavaScript 对象</h1><p>在 JavaScript中，几乎所有的事物都是对象。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> car <span class="token operator">=</span> <span class="token string">"Fiat"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="对象属性"><a href="#对象属性" class="headerlink" title="对象属性"></a>对象属性</h2><h3 id="“JavaScript-对象是变量的容器”"><a href="#“JavaScript-对象是变量的容器”" class="headerlink" title="“JavaScript 对象是变量的容器”"></a>“JavaScript 对象是变量的容器”</h3><p>通常认为 “JavaScript 对象是键值对的容器”。<br>键值对通常写法为 name : value (键与值以冒号分割)。<br>键值对在 JavaScript 对象通常称为 对象属性。</p><h2 id="访问对象属性"><a href="#访问对象属性" class="headerlink" title="访问对象属性"></a>访问对象属性</h2><p>通过两种方式访问对象属性:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">person<span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>person<span class="token punctuation">[</span><span class="token string">"lastName"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h2><p>对象的方法定义了一个函数，并作为对象的属性存储。<br>对象方法通过添加 () 调用 (作为一个函数)。<br>该实例访问了 person 对象的 fullName() 方法:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">name <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你要访问 person 对象的 fullName 属性，它将作为一个定义函数的字符串返回：实例</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">name <span class="token operator">=</span> person<span class="token punctuation">.</span>fullName<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="访问对象方法"><a href="#访问对象方法" class="headerlink" title="访问对象方法"></a>访问对象方法</h2><p>你可以使用以下语法 <strong>创建对象</strong> 方法：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function-variable function">methodName</span> <span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 代码}</span>objectName<span class="token punctuation">.</span><span class="token function">methodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="JavaScript数组"><a href="#JavaScript数组" class="headerlink" title="JavaScript数组"></a>JavaScript数组</h1><p><strong>JS中的<code>Array</code>可以包含任意数据类型</strong>，并通过索引来访问每个元素。</p><p>要取得<code>Array</code>的长度，直接访问<code>length</code>属性：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">,</span> <span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>直接给<code>Array</code>的<code>length</code>赋一个新的值会导致<code>Array</code>大小的变化：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// 3</span>arr<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>arr<span class="token punctuation">;</span> <span class="token comment">// arr变为[1, 2, 3, undefined, undefined, undefined]</span>arr<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>arr<span class="token punctuation">;</span> <span class="token comment">// arr变为[1, 2]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Array</code>可以通过索引把对应的元素修改为新的值，因此，对<code>Array</code>的索引进行赋值会直接修改这个<code>Array</code>：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>arr<span class="token punctuation">;</span> <span class="token comment">// arr现在变为['A', 99, 'C']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当new array 有2个以上的参数，表示的是数组的元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>计算数组所有元素和与平均值</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">var</span> ave <span class="token operator">=</span><span class="token number">0</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>sum <span class="token operator">+=</span> arr <span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">}</span>ave <span class="token operator">=</span> sum <span class="token operator">/</span>arr<span class="token punctuation">.</span>lengthconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">.</span>ave<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请注意*，如果通过索引赋值时，索引超过了范围，同样会引起<code>Array</code>大小的变化：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'x'</span><span class="token punctuation">;</span>arr<span class="token punctuation">;</span> <span class="token comment">// arr变为[1, 2, 3, undefined, undefined, 'x']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h3><p>与String类似，<code>Array</code>也可以通过<code>indexOf()</code>来搜索一个指定的元素的位置：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'30'</span><span class="token punctuation">,</span> <span class="token string">'xyz'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 元素10的索引为0</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 元素20的索引为1</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 元素30没有找到，返回-1</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'30'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 元素'30'的索引为2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意了，数字<code>30</code>和字符串<code>'30'</code>是不同的元素。</p><h3 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h3><p><code>slice()</code>就是对应String的<code>substring()</code>版本，它截取<code>Array</code>的部分元素，然后返回一个新的<code>Array</code>：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token string">'G'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从索引0开始，到索引3结束，但不包括索引3: ['A', 'B', 'C']</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从索引3开始到结束: ['D', 'E', 'F', 'G']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意到<code>slice()</code>的起止参数包括开始索引，不包括结束索引。</p><p>如果不给<code>slice()</code>传递任何参数，它就会从头到尾截取所有元素。利用这一点，我们可以很容易地复制一个<code>Array</code>：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token string">'G'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> aCopy <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>aCopy<span class="token punctuation">;</span> <span class="token comment">// ['A', 'B', 'C', 'D', 'E', 'F', 'G']</span>aCopy <span class="token operator">===</span> arr<span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="push和pop"><a href="#push和pop" class="headerlink" title="push和pop"></a>push和pop</h3><p><code>push()</code>向<code>Array</code>的末尾添加若干元素，<code>pop()</code>则把<code>Array</code>的最后一个元素删除掉：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回Array新的长度: 4</span>arr<span class="token punctuation">;</span> <span class="token comment">// [1, 2, 'A', 'B']</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// pop()返回'B'</span>arr<span class="token punctuation">;</span> <span class="token comment">// [1, 2, 'A']</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 连续pop 3次</span>arr<span class="token punctuation">;</span> <span class="token comment">// []</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 空数组继续pop不会报错，而是返回undefined</span>arr<span class="token punctuation">;</span> <span class="token comment">// []</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="unshift和shift"><a href="#unshift和shift" class="headerlink" title="unshift和shift"></a>unshift和shift</h3><p>如果要往<code>Array</code>的头部添加若干元素，使用<code>unshift()</code>方法，<code>shift()</code>方法则把<code>Array</code>的第一个元素删掉：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回Array新的长度: 4</span>arr<span class="token punctuation">;</span> <span class="token comment">// ['A', 'B', 1, 2]</span>arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'A'</span>arr<span class="token punctuation">;</span> <span class="token comment">// ['B', 1, 2]</span>arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 连续shift 3次</span>arr<span class="token punctuation">;</span> <span class="token comment">// []</span>arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 空数组继续shift不会报错，而是返回undefined</span>arr<span class="token punctuation">;</span> <span class="token comment">// []</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><p><code>sort()</code>可以对当前<code>Array</code>进行排序，它会直接修改当前<code>Array</code>的元素位置，直接调用时，按照默认顺序排序：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">;</span> <span class="token comment">// ['A', 'B', 'C']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>能否按照我们自己指定的顺序排序呢？完全可以，我们将在后面的函数中讲到。</p><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h3><p><code>reverse()</code>把整个<code>Array</code>的元素给调个个，也就是反转：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> arr<span class="token punctuation">;</span> <span class="token comment">// ['three', 'two', 'one']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h3><p><code>splice()</code>方法是修改<code>Array</code>的“万能方法”，它可以从指定的索引开始删除若干元素，然后再从该位置添加若干元素：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Microsoft'</span><span class="token punctuation">,</span> <span class="token string">'Apple'</span><span class="token punctuation">,</span> <span class="token string">'Yahoo'</span><span class="token punctuation">,</span> <span class="token string">'AOL'</span><span class="token punctuation">,</span> <span class="token string">'Excite'</span><span class="token punctuation">,</span> <span class="token string">'Oracle'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 从索引2开始删除3个元素,然后再添加两个元素:</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Facebook'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回删除的元素 ['Yahoo', 'AOL', 'Excite']</span>arr<span class="token punctuation">;</span> <span class="token comment">// ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']</span><span class="token comment">// 只删除,不添加:</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['Google', 'Facebook']</span>arr<span class="token punctuation">;</span> <span class="token comment">// ['Microsoft', 'Apple', 'Oracle']</span><span class="token comment">// 只添加,不删除:</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Facebook'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回[],因为没有删除任何元素</span>arr<span class="token punctuation">;</span> <span class="token comment">// ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h3><p><code>concat()</code>方法把当前的<code>Array</code>和另一个<code>Array</code>连接起来，并返回一个新的<code>Array</code>：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> added <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>added<span class="token punctuation">;</span> <span class="token comment">// ['A', 'B', 'C', 1, 2, 3]</span>arr<span class="token punctuation">;</span> <span class="token comment">// ['A', 'B', 'C']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><em>请注意</em>，<code>concat()</code>方法并没有修改当前<code>Array</code>，而是返回了一个新的<code>Array</code>。</p><p>实际上，<code>concat()</code>方法可以接收任意个元素和<code>Array</code>，并且自动把<code>Array</code>拆开，然后全部添加到新的<code>Array</code>里：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['A', 'B', 'C', 1, 2, 3, 4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><p><code>join()</code>方法是一个非常实用的方法，它把当前<code>Array</code>的每个元素都用指定的字符串连接起来，然后返回连接后的字符串：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'A-B-C-1-2-3'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果<code>Array</code>的元素不是字符串，将自动转换为字符串后再连接。</p><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><p>如果数组的某个元素又是一个<code>Array</code>，则可以形成多维数组，例如：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上述<code>Array</code>包含3个元素，其中头两个元素本身也是<code>Array</code>。</p><h1 id="JavaScript条件语句"><a href="#JavaScript条件语句" class="headerlink" title="JavaScript条件语句"></a>JavaScript条件语句</h1><p>条件语句用于基于不同的条件来执行不同的动作。</p><hr><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><p>通常在写代码时，您总是需要为不同的决定来执行不同的动作。您可以在代码中使用条件语句来完成该任务。</p><p>在 JavaScript 中，我们可使用以下条件语句：</p><ul><li><p><strong>if 语句</strong> - (单分支语句）只有当指定条件为 true 时，使用该语句来执行代码</p><p>​            为false则不执行花括号里的语句跳出</p></li><li><p><strong>if…else 语句</strong> - 当条件为 true 时执行代码，当条件为 false 时执行其他代码</p></li><li><p><strong>if…else if….else 语句</strong>- 使用该语句来选择多个代码块之一来执行</p></li><li><p><strong>switch 语句</strong> - 使用该语句来选择多个代码块之一来执行</p></li></ul><h3 id="通过分支流程控制if语句"><a href="#通过分支流程控制if语句" class="headerlink" title="通过分支流程控制if语句"></a>通过分支流程控制if语句</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">var</span> age <span class="token operator">=</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入您的年龄'</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&gt;=</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'我想带你去网吧偷耳机'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="通过双分支语句控制流程（if-else"><a href="#通过双分支语句控制流程（if-else" class="headerlink" title="通过双分支语句控制流程（if else)"></a>通过双分支语句控制流程（if else)</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//条件成立 执行if 里面的代码，否则执行else 里面的代码</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//如果条件成立 执行代码</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment">//否则 执行的代码</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="判断闰年案例"><a href="#判断闰年案例" class="headerlink" title="判断闰年案例"></a>判断闰年案例</h2><p>案例分析：判断任意年份是否为闰年，需要满足以下条件中的任意一个：<br>① 该年份能被 4 整除同时不能被 100 整除；<br>② 该年份能被400整除。</p><p>弹出prompt 输入框让用户输入年丰，取过来值保存在变量中</p><p>使用if语句判断，是输入闰年语句否则执行else里面输出的语句</p><p>注意逻辑运算符&amp;&amp;与||的用法，通过取模判断余数为0</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> year <span class="token operator">=</span> <span class="token function">prompt</span> <span class="token punctuation">(</span><span class="token string">'请输入年份:'</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> year <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">!=</span><span class="token number">0</span> <span class="token operator">||</span> year <span class="token operator">%</span> <span class="token number">400</span> <span class="token operator">==</span><span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">alert</span> <span class="token punctuation">(</span><span class="token string">'该年是闰年'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'该年是平年'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多分支语句（if-else-if"><a href="#多分支语句（if-else-if" class="headerlink" title="多分支语句（if else if)"></a>多分支语句（if else if)</h3><p>语法规范</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//语句1;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//语句2;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">(</span>条件表达式<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//语句3;</span><span class="token punctuation">}</span>san'yun<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h2><p>能做一些简单的条件选择。有三元运算符组成的式子称为三元表达式。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">++</span>num <span class="token number">3</span><span class="token operator">+</span><span class="token number">5</span> <span class="token operator">?</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>语法结构</p><p>条件表达式？ 表达式1 :  表达式2</p><p>执行思路：如果条件表达式为true 则返回表达式1 的值</p><p>否则，为false 返回表达式2的值</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">var</span> result <span class="token operator">=</span> num <span class="token operator">&gt;</span><span class="token number">5</span> <span class="token operator">?</span> <span class="token string">'是的'</span> <span class="token operator">:</span> <span class="token string">'不是的'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>案例：利用三元表达式输出最大数值</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> num2 <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> num3 <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> end <span class="token operator">=</span> <span class="token punctuation">(</span>num1 <span class="token operator">&gt;</span> num2 <span class="token operator">?</span> <span class="token punctuation">(</span>num1 <span class="token operator">&gt;</span> num3 <span class="token operator">?</span> num1 <span class="token operator">:</span> num3<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>num2 <span class="token operator">&gt;</span> num3 <span class="token operator">?</span> num2 <span class="token operator">:</span> num3<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">alert</span><span class="token punctuation">(</span>end <span class="token operator">+</span> <span class="token string">'最大'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>案例：数字补0</p><p>输入数字，若小于10，则前面补0,如果大于10，则不用.</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> time <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入0-59任意一个数字：'</span><span class="token punctuation">)</span><span class="token keyword">var</span> result <span class="token operator">=</span> time <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span><span class="token operator">+</span>time <span class="token operator">:</span> time<span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 扩展 padStart(长度.填的数值)</span><span class="token comment">// padEnd(长度,填的数值)</span><span class="token keyword">var</span> result <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Switch执行多分支语句"><a href="#Switch执行多分支语句" class="headerlink" title="Switch执行多分支语句"></a>Switch执行多分支语句</h3><p>lion给表达式的值与case 的选项值相匹配，若都没有匹配上则执行default的语句</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">switch</span> <span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">case</span> value1：业务逻辑<span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> value2：业务逻辑<span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> value3：业务逻辑<span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>dafault<span class="token operator">:</span><span class="token comment">//执行最后的语句；</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong>    </p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> num <span class="token operator">=</span><span class="token number">3</span> <span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'没有次水果'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 表达式经常用作变量</span><span class="token comment">//num值和case的值匹配属于全等=== 才可以</span><span class="token comment">//case 里面如果没有break 则不会推出switch 继续执行下一个case</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Switch 和If else if 语句的区别</p><ul><li>一般情况下，他们两个语句可以相互替换</li><li>switch… case 语句 通常处理case <strong>比较确定值(全等)<strong>的情况,二if…else更灵活，</strong>常用于范围判定</strong>(大于，等于某个范围)</li><li>switch 语句进行条件判断后直接执行到程序的条件语句效果更高。而else 语句有几种条件,就得判断多少次</li><li>当分支比较少时，if…else 语句执行效率比switch语句高</li><li>当分支比较多时，switch语句的执行的效率比较高，而且结构更加清晰</li></ul><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><p>循环的目的：解决重复操作提高效率.</p><p>被重复的语句称之为循环体</p><p>循环体和终止条件组成的语句称之为循环语句</p><h1 id="JavaScript中的循环"><a href="#JavaScript中的循环" class="headerlink" title="JavaScript中的循环"></a>JavaScript中的循环</h1><ul><li>for 循环</li><li>while循环</li><li>do..while循环</li><li>for…in循环</li></ul><h2 id="for-循环语法结构"><a href="#for-循环语法结构" class="headerlink" title="for 循环语法结构"></a>for 循环语法结构</h2><p>重复执行某些代码，通常和技术有关系   </p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span>初始化表达式<span class="token punctuation">;</span>条件表达式<span class="token punctuation">;</span>操作表达式<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//循环体</span><span class="token punctuation">}</span><span class="token comment">//初始化变量即 Var 声明的一个普通变量，通常用作计数器使用，在for里只执行一次 index</span><span class="token comment">//条件表达式 用来决定每一个循环是否继续执行,即终止条件</span><span class="token comment">//操作表达式 每次循环最后执行的代码 经常用于计数器变量的更新递增或者递减</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token number">1</span><span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'速爪巴'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="通过for-循环计算1-100的偶数和奇数的和"><a href="#通过for-循环计算1-100的偶数和奇数的和" class="headerlink" title="通过for 循环计算1-100的偶数和奇数的和"></a>通过for 循环计算1-100的偶数和奇数的和</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> even <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">var</span> odd <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>even <span class="token operator">=</span>even <span class="token operator">+</span> i<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>odd <span class="token operator">=</span> odd <span class="token operator">+</span>i<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"1~100之间偶数和为:"</span><span class="token operator">+</span>even<span class="token operator">+</span><span class="token string">'n'</span><span class="token operator">+</span><span class="token string">"1-100所有奇数和为:"</span><span class="token operator">+</span>odd<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="通过1-100直接所有能被3整除的数字和"><a href="#通过1-100直接所有能被3整除的数字和" class="headerlink" title="通过1-100直接所有能被3整除的数字和"></a>通过1-100直接所有能被3整除的数字和</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span> i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>result <span class="token operator">=</span> result <span class="token operator">+</span>i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">alert</span> <span class="token punctuation">(</span><span class="token string">"1-100直接所有能被3整除的数字和是"</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="通过for循环计算若干人数-amp-若干成绩-求解班级总分和平均成绩"><a href="#通过for循环计算若干人数-amp-若干成绩-求解班级总分和平均成绩" class="headerlink" title="通过for循环计算若干人数&amp;若干成绩.求解班级总分和平均成绩"></a>通过for循环计算若干人数&amp;若干成绩.求解班级总分和平均成绩</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token function">prompt</span> <span class="token punctuation">(</span><span class="token string">'请输入班级总人数'</span><span class="token punctuation">)</span> <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">var</span> ave <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">for</span> <span class="token keyword">var</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">var</span> score <span class="token operator">=</span> <span class="token function">promt</span><span class="token punctuation">(</span><span class="token string">'请输入第'</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">'个学生的成绩'</span><span class="token punctuation">)</span> sum <span class="token operator">=</span> sum <span class="token operator">+</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">}</span>ave <span class="token operator">=</span>sum <span class="token operator">/</span> num<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'班级总成绩'</span><span class="token operator">+</span>sum <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token operator">+</span><span class="token string">'班级平均分'</span><span class="token operator">+</span>ave<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="for循环打印string"><a href="#for循环打印string" class="headerlink" title="for循环打印string"></a>for循环打印string</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>str <span class="token operator">=</span> str <span class="token operator">+</span><span class="token string">'string'</span><span class="token punctuation">}</span><span class="token function">alert</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token function">prompt</span> <span class="token punctuation">(</span><span class="token string">'想要出现多少个星星？'</span><span class="token punctuation">)</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token comment">//此处定义一个空的字符串赋空值是为了给字符串初始化，这个变量是用来准备存放对象的，也方便调错。</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> <span class="token number">1</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>str <span class="token operator">=</span> str <span class="token operator">+</span> <span class="token string">"string"</span><span class="token punctuation">}</span><span class="token function">alert</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="双重for循环运用"><a href="#双重for循环运用" class="headerlink" title="双重for循环运用"></a>双重for循环运用</h3><p>嵌套关系，可以将内层的循环看作外层循环的语句</p><p><strong>外层的循环循环一次，里面的循环执行全部</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是外层循环第'</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">'次'</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cosole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是内层循环的第'</span><span class="token operator">+</span>j<span class="token operator">+</span><span class="token string">'次'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>逐行打印string</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">;</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j<span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">;</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>str <span class="token operator">=</span> str <span class="token operator">+</span><span class="token string">'string'</span><span class="token comment">//执行完成一行就要行换</span><span class="token punctuation">}</span><span class="token comment">//然后执行外层循环因此需在外层加换行符</span>str <span class="token operator">=</span> str <span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印N*N行string</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> row <span class="token operator">=</span> <span class="token function">prompt</span> <span class="token punctuation">(</span><span class="token string">'请您输入行数'</span><span class="token punctuation">)</span><span class="token keyword">var</span> cow <span class="token operator">=</span> <span class="token function">prompt</span> <span class="token punctuation">(</span><span class="token string">'请您输入列数'</span><span class="token punctuation">)</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span>row<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> cow<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>str <span class="token operator">=</span> str <span class="token operator">+</span><span class="token string">"string"</span><span class="token punctuation">}</span>str <span class="token operator">+=</span> <span class="token string">'\n'</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印到string (倒三角案例)j</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> i <span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>str <span class="token operator">=</span> str <span class="token operator">+</span><span class="token string">'string'</span><span class="token punctuation">}</span>str <span class="token operator">+=</span> <span class="token string">'\n'</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正三角</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>str <span class="token operator">=</span> str <span class="token operator">+</span> <span class="token string">'♆'</span><span class="token punctuation">}</span>str <span class="token operator">+=</span> <span class="token string">'\n'</span> <span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>乘法表</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">''</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               str <span class="token operator">+=</span> j <span class="token operator">+</span> <span class="token string">'×'</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> i <span class="token operator">*</span> j <span class="token operator">+</span> <span class="token string">'\t'</span>           <span class="token punctuation">}</span>           str <span class="token operator">+=</span> <span class="token string">'\n'</span>       <span class="token punctuation">}</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印人的一生</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span>       <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">这个人今年</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">岁了</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>           i<span class="token operator">++</span>       <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            i<span class="token operator">++</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">你今年</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">岁了</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">你猝死了</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印我爱你</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> mes <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'你爱我吗？'</span><span class="token punctuation">)</span>       <span class="token keyword">while</span> <span class="token punctuation">(</span>mes <span class="token operator">!==</span> <span class="token string">'我爱你'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           mes <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'你爱我吗!'</span><span class="token punctuation">)</span>       <span class="token punctuation">}</span>       <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'滚!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印100以内奇数偶数和</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> even <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">var</span> odd <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">do</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        even <span class="token operator">+=</span> i    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        odd <span class="token operator">+=</span> i    <span class="token punctuation">}</span>    i<span class="token operator">++</span><span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>even<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>odd<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="While循环"><a href="#While循环" class="headerlink" title="While循环"></a>While循环</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">while</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//循环体</span><span class="token punctuation">}</span><span class="token comment">//当表达式结果为true时一直执行循环体 因此常配合操作表达式使用</span><span class="token comment">//否则退出循环</span><span class="token comment">//也应有计数器初始化变量</span><span class="token comment">//操作表达式完成计时器更新防止死循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>计算1~100之间所有整数的和</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> <span class="token punctuation">(</span> j <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>sum <span class="token operator">+=</span> j<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>复合赋值运算符</p><h1 id="JavaScript-Array（数组）-对象"><a href="#JavaScript-Array（数组）-对象" class="headerlink" title="JavaScript Array（数组） 对象"></a>JavaScript Array（数组） 对象</h1><p>数组对象的作用是：使用单独的变量名来存储一系列的值，他是一个有序的集合。</p><h2 id="创建一个数组"><a href="#创建一个数组" class="headerlink" title="创建一个数组"></a>创建一个数组</h2><p>创建一个数组，有三种方法。</p><p>下面的代码定义了一个名为 myCars的数组对象：</p><p>1: 常规方式:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> myCars<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myCars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Saab"</span><span class="token punctuation">;</span>      myCars<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Volvo"</span><span class="token punctuation">;</span>myCars<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"BMW"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myCars<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2: 简洁方式:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> myCars<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">"Saab"</span><span class="token punctuation">,</span><span class="token string">"Volvo"</span><span class="token punctuation">,</span><span class="token string">"BMW"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myCars<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3: 字面:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> myCars<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"Saab"</span><span class="token punctuation">,</span><span class="token string">"Volvo"</span><span class="token punctuation">,</span><span class="token string">"BMW"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myCars<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><p>案例：取数值最大值：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">]</span><span class="token keyword">var</span> max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>max <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'最大数为:'</span> <span class="token operator">+</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出99</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//求数值最小值</span>        <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">322</span><span class="token punctuation">,</span> <span class="token number">232</span><span class="token punctuation">,</span> <span class="token number">2313</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">323</span><span class="token punctuation">,</span> <span class="token number">232</span><span class="token punctuation">,</span> <span class="token number">324</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">43434</span><span class="token punctuation">]</span>        <span class="token keyword">var</span> min <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min<span class="token punctuation">)</span> <span class="token punctuation">{</span>                min <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="访问数组"><a href="#访问数组" class="headerlink" title="访问数组"></a>访问数组</h2><p>通过指定数组名以及索引号码，你可以访问某个特定的元素。</p><p>以下实例可以访问myCars数组的第一个值：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> name<span class="token operator">=</span>myCars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以下实例修改了数组 myCars 的第一个元素:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">myCars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Opel"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>利用for循环索引数组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token string">'4'</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'sow'</span><span class="token punctuation">,</span> <span class="token string">'cow'</span><span class="token punctuation">,</span> <span class="token string">'string'</span><span class="token punctuation">,</span> <span class="token string">'gold'</span><span class="token punctuation">]</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//输出 前4个元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用Math.max.apply输出最大值</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">555</span><span class="token punctuation">,</span> <span class="token number">777</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>Math<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 777</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 什么是对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript入门</title>
      <link href="/2019/04/1142178.html"/>
      <url>/2019/04/1142178.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="JavaScript是Web-的编程语言"><a href="#JavaScript是Web-的编程语言" class="headerlink" title="JavaScript是Web 的编程语言"></a>JavaScript是Web 的编程语言</h2><p>所有现代的 HTML 页面都使用 JavaScript。</p><p>JavaScript 非常容易学。</p><p>在了解JavaScript 前我想各位都是对HTML及CSS有过一定了解的;</p><h2 id="JavaScript组成"><a href="#JavaScript组成" class="headerlink" title="JavaScript组成"></a>JavaScript组成</h2><ul><li>ECMAScript（规定了JS的基本语法）</li><li>DOM文档对象模型 （主要提供一些操作HTML的文档的工具）</li><li>BOM浏览器对象模型（主要提供一些操作浏览器的工具</li></ul><h2 id="JavaScript代码的执行"><a href="#JavaScript代码的执行" class="headerlink" title="JavaScript代码的执行"></a>JavaScript代码的执行</h2><p>浏览器本身不会瑞执行js代码，js代码是通过js引擎执行代码，js引擎执行代码的时候会逐条解析有计算机进行处理。js语言被称为运行在客户端的弱类型语言。</p><h1 id="JavaScript是脚本语言"><a href="#JavaScript是脚本语言" class="headerlink" title="JavaScript是脚本语言"></a>JavaScript是脚本语言</h1><p>特点</p><ul><li><p>是一种轻量级的基于对象（object-based）的高级编程语言</p></li><li><p>是可插入的HTML页面的编程代码</p></li><li><p>可有所有的现代浏览器只写</p></li><li><p>容易学习</p><h2 id="书写位置"><a href="#书写位置" class="headerlink" title="书写位置"></a>书写位置</h2></li><li><p>行内式</p></li><li><p>内嵌式</p> <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>外联式</p> <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h1 id="JS变量-important"><a href="#JS变量-important" class="headerlink" title="JS变量 !important"></a>JS变量 !important</h1><p>本质：变量是程序在内存中申请的一块存放数据的空间；（存放数据的容器，可以通过变量获取数据，也可以修改数据）</p><h2 id="变量命名规范"><a href="#变量命名规范" class="headerlink" title="变量命名规范"></a>变量命名规范</h2><ol><li>由字母（a-zA-Z）、数字（0-9）、下划线（_）、美元符号($)组成</li><li>严格区大小写。var app与var App;这是两个变量</li><li>不能以为数字开头。18age是错误的</li><li>不能是关键词是关键字、保留字。例如：var、for、while</li></ol><p>建议</p><p>   5.变量名必须有意义</p><p>   6.遵守驼峰命名法，首字母小写，后面单词的首字母需要大写，myFirstName这样</p><h1 id="JavaScript-数据类型"><a href="#JavaScript-数据类型" class="headerlink" title="JavaScript 数据类型"></a>JavaScript 数据类型</h1><h2 id="数据类型的概念"><a href="#数据类型的概念" class="headerlink" title="数据类型的概念"></a>数据类型的概念</h2><p>在编程过程中，数据类型是重要的概念。</p><p>为了能够操作变量，了解数据类型是很重要的。</p><p>如果没有数据类型，计算机就无法安全地解决这道题：</p><p>给 “Volvo” 加上 911 有意义吗？这么做会发生错误还是会产生一个结果？</p><p>JavaScript 会这样处理上面的例子：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token string">"911"</span> <span class="token operator">+</span> <span class="token string">"Porsche"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当数值和字符串相加时，JavaScript 将把数值视作字符串。</p><p>JavaScript 变量能够保存多种<em>数据类型</em>：数值、字符串值、数组、对象等等：</p><p>值类型(基本类型)*</p><ul><li>字符串（String）</li><li>数字(Number)</li><li>布尔(Boolean)</li><li>对空（Null）</li><li>未定义（Undefined）</li><li>Symbol</li></ul><p><em>引用数据类型</em>  (存放在堆堆内存中)</p><ul><li>对象(Object)</li><li>数组(Array)</li><li>函数(Function)</li></ul><h2 id="JavaScript-拥有动态类型"><a href="#JavaScript-拥有动态类型" class="headerlink" title="JavaScript 拥有动态类型"></a>JavaScript 拥有动态类型</h2><p>JavaScript 拥有动态类型。这意味着相同的变量可用作不同的类型，同时声明多个变量也可以只用写一个Var，用英文逗号隔开，变量值将以最后一次赋的值为准：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> x<span class="token punctuation">;</span>               <span class="token comment">// x 为 undefined</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>           <span class="token comment">// 现在 x 为数字</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token string">"John"</span><span class="token punctuation">;</span>      <span class="token comment">// 现在 x 为字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="JS的严格模式"><a href="#JS的严格模式" class="headerlink" title="JS的严格模式"></a>JS的严格模式</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//使用严格模式 加了'use strict' 使用ES6YIS以上的js 如果没有ES5</span>’use strict'username <span class="token operator">=</span> <span class="token string">'张三'</span>cosole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userame<span class="token punctuation">)</span><span class="token comment">//报错 username is not defined</span><span class="token comment">//定义变量时一定记得加Var</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JavaScript：直接写入-HTML-输出流"><a href="#JavaScript：直接写入-HTML-输出流" class="headerlink" title="JavaScript：直接写入 HTML 输出流"></a>JavaScript：直接写入 HTML 输出流</h2><p>实例</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;h1&gt;这是一个标题&lt;/h1&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;p&gt;这是一个段落。&lt;/p&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">您只能在 <span class="token constant">HTML</span> 输出中使用 document<span class="token punctuation">.</span>write。如果您在文档加载后使用该方法，会覆盖整个文档。 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="JavaScript：验证输入"><a href="#JavaScript：验证输入" class="headerlink" title="JavaScript：验证输入"></a>JavaScript：验证输入</h2><p>JavaScript 常用于验证用户的输入。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">if</span> <span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"不是数字"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">定义和用法<span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 函数可确定值是否为非数字（Not<span class="token operator">-</span>a<span class="token operator">-</span>Number）。如果该值等于 <span class="token number">NaN</span>，则此函数返回 <span class="token boolean">true</span>。否则返回 <span class="token boolean">false</span>。此函数不同于 Number 特定的 Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法。全局 <span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 函数将测试值转换为数字，然后对其进行测试。Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 不会将值转换为数字，并且不会为任何非数字类型的值返回 <span class="token boolean">true</span>。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span> <span class="token comment">//false</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.23</span><span class="token punctuation">)</span> <span class="token comment">//false</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">//false</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//false</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span> <span class="token comment">//false</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span> <span class="token comment">//true</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">'2005/12/12'</span><span class="token punctuation">)</span> <span class="token comment">//true</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token comment">//false</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">//false</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">//true</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">'NaN'</span><span class="token punctuation">)</span> <span class="token comment">//true</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">//true</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//true</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Undefined"><a href="#Undefined" class="headerlink" title="Undefined"></a>Undefined</h2><p>在 JavaScript 中，没有值的变量，其值是 undefined。typeof 也返回 undefined。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> person<span class="token punctuation">;</span>                  <span class="token comment">// 值是 undefined，类型是 undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>任何变量均可通过设置值为 undefined 进行清空。其类型也将是 undefined。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">person <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>          <span class="token comment">// 值是 undefined，类型是 undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h2><p>在 JavaScript 中，null 是 “nothing”。它被看做不存在的事物。</p><p>不幸的是，在 JavaScript 中，null 的数据类型是对象。</p><p>您可以把 null 在 JavaScript 中是对象理解为一个 bug。它本应是 null。</p><p>您可以通过设置值为 null 清空对象：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>           <span class="token comment">// 值是 null，但是类型仍然是对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您也可以通过设置值为 undefined 清空对象：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>     <span class="token comment">// 值是 undefined，类型是 undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Undefined-与-Null-的区别"><a href="#Undefined-与-Null-的区别" class="headerlink" title="Undefined 与 Null 的区别"></a>Undefined 与 Null 的区别</h2><p>Undefined 与 null 的值相等，但类型不相等：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">typeof</span> <span class="token keyword">undefined</span>              <span class="token comment">// undefined</span><span class="token keyword">typeof</span> <span class="token keyword">null</span>                   <span class="token comment">// object</span><span class="token keyword">null</span> <span class="token operator">===</span> <span class="token keyword">undefined</span>            <span class="token comment">// false</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">undefined</span>             <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>1、定义</strong></p><ul><li> （1）undefined：是所有没有赋值变量的默认值，自动赋值。</li><li> （2）null：主动释放一个变量引用的对象，表示一个变量不再指向任何对象地址。</li></ul><p><strong>2、何时使用null?</strong></p><p>当使用完一个比较大的对象时，需要对其进行释放内存时，设置为 null。</p><p><strong>3、null 与 undefined 的异同点是什么呢？</strong></p><p><strong>共同点</strong>：都是原始类型，保存在栈中变量本地。</p><p>不同点：</p><p>（1）undefined——表示变量声明过但并未赋过值。</p><p>它是所有未赋值变量默认值，例如：</p><pre class="line-numbers language-j's" data-language="j's"><code class="language-j's">var a;    // a 自动被赋值为 undefined<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（2）null——表示一个变量将来可能指向一个对象。</p><p>一般用于主动释放指向对象的引用，例如：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> emps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ss'</span><span class="token punctuation">,</span><span class="token string">'nn'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>emps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>     <span class="token comment">// 释放指向数组的引用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  (3)==和!= 会对数据类型进行隐式转换,不建议使用,是js语言糟粕,在蝴蝶书中,作者强烈建议永远不要使用这对邪恶的兄弟使用</p><p><img src="/1639578097623.png" alt="1639578097623"></p><p>4、延伸——垃圾回收站</p><p>它是专门释放对象内存的一个程序。</p><ul><li> （1）在底层，后台伴随当前程序同时运行；引擎会定时自动调用垃圾回收期；</li><li> （2）总有一个对象不再被任何变量引用时，才释放。</li></ul><h2 id="原始数据"><a href="#原始数据" class="headerlink" title="原始数据"></a>原始数据</h2><p>原始数据值是一种没有额外属性和方法的单一简单数据值。</p><h2 id="typeof-运算符"><a href="#typeof-运算符" class="headerlink" title="typeof 运算符"></a>typeof 运算符</h2><p>您可使用 JavaScript 的 typeof 来<strong>确定 JavaScript 变量的数据类型</strong>：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">typeof</span> 运算符返回变量或表达式的类型：<span class="token operator">-</span> string<span class="token operator">-</span> number<span class="token operator">-</span> boolean<span class="token operator">-</span> <span class="token keyword">undefined</span><span class="token operator">-</span> Null<span class="token keyword">typeof</span> 运算符可返回以下原始类型之一：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">typeof</span> <span class="token string">"Bill"</span>              <span class="token comment">// 返回 "string"</span><span class="token keyword">typeof</span> <span class="token number">3.14</span>                <span class="token comment">// 返回 "number"</span><span class="token keyword">typeof</span> <span class="token boolean">true</span>                <span class="token comment">// 返回 "boolean"</span><span class="token keyword">typeof</span> <span class="token boolean">false</span>               <span class="token comment">// 返回 "boolean"</span><span class="token keyword">typeof</span> x                   <span class="token comment">// 返回 "undefined" (假如 x 没有值)</span><span class="token keyword">typeof</span> <span class="token string">""</span>                  <span class="token comment">// 返回 "string"</span><span class="token keyword">typeof</span> <span class="token string">"Bill"</span>              <span class="token comment">// 返回 "string"</span><span class="token keyword">typeof</span> <span class="token string">"Bill Gates"</span>          <span class="token comment">// 返回 "string"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="复杂数据"><a href="#复杂数据" class="headerlink" title="复杂数据"></a>复杂数据</h2><p>typeof 运算符可返回以下两种类型之一：</p><ul><li>function</li><li>object</li></ul><p>typeof 运算符把对象、数组或 null 返回 object。</p><p>typeof 运算符不会把函数返回 object。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">typeof</span> <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">'Bill'</span><span class="token punctuation">,</span> age<span class="token operator">:</span><span class="token number">62</span><span class="token punctuation">}</span> <span class="token comment">// 返回 "object"</span><span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>             <span class="token comment">// 返回 "object" (并非 "array"，参见下面的注释)</span><span class="token keyword">typeof</span> <span class="token keyword">null</span>                  <span class="token comment">// 返回 "object"</span><span class="token keyword">typeof</span> <span class="token keyword">function</span> <span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token comment">// 返回 "function"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="JavaScript-输出"><a href="#JavaScript-输出" class="headerlink" title="JavaScript 输出"></a>JavaScript 输出</h1><p>JavaScript 没有任何打印或者输出的函数。</p><h2 id="JavaScript-显示数据"><a href="#JavaScript-显示数据" class="headerlink" title="JavaScript 显示数据"></a>JavaScript 显示数据</h2><p>JavaScript 可以通过不同的方式来输出数据：</p><ul><li><p>使用 <strong>window.alert()</strong> 弹出警告框。</p></li><li><p>使用 <strong>document.write()</strong> 方法将内容写到 HTML 文档中。</p></li><li><p>使用 <strong>innerHTML</strong> 写入到 HTML 元素。</p></li><li><p>使用 <strong>console.log()</strong> 写入到浏览器的控制台。</p></li></ul><h2 id="使用window-alert（）"><a href="#使用window-alert（）" class="headerlink" title="使用window.alert（）"></a>使用window.alert（）</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>我的第一个页面<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span><span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>我的第一个段落。<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="操作-HTML-元素"><a href="#操作-HTML-元素" class="headerlink" title="操作 HTML 元素"></a>操作 HTML 元素</h2><p>当需从 JavaScript 访问某个 HTML 元素，您可以使用 document.getElementById(<em>id</em>) 方法。</p><p>请使用 “id” 属性来标识 HTML 元素，并 innerHTML 来获取或插入元素内容：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>我的第一个 Web 页面<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span><span class="token operator">&lt;</span>p id<span class="token operator">=</span><span class="token string">"demo"</span><span class="token operator">&gt;</span>我的第一个段落<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"段落已修改。"</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>document.getElementById(“demo”)</strong> 是使用 id 属性来查找 HTML 元素的 JavaScript 代码 。</p><p><strong>innerHTML = “段落已修改。”</strong> 是用于修改元素的 HTML 内容(innerHTML)的 JavaScript 代码。</p><h2 id="写到-HTML-文档"><a href="#写到-HTML-文档" class="headerlink" title="写到 HTML 文档"></a>写到 HTML 文档</h2><p>出于测试目的，您可以将JavaScript直接写在HTML 文档中：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>我的第一个 Web 页面<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span><span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>我的第一个段落。<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请使用 document.write() 仅仅向文档输出写内容。</p><p>如果在文档已完成加载后执行 document.write，整个 HTML 页面将被覆盖。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>我的第一个 Web 页面<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span><span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>我的第一个段落。<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span><span class="token operator">&lt;</span>button onclick<span class="token operator">=</span><span class="token string">"myFunction()"</span><span class="token operator">&gt;</span>点我<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="写到控制台"><a href="#写到控制台" class="headerlink" title="写到控制台"></a>写到控制台</h2><p>你可以使用 <strong>console.log()</strong> 方法在浏览器中显示 JavaScript 值。</p><p>在浏览器中使用 F12 来启用调试模式，调试窗口中点击 “Console” 。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>我的第一个 Web 页面<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="JavaScript-字符串"><a href="#JavaScript-字符串" class="headerlink" title="JavaScript 字符串"></a>JavaScript 字符串</h1><p>JavaScript 字符串用于存储和处理文本。</p><h2 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h2><p>可以使用内置属性 <strong>length</strong> 来计算字符串的长度：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> txt <span class="token operator">=</span> <span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span><span class="token punctuation">;</span><span class="token keyword">var</span> sln <span class="token operator">=</span> txt<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h1><table><thead><tr><th align="center">代码</th><th align="center">输出</th></tr></thead><tbody><tr><td align="center">'</td><td align="center">单引号</td></tr><tr><td align="center">"</td><td align="center">双引号</td></tr><tr><td align="center">\</td><td align="center">反斜杠</td></tr><tr><td align="center">\n</td><td align="center">换行</td></tr><tr><td align="center">\r</td><td align="center">回车</td></tr><tr><td align="center">\t</td><td align="center">tab(制表符)</td></tr><tr><td align="center">\b</td><td align="center">退格符</td></tr><tr><td align="center">\f</td><td align="center">换页符</td></tr></tbody></table><h2 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h2><p>更多方法实例可以参见：<a href="https://www.runoob.com/jsref/jsref-obj-string.html">JavaScript String 对象</a>。</p><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">charAt()</td><td align="center">返回指定索引位置的字符</td></tr><tr><td align="center">charCodeAt()</td><td align="center">返回指定索引位置字符的 Unicode 值</td></tr><tr><td align="center">concat()</td><td align="center">连接两个或多个字符串，返回连接后的字符串</td></tr><tr><td align="center">fromCharCode()</td><td align="center">将 Unicode 转换为字符串</td></tr><tr><td align="center">indexOf()</td><td align="center">返回字符串中检索指定字符第一次出现的位置</td></tr><tr><td align="center">lastIndexOf()</td><td align="center">返回字符串中检索指定字符最后一次出现的位置</td></tr><tr><td align="center">localeCompare()</td><td align="center">用本地特定的顺序来比较两个字符串</td></tr><tr><td align="center">match()</td><td align="center">找到一个或多个正则表达式的匹配</td></tr><tr><td align="center">replace()</td><td align="center">替换与正则表达式匹配的子串</td></tr><tr><td align="center">search()</td><td align="center">检索与正则表达式相匹配的值</td></tr><tr><td align="center">slice()</td><td align="center">提取字符串的片断，并在新的字符串中返回被提取的部分</td></tr><tr><td align="center">split()</td><td align="center">把字符串分割为子字符串数组</td></tr><tr><td align="center">substr()</td><td align="center">从起始索引号提取字符串中指定数目的字符</td></tr><tr><td align="center">substring()</td><td align="center">提取字符串中两个指定的索引号之间的字符</td></tr><tr><td align="center">toLocaleLowerCase()</td><td align="center">根据主机的语言环境把字符串转换为小写，只有几种语言（如土耳其语）具有地方特有的大小写映射</td></tr><tr><td align="center">toLocaleUpperCase()</td><td align="center">根据主机的语言环境把字符串转换为大写，只有几种语言（如土耳其语）具有地方特有的大小写映射</td></tr><tr><td align="center">toLowerCase()</td><td align="center">把字符串转换为小写</td></tr><tr><td align="center">toString()</td><td align="center">返回字符串对象值</td></tr><tr><td align="center">toUpperCase()</td><td align="center">把字符串转换为大写</td></tr><tr><td align="center">trim()</td><td align="center">移除字符串首尾空白</td></tr><tr><td align="center">valueOf()</td><td align="center">返回某个字符串对象的原始值</td></tr></tbody></table><h1 id="数值交换"><a href="#数值交换" class="headerlink" title="数值交换"></a>数值交换</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">"X-UA-Compatible"</span> content<span class="token operator">=</span><span class="token string">"IE=edge"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>        <span class="token keyword">var</span> temp        <span class="token keyword">var</span> apple1<span class="token operator">=</span> <span class="token string">'红苹果'</span>        <span class="token keyword">var</span> apple2<span class="token operator">=</span> <span class="token string">'青苹果'</span>        temp <span class="token operator">=</span> apple1        apple1 <span class="token operator">=</span> apple2        apple2 <span class="token operator">=</span> temp        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>apple1<span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">,</span> apple2<span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="JavaScript-语法"><a href="#JavaScript-语法" class="headerlink" title="JavaScript 语法"></a>JavaScript 语法</h1><p><strong>语法规则定义了语言结构</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">isNaN</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>value:必须。要测试的值</p><h2 id="JavaScript-字面量"><a href="#JavaScript-字面量" class="headerlink" title="JavaScript 字面量"></a>JavaScript 字面量</h2><p>一般固定值称为字面量，如 3.14。</p><p><strong>数字（Number）字面量</strong> 可以是整数或者是小数，或者是科学计数(e)：   </p><ul><li>3.14 </li><li>1001</li><li> 123e5 </li></ul><p><strong>字符串（String）字面量</strong> 可以使用单引号或双引号：</p><ul><li>  “John Doe”</li><li>   ‘John Doe’</li></ul><p><strong>表达式字面量</strong> 用于计算：</p><ul><li>  5 + 6</li><li>  5 * 10  </li></ul><p><strong>数组（Array）字面量</strong>:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>对象（Object）字面量</strong> 定义一个对象：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">{</span>firstName<span class="token operator">:</span><span class="token string">"John"</span><span class="token punctuation">,</span> lastName<span class="token operator">:</span><span class="token string">"Doe"</span><span class="token punctuation">,</span> age<span class="token operator">:</span><span class="token number">50</span><span class="token punctuation">,</span> eyeColor<span class="token operator">:</span><span class="token string">"blue"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>函数（Function）字面量</strong> 定义一个函数：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Tips:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">NaN</span> 的数据类型是 number数组的数据类型是 object日期的数据类型是 object<span class="token keyword">null</span> 的数据类型是 object未定义变量的数据类型是 <span class="token keyword">undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="JavaScript-运算符参考手册"><a href="#JavaScript-运算符参考手册" class="headerlink" title="JavaScript 运算符参考手册"></a>JavaScript 运算符参考手册</h1><h2 id="下表解释了算术运算符："><a href="#下表解释了算术运算符：" class="headerlink" title="下表解释了算术运算符："></a>下表解释了算术运算符：</h2><p>算术运算符用于在变量和/或值之间执行算术。</p><table><thead><tr><th align="center"><em>加</em></th><th align="center"><em>+</em></th><th align="center"><em>x = y + 2</em></th><th align="center"><em>y = 5</em></th><th align="center"><em>x = 7</em></th></tr></thead><tbody><tr><td align="center"><em>减</em></td><td align="center"><em>-</em></td><td align="center"><em>x = y - 2</em></td><td align="center"><em>y = 5</em></td><td align="center"><em>x = 3</em></td></tr><tr><td align="center"><em>乘</em></td><td align="center">*</td><td align="center"><em>x = y * 2</em></td><td align="center"><em>y = 5</em></td><td align="center"><em>x = 10</em></td></tr><tr><td align="center"><em>除</em></td><td align="center"><em>/</em></td><td align="center"><em>x = y / 2</em></td><td align="center"><em>y = 5</em></td><td align="center"><em>x = 2.5</em></td></tr><tr><td align="center"><em>模数（除余）</em></td><td align="center"><em>%</em></td><td align="center"><em>x = y % 2</em></td><td align="center"><em>y = 5</em></td><td align="center"><em>x = 1</em></td></tr><tr><td align="center">累加</td><td align="center"><em>++</em></td><td align="center">x = ++y</td><td align="center">y = 6</td><td align="center">x = 6</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">x = y++</td><td align="center">y = 6</td><td align="center">x = 5</td></tr><tr><td align="center">递减</td><td align="center">–</td><td align="center">x = –y</td><td align="center">y = 4</td><td align="center">x = 4</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">x = y–</td><td align="center">y = 4</td><td align="center">x = 5</td></tr></tbody></table><h2 id="JavaScript-赋值运算符"><a href="#JavaScript-赋值运算符" class="headerlink" title="JavaScript 赋值运算符"></a>JavaScript 赋值运算符</h2><p>赋值运算符用于为 JavaScript 变量赋值。</p><table><thead><tr><th align="center">运算符</th><th align="center">例子</th><th align="center">等同于</th><th align="center">x 中的结果</th></tr></thead><tbody><tr><td align="center">=</td><td align="center">x = y</td><td align="center">x = y</td><td align="center">x = 5</td></tr><tr><td align="center">+=</td><td align="center">x += y</td><td align="center">x = x + y</td><td align="center">x = 15</td></tr><tr><td align="center">-=</td><td align="center">x -= y</td><td align="center">x = x - y</td><td align="center">x = 5</td></tr><tr><td align="center">*=</td><td align="center">x *= y</td><td align="center">x = x * y</td><td align="center">x = 50</td></tr><tr><td align="center">/=</td><td align="center">x /= y</td><td align="center">x = x / y</td><td align="center">x = 2</td></tr><tr><td align="center">%=</td><td align="center">x %= y</td><td align="center">x = x % y</td><td align="center">x = 0</td></tr></tbody></table><h2 id="JavaScript-字符串运算符"><a href="#JavaScript-字符串运算符" class="headerlink" title="JavaScript 字符串运算符"></a>JavaScript 字符串运算符</h2><p>赋值运算符用于为 JavaScript 变量赋值。</p><p>给定 <strong>x = 10</strong> 且 <strong>y = 5</strong>，下表解释了赋值运算符：</p><table><thead><tr><th align="center">+</th><th align="center">text3 = text1 + text2</th><th align="center">“Good “</th><th align="center">“Morning”</th><th align="center">“Good Morning”</th></tr></thead><tbody><tr><td align="center">+=</td><td align="center">text1 += text2</td><td align="center">“Good Morning”</td><td align="center">“Morning”</td><td align="center">“”</td></tr></tbody></table><h2 id="JavaScript比较运算符"><a href="#JavaScript比较运算符" class="headerlink" title="JavaScript比较运算符"></a>JavaScript比较运算符</h2><p>在逻辑语句中使用比较运算符来确定变量或值之间的相等性或差异。</p><p>给定 <strong>x = 5</strong>，下表解释了比较运算符：</p><table><thead><tr><th align="center">运算符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">==</td><td align="center">等于</td></tr><tr><td align="center">===</td><td align="center">等值等型</td></tr><tr><td align="center">!=</td><td align="center">不相等</td></tr><tr><td align="center">!==</td><td align="center">不等值或不等型</td></tr><tr><td align="center">&gt;</td><td align="center">大于</td></tr><tr><td align="center">&lt;</td><td align="center">小于</td></tr><tr><td align="center">&gt;=</td><td align="center">大于或等于</td></tr><tr><td align="center">&lt;=</td><td align="center">小于或等于</td></tr><tr><td align="center">?</td><td align="center">三元运算符</td></tr></tbody></table><h2 id="JavaScript逻辑运算符"><a href="#JavaScript逻辑运算符" class="headerlink" title="JavaScript逻辑运算符"></a>JavaScript逻辑运算符</h2><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>逻辑与</td></tr><tr><td>||</td><td>逻辑或</td></tr><tr><td>!</td><td>逻辑非</td></tr></tbody></table><p><strong>！ 一元逻辑运算符 取反符 非a即集合补集</strong></p><p><strong>&amp;&amp; 二元逻辑运算符 符号俩侧一个值为假则假，其余为真</strong></p><p><strong>||二元逻辑运算符同时为真/假则为假</strong> </p><h2 id="逻辑表达式的短路计算"><a href="#逻辑表达式的短路计算" class="headerlink" title="逻辑表达式的短路计算"></a>逻辑表达式的短路计算</h2><table><thead><tr><th align="center">e1</th><th align="center">e2</th><th align="center">e1||e2</th><th align="center">e1&amp;&amp;e2</th></tr></thead><tbody><tr><td align="center">非0</td><td align="center">非0</td><td align="center">1</td><td align="center">0</td></tr><tr><td align="center">非0</td><td align="center">0</td><td align="center">1</td><td align="center">0</td></tr><tr><td align="center">0</td><td align="center">非0</td><td align="center">1</td><td align="center">0</td></tr><tr><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td></tr></tbody></table><h2 id="JavaScript-类型运算符"><a href="#JavaScript-类型运算符" class="headerlink" title="JavaScript 类型运算符"></a>JavaScript 类型运算符</h2><table><thead><tr><th align="center">运算符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">typeof</td><td align="center">返回变量的类型。</td></tr><tr><td align="center">instanceof</td><td align="center">返回 true，如果对象是对象类型的实例。</td></tr></tbody></table><h2 id="JavaScript-位运算符"><a href="#JavaScript-位运算符" class="headerlink" title="JavaScript 位运算符"></a>JavaScript 位运算符</h2><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">例子</th><th align="center">等同于</th><th align="center">结果</th><th align="center">十进制</th></tr></thead><tbody><tr><td align="center">&amp;</td><td align="center">与</td><td align="center">5 &amp; 1</td><td align="center">0101 &amp; 0001</td><td align="center">0001</td><td align="center">1</td></tr><tr><td align="center">|</td><td align="center">或</td><td align="center">5 | 1</td><td align="center">0101 | 0001</td><td align="center">0101</td><td align="center">5</td></tr><tr><td align="center">~</td><td align="center">非</td><td align="center">~ 5</td><td align="center">~0101</td><td align="center">1010</td><td align="center">10</td></tr><tr><td align="center">^</td><td align="center">异或</td><td align="center">5 ^ 1</td><td align="center">0101 ^ 0001</td><td align="center">0100</td><td align="center">4</td></tr><tr><td align="center">&lt;&lt;</td><td align="center">零填充左位移</td><td align="center">5 &lt;&lt; 1</td><td align="center">0101 &lt;&lt; 1</td><td align="center">1010</td><td align="center">10</td></tr><tr><td align="center">&gt;&gt;</td><td align="center">有符号右位移</td><td align="center">5 &gt;&gt; 1</td><td align="center">0101 &gt;&gt; 1</td><td align="center">0010</td><td align="center">2</td></tr><tr><td align="center">&gt;&gt;&gt;</td><td align="center">零填充右位移</td><td align="center">5 &gt;&gt;&gt; 1</td><td align="center">0101 &gt;&gt;&gt; 1</td><td align="center">0010</td><td align="center">2</td></tr></tbody></table><p><em>上例使用 4 位无符号的例子。但是 JavaScript 使用 32 位有符号数。</em></p><p><em>因此，在 JavaScript 中，~ 5 不会返回 10，而是返回 -6。</em></p><p><em>~00000000000000000000000000000101 将返回 11111111111111111111111111111010。</em></p><h1 id="JavaScript-数字"><a href="#JavaScript-数字" class="headerlink" title="JavaScript 数字"></a>JavaScript 数字</h1><p><strong>JavaScript 只有一种数值类型。</strong></p><p><strong>书写数值时带不带小数点均可。</strong></p><h2 id="JavaScript-数值始终是-64-位的浮点数"><a href="#JavaScript-数值始终是-64-位的浮点数" class="headerlink" title="JavaScript 数值始终是 64 位的浮点数"></a>JavaScript 数值始终是 64 位的浮点数</h2><p>与许多其他编程语言不同，JavaScript 不会定义不同类型的数，比如整数、短的、长的、浮点的等等。</p><p>JavaScript 数值始终以双精度浮点数来存储，根据国际 IEEE 754 标准。</p><p>此格式用 64 位存储数值，其中 0 到 51 存储数字（片段），52 到 62 存储指数，63 位存储符号：</p><table><thead><tr><th align="center">值(aka Fraction/Mantissa)</th><th align="center">指数</th><th align="center">符号</th></tr></thead><tbody><tr><td align="center">52 bits(0 - 51)</td><td align="center">11 bits (52 - 62)</td><td align="center">1 bit (63)</td></tr></tbody></table><h2 id="数字和字符串相加"><a href="#数字和字符串相加" class="headerlink" title="数字和字符串相加"></a>数字和字符串相加</h2><h3 id="警告！！"><a href="#警告！！" class="headerlink" title="警告！！"></a>警告！！</h3><p>JavaScript 的加法和级联（concatenation）都使用 + 运算符。</p><p>数字用加法。字符串用级联。</p><p>如果您对两个数相加，结果将是一个数：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">var</span> z <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>           <span class="token comment">// z 将是 30（一个数）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="数字字符串"><a href="#数字字符串" class="headerlink" title="数字字符串"></a>数字字符串</h2><p>JavaScript 字符串可以拥有数字内容：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>         <span class="token comment">// x 是数字</span><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token string">"100"</span><span class="token punctuation">;</span>       <span class="token comment">// y 是字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="NaN-非数值（Not-a-Number）"><a href="#NaN-非数值（Not-a-Number）" class="headerlink" title="NaN - 非数值（Not a Number）"></a>NaN - 非数值（Not a Number）</h2><p>NaN 属于 JavaScript 保留词，<strong>指示某个数不是合法数</strong>。</p><p>尝试用一个非数字字符串进行除法会得到 NaN：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">/</span> <span class="token string">"Apple"</span><span class="token punctuation">;</span>  <span class="token comment">// x 将是 NaN（Not a Number）</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您可使用全局 JavaScript 函数 isNaN() 来确定某个值是否是数：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">/</span> <span class="token string">"Apple"</span><span class="token punctuation">;</span><span class="token function">isNaN</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// 返回 true，因为 x 不是数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>要小心 NaN。假如您在数学运算中使用了 NaN，则结果也将是 NaN：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">NaN</span><span class="token punctuation">;</span><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">var</span> z <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>         <span class="token comment">// z 将是 NaN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>结果也许是串连接：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">NaN</span><span class="token punctuation">;</span><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token string">"5"</span><span class="token punctuation">;</span><span class="token keyword">var</span> z <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>         <span class="token comment">// z 将是 NaN5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>NaN 是数，typeof NaN 返回 number：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">typeof</span> <span class="token number">NaN</span><span class="token punctuation">;</span>             <span class="token comment">// 返回 "number"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="十六进制"><a href="#十六进制" class="headerlink" title="十六进制"></a>十六进制</h2><p>JavaScript 会把前缀为 0x 的数值常量解释为十六进制。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">0xFF</span><span class="token punctuation">;</span>             <span class="token comment">// x 将是 255</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>绝不要用前导零写数字（比如 07）。</p><p>一些 JavaScript 版本会把带有前导零的数解释为八进制。</p><p>默认地，Javascript 把数显示为十进制小数。</p><p>但是您能够使用 toString() 方法把数输出为十六进制、八进制或二进制。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> myNumber <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>myNumber<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 返回 80</span>myNumber<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 返回 200</span>myNumber<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 返回 10000000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数值可以是对象"><a href="#数值可以是对象" class="headerlink" title="数值可以是对象"></a>数值可以是对象</h2><p>通常 JavaScript 数值是通过字面量创建的原始值：var x = 123</p><p>但是也可以通过关键词 new 定义为对象：var y = new Number(123)</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// typeof x 返回 number</span><span class="token comment">// typeof y 返回 object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请不要创建数值对象。这样会拖慢执行速度。</p><p>new 关键词使代码复杂化，并产生某些无法预料的结果：</p><p>当使用 == 相等运算符时，相等的数看上去相等：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>             <span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// (x == y) 为 true，因为 x 和 y 有相等的值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当使用 === 相等运算符后，相等的数变为不相等，因为 === 运算符需要类型和值同时相等。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>             <span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// (x === y) 为 false，因为 x 和 y 的类型不同</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>甚至更糟。对象无法进行对比：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// (x == y) 为 false，因为对象无法比较</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="JavaScript-类型转换"><a href="#JavaScript-类型转换" class="headerlink" title="JavaScript 类型转换"></a>JavaScript 类型转换</h1><ul><li>Number(string) 强制将string转换为数字型</li><li>parselnt(string)转为整数数值型</li><li>parseFloat(string)转为浮点数值型</li><li>js隐式转行（- * /）利用算术隐式转行为数值型</li></ul><p> String() 转换为字符串， Boolean() 转换为布尔值。</p><hr><h2 id="JavaScript-数据类型-1"><a href="#JavaScript-数据类型-1" class="headerlink" title="JavaScript 数据类型"></a>JavaScript 数据类型</h2><p>在 JavaScript 中有 6 种不同的数据类型：</p><ul><li>string</li><li>number</li><li>boolean</li><li>object</li><li>function</li><li>symbol</li></ul><p>3 种对象类型：</p><ul><li>Object</li><li>Date</li><li>Array</li></ul><p>2 个不包含任何值的数据类型：</p><ul><li>null</li><li>undefined</li></ul><hr><h2 id="typeof-操作符"><a href="#typeof-操作符" class="headerlink" title="typeof 操作符"></a>typeof 操作符</h2><p>你可以使用 <strong>typeof</strong> 操作符来查看 JavaScript 变量的数据类型。</p><p>typeof “John”                 // 返回 string<br>typeof 3.14                   // 返回 number<br>typeof NaN                    // 返回 number<br>typeof false                  // 返回 boolean<br>typeof [1,2,3,4]              // 返回 object<br>typeof {name:’John’, age:34}  // 返回 object<br>typeof new Date()             // 返回 object<br>typeof function () {}         // 返回 function<br>typeof myCar                  // 返回 undefined (如果 myCar 没有声明)<br>typeof null                   // 返回 object</p><p>尝试一下 »</p><p>请注意：</p><ul><li>NaN 的数据类型是 number</li><li>数组(Array)的数据类型是 object</li><li>日期(Date)的数据类型为 object</li><li>null 的数据类型是 object</li><li>未定义变量的数据类型为 undefined</li></ul><p>如果对象是 JavaScript Array 或 JavaScript Date ，我们就无法通过 <strong>typeof</strong> 来判断他们的类型，因为都是 返回 object。</p><hr><h2 id="constructor-属性"><a href="#constructor-属性" class="headerlink" title="constructor 属性"></a>constructor 属性</h2><p><strong>constructor</strong> 属性返回所有 JavaScript 变量的构造函数。</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>“John”.constructor                 // 返回函数 String()  { [native code] }<br>(3.14).constructor                 // 返回函数 Number()  { [native code] }<br>false.constructor                  // 返回函数 Boolean() { [native code] }<br>[1,2,3,4].constructor              // 返回函数 Array()   { [native code] }<br>{name:’John’, age:34}.constructor  // 返回函数 Object()  { [native code] }<br>new Date().constructor             // 返回函数 Date()    { [native code] }<br>function () {}.constructor         // 返回函数 Function(){ [native code] }</p><p>你可以使用 constructor 属性来查看对象是否为数组 (包含字符串 “Array”):</p><p>function isArray(myArray) {<br>    return myArray.constructor.toString().indexOf(“Array”) &gt; -1;<br>}</p><p>你可以使用 constructor 属性来查看对象是否为日期 (包含字符串 “Date”):</p><p>function isDate(myDate) {<br>    return myDate.constructor.toString().indexOf(“Date”) &gt; -1;<br>}</p><hr><h2 id="JavaScript-类型转换-1"><a href="#JavaScript-类型转换-1" class="headerlink" title="JavaScript 类型转换"></a>JavaScript 类型转换</h2><p>JavaScript 变量可以转换为新变量或其他数据类型：</p><ul><li>通过使用 JavaScript 函数</li><li>通过 JavaScript 自身自动转换</li></ul><hr><h1 id="定义字符串"><a href="#定义字符串" class="headerlink" title="定义字符串"></a>定义字符串</h1><p>通过 单引号、双引号、反引号</p><h2 id="转换数据"><a href="#转换数据" class="headerlink" title="转换数据"></a>转换数据</h2><h3 id="转换为字符串类型"><a href="#转换为字符串类型" class="headerlink" title="转换为字符串类型"></a>转换为字符串类型</h3><ol><li>其他数据类型如何转换为字符串类型？<ul><li>变量.toString()</li><li>String()强制转换</li><li>加号拼接字符串</li></ul></li></ol><p>补充：<br>隐式转换：悄咪咪的转换数据，是js解释器悄咪咪的帮我们去完成数据转换的操作，程序员不需要操心<br>显式转换：需要程序员编写代码完成转换</p><p>推荐使用隐式转换来转换数据</p><h3 id="转换为数字类型的parseInt和parseFloat"><a href="#转换为数字类型的parseInt和parseFloat" class="headerlink" title="转换为数字类型的parseInt和parseFloat"></a>转换为数字类型的parseInt和parseFloat</h3><ol><li>parseInt和parseFloat有什么区别？<ul><li>一个是将数据转换为整数</li><li>一个是将数据转换为小数</li></ul></li></ol><h3 id="转换为数字类型的其他方法"><a href="#转换为数字类型的其他方法" class="headerlink" title="转换为数字类型的其他方法"></a>转换为数字类型的其他方法</h3><ol><li>还有其他将数据转换为数字的方法，但是大家觉得哪一种比较适合你？<ul><li>用隐式转换最方便，如：var a = ‘1.23’;  var b = a - 0; var c = +a;</li></ul></li></ol><h3 id="计算年龄案例"><a href="#计算年龄案例" class="headerlink" title="计算年龄案例"></a>计算年龄案例</h3><ol><li>如何使用反引号字符串的形式替代字符串++的写法？<ul><li>alert(<code>您今年已经${age}岁了</code>)</li></ul></li></ol><p>练习3分钟，完成计算年龄案例</p><h3 id="简单加法器案例"><a href="#简单加法器案例" class="headerlink" title="简单加法器案例"></a>简单加法器案例</h3><ol><li><p>加法器能做出来，如果这个时候，要你把加减乘除的结果都算出来，怎么办？</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token operator">+</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入第一个数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> num2 <span class="token operator">=</span> <span class="token operator">+</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入第二个数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">var</span> jia <span class="token operator">=</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span><span class="token keyword">var</span> jian <span class="token operator">=</span> num1 <span class="token operator">-</span> num2<span class="token punctuation">;</span><span class="token keyword">var</span> chen <span class="token operator">=</span> num1 <span class="token operator">*</span> num2<span class="token punctuation">;</span><span class="token keyword">var</span> chu <span class="token operator">=</span> num1 <span class="token operator">/</span> num2<span class="token punctuation">;</span>   <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">加的结果是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>jia<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,减的结果是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>jian<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,乘的结果是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>chen<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,除的结果是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>chu<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="转换为布尔型"><a href="#转换为布尔型" class="headerlink" title="转换为布尔型"></a>转换为布尔型</h3><ol><li><p>如何将一个数据转换为布尔型呢？</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">bloolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//true or false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>最简单的做法  !!数据  就可以了</li></ul></li></ol><p>补充：<br>(代表空、否定的值)会被转换为false：0,’’,NaN,undefined,null</p><h2 id="将数字转换为字符串"><a href="#将数字转换为字符串" class="headerlink" title="将数字转换为字符串"></a>将数字转换为字符串</h2><p>全局方法 <strong>String()</strong> 可以将数字转换为字符串。</p><p>该方法可用于任何类型的数字，字母，变量，表达式：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">String</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>         <span class="token comment">// 将变量 x 转换为字符串并返回</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>       <span class="token comment">// 将数字 123 转换为字符串并返回</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">+</span> <span class="token number">23</span><span class="token punctuation">)</span>  <span class="token comment">// 将数字表达式转换为字符串并返回</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>尝试一下 »</p><p>Number 方法 <strong>toString()</strong> 也是有同样的效果。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">+</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>尝试一下 »</p><p>在 <a href="https://www.runoob.com/jsref/jsref-obj-number.html">Number 方法</a> 章节中，你可以找到更多数字转换为字符串的方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>toExponential()</td><td>把对象的值转换为指数计数法。</td></tr><tr><td>toFixed()</td><td>把数字转换为字符串，结果的小数点后有指定位数的数字。</td></tr><tr><td>toPrecision()</td><td>把数字格式化为指定的长度。</td></tr></tbody></table><hr><h2 id="将布尔值转换为字符串"><a href="#将布尔值转换为字符串" class="headerlink" title="将布尔值转换为字符串"></a>将布尔值转换为字符串</h2><p>全局方法 <strong>String()</strong> 可以将布尔值转换为字符串。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">String</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>        <span class="token comment">// 返回 "false"</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>         <span class="token comment">// 返回 "true"</span>Boolean 方法 <span class="token operator">**</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">**</span> 也有相同的效果。<span class="token boolean">false</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment">// 返回 "false"</span><span class="token boolean">true</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">// 返回 "true"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="将日期转换为字符串"><a href="#将日期转换为字符串" class="headerlink" title="将日期转换为字符串"></a>将日期转换为字符串</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 返回字符串。<span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">// 返回 Thu Jul 17 2014 15:38:19 GMT+0200 (W. Europe Daylight Time)</span>全局方法 <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 可以将日期对象转换为字符串。<span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment">// 返回 Thu Jul 17 2014 15:38:19 GMT+0200 (W. Europe Daylight Time)</span>Date 方法 <span class="token operator">**</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">**</span> 也有相同的效果。## obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>obj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// 返回 Thu Jul 17 2014 15:38:19 GMT+0200 (W. Europe Daylight Time)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <a href="https://www.runoob.com/jsref/jsref-obj-date.html">Date 方法</a> 章节中，你可以查看更多关于日期转换为字符串的函数：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>getDate()</td><td>从 Date 对象返回一个月中的某一天 (1 ~ 31)。</td></tr><tr><td>getDay()</td><td>从 Date 对象返回一周中的某一天 (0 ~ 6)。</td></tr><tr><td>getFullYear()</td><td>从 Date 对象以四位数字返回年份。</td></tr><tr><td>getHours()</td><td>返回 Date 对象的小时 (0 ~ 23)。</td></tr><tr><td>getMilliseconds()</td><td>返回 Date 对象的毫秒(0 ~ 999)。</td></tr><tr><td>getMinutes()</td><td>返回 Date 对象的分钟 (0 ~ 59)。</td></tr><tr><td>getMonth()</td><td>从 Date 对象返回月份 (0 ~ 11)。</td></tr><tr><td>getSeconds()</td><td>返回 Date 对象的秒数 (0 ~ 59)。</td></tr><tr><td>getTime()</td><td>返回 1970 年 1 月 1 日至今的毫秒数。</td></tr></tbody></table><hr><h2 id="将字符串转换为数字"><a href="#将字符串转换为数字" class="headerlink" title="将字符串转换为数字"></a>将字符串转换为数字</h2><p>全局方法 <strong>Number()</strong> 可以将字符串转换为数字。</p><p>字符串包含数字(如 “3.14”) 转换为数字 (如 3.14).</p><p>空字符串转换为 0。</p><p>其他的字符串会转换为 NaN (不是个数字)。</p><p>在 <a href="https://www.runoob.com/jsref/jsref-obj-number.html">Number 方法</a> 章节中，你可以查看到更多关于字符串转为数字的方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>parseFloat()</td><td>解析一个字符串，并返回一个浮点数。</td></tr><tr><td>parseInt()</td><td>解析一个字符串，并返回一个整数。</td></tr></tbody></table><hr><h2 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符 +"></a>一元运算符 +</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">**</span>Operator <span class="token operator">+</span><span class="token operator">**</span> 可用于将变量转换为数字：## <span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token string">"5"</span><span class="token punctuation">;</span>      <span class="token comment">// y 是一个字符串</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token operator">+</span> y<span class="token punctuation">;</span>      <span class="token comment">// x 是一个数字</span>尝试一下 »如果变量不能转换，它仍然会是一个数字，但值为 <span class="token function">NaN</span> <span class="token punctuation">(</span>不是一个数字<span class="token punctuation">)</span><span class="token operator">:</span>## <span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token string">"John"</span><span class="token punctuation">;</span>   <span class="token comment">// y 是一个字符串</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token operator">+</span> y<span class="token punctuation">;</span>      <span class="token comment">// x 是一个数字 (NaN)</span>尝试一下 »<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="逗号操作符"><a href="#逗号操作符" class="headerlink" title="逗号操作符"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Expressions_and_Operators#comma_operator">逗号操作符</a></h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Comma_Operator">逗号操作符</a>（<code>,</code>）对两个操作数进行求值并返回最终操作数的值。它常常用在 <code>for</code> 循环中，在每次循环时对多个变量进行更新。</p><p>例如，假如 <code>a</code> 是一个二维数组，每个维度各有10个元素，以下代码利用逗号操作符来同时改变两个变量的值。这段代码的功能是打印出该二维数组的对角线元素的值：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> x<span class="token punctuation">,</span> x<span class="token punctuation">,</span> x<span class="token punctuation">,</span> x<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> j<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">--</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a['</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">']['</span> <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token string">']= '</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Copy to Clipboard</p><h3 id="一元操作符"><a href="#一元操作符" class="headerlink" title="一元操作符"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Expressions_and_Operators#delete">一元操作符</a></h3><p>一元操作符仅对应一个操作数。</p><h4 id="delete"><a href="#delete" class="headerlink" title="delete"></a><code>delete</code></h4><p><code>delete</code>操作符，删除一个对象的属性或者一个数组中某一个键值。语法如下:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">delete</span> objectName<span class="token punctuation">.</span>property<span class="token punctuation">;</span><span class="token keyword">delete</span> objectName<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">delete</span> property<span class="token punctuation">;</span> <span class="token comment">// legal only within a with statement</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Copy to Clipboard</p><p><code>objectName</code>是一个对象名，<code>property</code> 是一个已经存在的属性，<code>index</code>是数组中的一个已经存在的键值的索引值。</p><p>第三行的形式只在<code>with</code>声明的状态下是合法的， 从对象中删除一个属性。</p><p>你能使用 <code>delete</code> 删除各种各样的隐式声明， 但是被<code>var</code>声明的除外。</p><p>如果 <code>delete</code> 操作成功，属性或者元素会变成 <code>undefined</code>。如果 <code>delete</code>可行会返回<code>true</code>，如果不成功返回<code>false</code>。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">x <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">43</span><span class="token punctuation">;</span>myobj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myobj<span class="token punctuation">.</span>h <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token comment">// create property h</span><span class="token keyword">delete</span> x<span class="token punctuation">;</span>       <span class="token comment">// returns true (can delete if declared implicitly)</span><span class="token keyword">delete</span> y<span class="token punctuation">;</span>       <span class="token comment">// returns false (cannot delete if declared with var)</span><span class="token keyword">delete</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">;</span> <span class="token comment">// returns false (cannot delete predefined properties)</span><span class="token keyword">delete</span> myobj<span class="token punctuation">.</span>h<span class="token punctuation">;</span> <span class="token comment">// returns true (can delete user-defined properties)</span><span class="token keyword">delete</span> myobj<span class="token punctuation">;</span>   <span class="token comment">// returns true (can delete if declared implicitly)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Copy to Clipboard</p><h5 id="删除数组元素"><a href="#删除数组元素" class="headerlink" title="删除数组元素"></a>删除数组元素</h5><p>删除数组中的元素时，数组的长度是不变的，例如删除<code>a[3]</code>, <code>a[4]</code>，<code>a[4]``和a[3]</code> 仍然存在变成了<code>undefined</code>。</p><p><code>delete</code> 删除数组中的一个元素，这个元素就不在数组中了。例如，<code>trees[3]</code>被删除，<code>trees[3]</code> 仍然可寻址并返回<code>undefined</code>。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> trees <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">"redwood"</span><span class="token punctuation">,</span> <span class="token string">"bay"</span><span class="token punctuation">,</span> <span class="token string">"cedar"</span><span class="token punctuation">,</span> <span class="token string">"oak"</span><span class="token punctuation">,</span> <span class="token string">"maple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">delete</span> trees<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token keyword">in</span> trees<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 不会被执行</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Copy to Clipboard</p><p>如果想让数组中存在一个元素但是是<code>undefined</code>值，使用<code>undefined</code>关键字而不是<code>delete</code>操作. 如下： <code>trees[3]分配一个undefined</code>,但是这个数组元素仍然存在:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> trees <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">"redwood"</span><span class="token punctuation">,</span> <span class="token string">"bay"</span><span class="token punctuation">,</span> <span class="token string">"cedar"</span><span class="token punctuation">,</span> <span class="token string">"oak"</span><span class="token punctuation">,</span> <span class="token string">"maple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>trees<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token keyword">in</span> trees<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// this gets executed（会被执行）</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="将布尔值转换为数字"><a href="#将布尔值转换为数字" class="headerlink" title="将布尔值转换为数字"></a>将布尔值转换为数字</h2><p>全局方法 <strong>Number()</strong> 可将布尔值转换为数字。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>     <span class="token comment">// 返回 0</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>      <span class="token comment">// 返回 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h2 id="将日期转换为数字"><a href="#将日期转换为数字" class="headerlink" title="将日期转换为数字"></a>将日期转换为数字</h2><p>全局方法 <strong>Number()</strong> 可将日期转换为数字。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Number</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>          <span class="token comment">// 返回 1404568027739</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>日期方法 <strong>getTime()</strong> 也有相同的效果。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">// 返回 1404568027739</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h2 id="自动转换类型"><a href="#自动转换类型" class="headerlink" title="自动转换类型"></a>自动转换类型</h2><p>当 JavaScript 尝试操作一个 “错误” 的数据类型时，会自动转换为 “正确” 的数据类型。</p><p>以下输出结果不是你所期望的：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">5</span> <span class="token operator">+</span> <span class="token keyword">null</span>    <span class="token comment">// 返回 5         null 转换为 0</span><span class="token string">"5"</span> <span class="token operator">+</span> <span class="token keyword">null</span>  <span class="token comment">// 返回"5null"   null 转换为 "null"</span><span class="token string">"5"</span> <span class="token operator">+</span> <span class="token number">1</span>     <span class="token comment">// 返回 "51"      1 转换为 "1" </span><span class="token string">"5"</span> <span class="token operator">-</span> <span class="token number">1</span>     <span class="token comment">// 返回 4         "5" 转换为 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="自动转换为字符串"><a href="#自动转换为字符串" class="headerlink" title="自动转换为字符串"></a>自动转换为字符串</h2><p>当你尝试输出一个对象或一个变量时 JavaScript 会自动调用变量的 toString() 方法：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> myVar<span class="token punctuation">;</span>myVar <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"Fjohn"</span><span class="token punctuation">}</span>  <span class="token comment">// toString 转换为 "[object Object]"</span>myVar <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>       <span class="token comment">// toString 转换为 "1,2,3,4"</span>myVar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">// toString 转换为 "Fri Jul 18 2014 09:08:55 GMT+0200"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数字和布尔值也经常相互转换：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">myVar <span class="token operator">=</span> <span class="token number">123</span>             <span class="token comment">// toString 转换为 "123"</span>myVar <span class="token operator">=</span> <span class="token boolean">true</span>            <span class="token comment">// toString 转换为 "true"</span>myVar <span class="token operator">=</span> <span class="token boolean">false</span>           <span class="token comment">// toString 转换为 "false"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>下表展示了使用不同的数值转换为数字(Number), 字符串(String), 布尔值(Boolean):</p><table><thead><tr><th align="center">原始值</th><th align="center">转换为数字</th><th align="center">转换为字符串</th><th align="center">转换为布尔值</th><th align="center">实例</th></tr></thead><tbody><tr><td align="center">false</td><td align="center">0</td><td align="center">“false”</td><td align="center">false</td><td align="center"></td></tr><tr><td align="center">true</td><td align="center">1</td><td align="center">“true”</td><td align="center">true</td><td align="center"><a href="https://www.runoob.com/try/try.php?filename=tryjs_type_convert_true">尝试一下 »</a></td></tr><tr><td align="center">0</td><td align="center">0</td><td align="center">“0”</td><td align="center">false</td><td align="center"><a href="https://www.runoob.com/try/try.php?filename=tryjs_type_convert_number_0">尝试一下 »</a></td></tr><tr><td align="center">1</td><td align="center">1</td><td align="center">“1”</td><td align="center">true</td><td align="center"><a href="https://www.runoob.com/try/try.php?filename=tryjs_type_convert_number_1">尝试一下 »</a></td></tr><tr><td align="center">“0”</td><td align="center">0</td><td align="center">“0”</td><td align="center">true</td><td align="center"><a href="https://www.runoob.com/try/try.php?filename=tryjs_type_convert_string_0">尝试一下 »</a></td></tr><tr><td align="center">“000”</td><td align="center">0</td><td align="center">“000”</td><td align="center">true</td><td align="center"><a href="https://www.runoob.com/try/try.php?filename=tryjs_type_convert_string_000">尝试一下 »</a></td></tr><tr><td align="center">“1”</td><td align="center">1</td><td align="center">“1”</td><td align="center">true</td><td align="center"><a href="https://www.runoob.com/try/try.php?filename=tryjs_type_convert_string_1">尝试一下 »</a></td></tr><tr><td align="center">NaN</td><td align="center">NaN</td><td align="center">“NaN”</td><td align="center">false</td><td align="center"><a href="https://www.runoob.com/try/try.php?filename=tryjs_type_convert_nan">尝试一下 »</a></td></tr><tr><td align="center">Infinity</td><td align="center">Infinity</td><td align="center">“Infinity”</td><td align="center">true</td><td align="center"><a href="https://www.runoob.com/try/try.php?filename=tryjs_type_convert_infinity">尝试一下 »</a></td></tr><tr><td align="center">-Infinity</td><td align="center">-Infinity</td><td align="center">“-Infinity”</td><td align="center">true</td><td align="center"><a href="https://www.runoob.com/try/try.php?filename=tryjs_type_convert_infinity_minus">尝试一下 »</a></td></tr><tr><td align="center">“”</td><td align="center">0</td><td align="center">“”</td><td align="center">false</td><td align="center"><a href="https://www.runoob.com/try/try.php?filename=tryjs_type_convert_string_empty">尝试一下 »</a></td></tr><tr><td align="center">“20”</td><td align="center">20</td><td align="center">“20”</td><td align="center">true</td><td align="center"><a href="https://www.runoob.com/try/try.php?filename=tryjs_type_convert_string_number">尝试一下 »</a></td></tr><tr><td align="center">“Runoob”</td><td align="center">NaN</td><td align="center">“Runoob”</td><td align="center">true</td><td align="center"><a href="https://www.runoob.com/try/try.php?filename=tryjs_type_convert_string_text">尝试一下 »</a></td></tr><tr><td align="center">[ ]</td><td align="center">0</td><td align="center">“”</td><td align="center">true</td><td align="center"><a href="https://www.runoob.com/try/try.php?filename=tryjs_type_convert_array_empty">尝试一下 »</a></td></tr><tr><td align="center">[20]</td><td align="center">20</td><td align="center">“20”</td><td align="center">true</td><td align="center"><a href="https://www.runoob.com/try/try.php?filename=tryjs_type_convert_array_one_number">尝试一下 »</a></td></tr><tr><td align="center">[10,20]</td><td align="center">NaN</td><td align="center">“10,20”</td><td align="center">true</td><td align="center"><a href="https://www.runoob.com/try/try.php?filename=tryjs_type_convert_array_two_numbers">尝试一下 »</a></td></tr><tr><td align="center">[“Runoob”]</td><td align="center">NaN</td><td align="center">“Runoob”</td><td align="center">true</td><td align="center"><a href="https://www.runoob.com/try/try.php?filename=tryjs_type_convert_array_one_string">尝试一下 »</a></td></tr><tr><td align="center">[“Runoob”,”Google”]</td><td align="center">NaN</td><td align="center">“Runoob,Google”</td><td align="center">true</td><td align="center"><a href="https://www.runoob.com/try/try.php?filename=tryjs_type_convert_array_two_strings">尝试一下 »</a></td></tr><tr><td align="center">function(){}</td><td align="center">NaN</td><td align="center">“function(){}”</td><td align="center">true</td><td align="center"><a href="https://www.runoob.com/try/try.php?filename=tryjs_type_convert_function">尝试一下 »</a></td></tr><tr><td align="center">{ }</td><td align="center">NaN</td><td align="center">“[object Object]”</td><td align="center">true</td><td align="center"><a href="https://www.runoob.com/try/try.php?filename=tryjs_type_convert_object">尝试一下 »</a></td></tr><tr><td align="center">null</td><td align="center">0</td><td align="center">“null”</td><td align="center">false</td><td align="center"><a href="https://www.runoob.com/try/try.php?filename=tryjs_type_convert_null">尝试一下 »</a></td></tr><tr><td align="center">undefined</td><td align="center">NaN</td><td align="center">“undefined”</td><td align="center">false</td><td align="center"><a href="https://www.runoob.com/try/try.php?filename=tryjs_type_convert_undefined">尝试一下 »</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS伪数组和数组的区别</title>
      <link href="/2019/03/157004.html"/>
      <url>/2019/03/157004.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="伪数组定义："><a href="#伪数组定义：" class="headerlink" title="伪数组定义："></a>伪数组定义：</h4><p>1、<strong>拥有length属性</strong>，其它属性（索引）为非负整数(对象中的索引会被当做字符串来处理，这里你可以当做是个非负整数串来理解)<br>2、<strong>不具有数组所具有的方法</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">《javascript权威指南》上给出了代码用来判断一个对象是否属于“类数组”。如下：<span class="token comment">// Determine if o is an array-like object.</span><span class="token comment">// Strings and functions have numeric length properties, but are</span><span class="token comment">// excluded by the typeof test. In client-side JavaScript, DOM text</span><span class="token comment">// nodes have a numeric length property, and may need to be excluded</span><span class="token comment">// with an additional o.nodeType != 3 test.</span><span class="token keyword">function</span> <span class="token function">isArrayLike</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">&amp;&amp;</span>                                <span class="token comment">// o is not null, undefined, etc.</span>            <span class="token keyword">typeof</span> o <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span>            <span class="token comment">// o is an object</span>            <span class="token function">isFinite</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>               <span class="token comment">// o.length is a finite number</span>            o<span class="token punctuation">.</span>length <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>                    <span class="token comment">// o.length is non-negative</span>            o<span class="token punctuation">.</span>length<span class="token operator">===</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>  <span class="token comment">// o.length is an integer</span>            o<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">4294967296</span><span class="token punctuation">)</span>              <span class="token comment">// o.length &lt; 2^32</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                        <span class="token comment">// Then o is array-like</span>    <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                       <span class="token comment">// Otherwise it is not</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="伪数组转为真数组"><a href="#伪数组转为真数组" class="headerlink" title="伪数组转为真数组:"></a>伪数组转为真数组:</h4><h3 id="1-遍历添加入一个空数组"><a href="#1-遍历添加入一个空数组" class="headerlink" title="1.遍历添加入一个空数组"></a>1.遍历添加入一个空数组</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrLike<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arrLike<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>比较简单易懂，但是步骤略显繁琐。</p><h3 id="2-利用数组的slice-方法-【推荐】"><a href="#2-利用数组的slice-方法-【推荐】" class="headerlink" title="2.利用数组的slice()方法 【推荐】"></a>2.利用数组的slice()方法 <strong>【推荐】</strong></h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arrLike<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>arrLike<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用<code>slice()</code>返回一个新的数组,用<code>call()</code>或<code>apply()</code>把他的作用环境指向伪数组。</p><p>注意这个返回的数组中，不会保留索引值以外的其他额外属性。<br>比如jQuery中<code>$()</code>获取的DOM伪数组，里面的context属性在被此方法转化之后就不会保留。</p><p>模拟一下<code>slice()</code>的内部实现</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Array<span class="token punctuation">.</span>prtotype<span class="token punctuation">.</span><span class="token function-variable function">slice</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">start<span class="token punctuation">,</span> end</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> start <span class="token operator">=</span> start <span class="token operator">|</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> end <span class="token operator">=</span> end <span class="token operator">|</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-修改原型指向"><a href="#3-修改原型指向" class="headerlink" title="3.修改原型指向"></a>3.修改原型指向</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">arrLike<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样arrLike就继承了Array.prototype中的方法，可以使用<code>push()</code>，<code>unshift()</code>等方法了，<code>length</code>值也会随之动态改变。<br>另外这种直接修改原型链的方法，还会保留下伪数组中的所有属性，包括不是索引值的属性。</p><h3 id="4-ES5-Array-from"><a href="#4-ES5-Array-from" class="headerlink" title="4.ES5:Array.from()"></a>4.ES5:Array.from()</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// expected output: Array ["f", "o", "o"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// expected output: Array [2, 4, 6]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-利用扩展运算符将伪数组转成真的数组"><a href="#5-利用扩展运算符将伪数组转成真的数组" class="headerlink" title="5.利用扩展运算符将伪数组转成真的数组"></a>5.利用扩展运算符将伪数组转成真的数组</h3><pre class="line-numbers language-none"><code class="language-none">/*利用扩展运算符将伪数组转成真数组*/  var oDivs= document.getElementsByTagName('div');  console.log(oDivs)  console.log( oDivs instanceof Array)  //判断是不是真数组  let arr =[...oDivs];  console.log(arr)  console.log(arr instanceof Array)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://segmentfault.com/a/1190000015285969">伪数组(ArrayLike)</a></p><p><a href="https://www.programminghunter.com/article/6096438679/">ES6扩展运算符转伪数组为真数组</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 类数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端内存泄漏和溢出</title>
      <link href="/2019/02/1559715.html"/>
      <url>/2019/02/1559715.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏:"></a>内存泄漏:</h3><ul><li>占用内存没有及时释放;</li><li>意外的全局变量;</li><li>没有及时清理计时器或回调函数;</li><li>闭包;</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> arr <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">[</span><span class="token number">1000000</span><span class="token punctuation">]</span>    <span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> fn2<span class="token punctuation">}</span><span class="token keyword">var</span> f <span class="token operator">=</span> fn1<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> f <span class="token operator">=</span><span class="token keyword">null</span> <span class="token comment">//解决办法手动释放 让内部函数成为垃圾回收对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="内存溢出"><a href="#内存溢出" class="headerlink" title="内存溢出:"></a>内存溢出:</h3><ul><li>程序运行出现的错误;</li><li>当程序需要内存但超过了剩余内存,就抛出了内存溢出的错误;</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">100000000</span><span class="token punctuation">)</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内存泄漏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是 BFC ?</title>
      <link href="/2019/01/2056154.html"/>
      <url>/2019/01/2056154.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="BFC-是什么"><a href="#BFC-是什么" class="headerlink" title="BFC 是什么"></a>BFC 是什么</h2><p>BFC(Block formatting contexts)，</p><p>块格式化上下文，它是文档中的一块渲染区域，有自己的一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用！</p><h2 id="下列方式会创建-触发-块格式化上下文："><a href="#下列方式会创建-触发-块格式化上下文：" class="headerlink" title="下列方式会创建(触发)块格式化上下文："></a>下列方式会创建(触发)<strong>块格式化上下文</strong>：</h2><ul><li>根元素（<code>&lt;html&gt;）</code></li><li>浮动元素（元素的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/float"><code>float</code></a> 不是 <code>none</code>）</li><li>绝对定位元素（元素的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/position"><code>position</code></a> 为 <code>absolute</code> 或 <code>fixed</code>）</li><li>行内块元素（元素的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/display"><code>display</code></a> 为 <code>inline-block</code>）</li><li>表格单元格（元素的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/display"><code>display</code></a> 为 <code>table-cell</code>，HTML表格单元格默认为该值）</li><li>表格标题（元素的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/display"><code>display</code></a> 为 <code>table-caption</code>，HTML表格标题默认为该值）</li><li>匿名表格单元格元素（元素的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/display"><code>display</code></a> 为 <code>table、``table-row</code>、 <code>table-row-group、``table-header-group、``table-footer-group</code>（分别是HTML table、row、tbody、thead、tfoot 的默认属性）或 <code>inline-table</code>）</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/overflow"><code>overflow</code></a> 计算值(Computed)不为 <code>visible</code> 的块元素</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/display"><code>display</code></a> 值为 <code>flow-root</code> 的元素</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/contain"><code>contain</code></a> 值为 <code>layout</code>、<code>content </code>或 paint 的元素</li><li>弹性元素（<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/display"><code>display</code></a> 为 <code>flex</code> 或 <code>inline-flex </code>元素的直接子元素）</li><li>网格元素（<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/display"><code>display</code></a> 为 <code>grid</code> 或 <code>inline-grid</code> 元素的直接子元素）</li><li>多列容器（元素的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/column-count"><code>column-count</code></a> 或 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/column-width"><code>column-width</code> (en-US)</a> 不为 <code>auto，包括 ``column-count</code> 为 <code>1</code>）</li><li><code>column-span</code> 为 <code>all</code> 的元素始终会创建一个新的BFC，即使该元素没有包裹在一个多列容器中（<a href="https://github.com/w3c/csswg-drafts/commit/a8634b96900279916bd6c505fda88dda71d8ec51">标准变更</a>，<a href="https://bugs.chromium.org/p/chromium/issues/detail?id=709362">Chrome bug</a>）。</li></ul><hr><h2 id="BFC-的特性"><a href="#BFC-的特性" class="headerlink" title="BFC 的特性"></a>BFC 的特性</h2><p>1、同一个 BFC 下上下外边距会合并</p><p>2、清除浮动（BFC 可以包含浮动的元素）</p><p>3、BFC 的区域不会与 float 的元素重叠</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://gitee.com/link?target=https://www.w3.org/TR/CSS2/visuren.html%23block-formatting">参考 W3C 文档</a></p><p><a href="https://gitee.com/link?target=https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context">参考 MDN 文档</a></p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BFC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 从入门到精通</title>
      <link href="/2017/03/1011430.html"/>
      <url>/2017/03/1011430.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="git是什么"><a href="#git是什么" class="headerlink" title="git是什么?"></a>git是什么?</h2><blockquote><p>Git是目前世界上最先进的分布式版本控制系统（没有之一）。</p><p>Git有什么特点？简单来说就是：高端大气上档次！  – 引用自廖雪峰的官网</p></blockquote><p>安装完git后</p><p>检查是否安装完成</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="进行全局配置"><a href="#进行全局配置" class="headerlink" title="进行全局配置"></a>进行全局配置</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> config --global user.name <span class="token string">"Your Name"</span>$ <span class="token function">git</span> config --global user.email <span class="token string">"email@example.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="与远程仓库握手"><a href="#与远程仓库握手" class="headerlink" title="与远程仓库握手"></a>与远程仓库握手</h3><p>我们通常需要在github或gitee去生成的钥匙</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"你的邮箱地址"</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> .ssh<span class="token function">cat</span> .<span class="token punctuation">\</span>id_rsa.pubcv 到github 或者gitee <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>要熟练理解 git 的 使用:就要有</p><h2 id="时间线的概念"><a href="#时间线的概念" class="headerlink" title="时间线的概念"></a>时间线的概念</h2><p>每一次commit 就是一个版本生成一个它的id</p><p><em><strong>git 分为3个区域:工作区、暂存区、版本控制区</strong></em></p><p>首先对需要跟踪的项目进行初始化</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> init <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会选择当前路径的所有文件 单个跟踪就直接输入对应文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时我们的文件会从当前的工作区跟踪到暂存区</p><p>当我们需要进行提交到版本控制区的时候</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> commit -m <span class="token string">"提交备注信息"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第一次推送时</p><pre class="line-numbers language-none"><code class="language-none">git remote add origin  git@gitee 用户名加项目仓库地址   //cv 你的项目仓库地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>推送并创建到你的master</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push -u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr> 一些常用的git指令重命名分支<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch -m oldname newname<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除远程分支</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch --delete origin oldname<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上传新分支到远程</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push origin newname<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把修改后的本地分支与远程分支关联</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch --set-upstream-to origin/newName<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拉取远程仓库且合并</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>l拉取本地不合并</p><pre class="line-numbers language-none"><code class="language-none">git fetch &lt;remote&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看状态</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> status    <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看官方手册</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token builtin class-name">help</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看提交日志</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看分支</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看本地和远程所有分支</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拉取远程的并切换到新分支</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout -b 新分支名 origin/远程分支名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>提一句: - b , 意思就是base 会议当前的分支未base,新建分支</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout remote/<span class="token punctuation">..</span>./<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看提交日志树</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log --graph --oneline<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看当前目录所有改动的内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">diff</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看一个文件的改动情况</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">diff</span> 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>撤销修改</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout -- 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从git缓存中删除而不是磁盘</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">rm</span> --cached 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>强制删除</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">rm</span> 文件名 -f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看完整的提交哈希码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log --graph --pretty<span class="token operator">=</span>oneline<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>管理 reflog 信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reflog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时我们通过查看到的信息配合回滚命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset --hard 版本号进行强制回滚<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看当前暂存区的文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> ls-files <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示暂存的条目的相关信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> ls-files -s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示删除了的文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> ls-files -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>撤销</strong>错误添加到<strong>暂存区</strong>的文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">rm</span> --cache 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除提交到暂存区的文件|文件夹</p><pre class="line-numbers language-none"><code class="language-none">git rm -r --cache 文件|文件夹名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr>**撤销所有**<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset HEAD -- <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>撤销特点目标</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset HEAD -- 文件或者文件夹名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将文件从缓存中删除</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">rm</span> -cached filepath <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="删除错误提交的commit有三个选项，–hard、–mixed、–soft"><a href="#删除错误提交的commit有三个选项，–hard、–mixed、–soft" class="headerlink" title="删除错误提交的commit有三个选项，–hard、–mixed、–soft"></a>删除错误提交的commit有三个选项，–hard、–mixed、–soft</h6><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">仅仅只是撤销已提交的版本库，不会修改暂存区和工作区<span class="token function">git</span> reset --soft 版本库ID  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//仅仅只是撤销已提交的版本库和暂存区，不会修改工作区<span class="token function">git</span> reset --mixed 版本库ID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//彻底将工作区、暂存区和版本库记录恢复到指定的版本库<span class="token function">git</span> reset --hard 版本库ID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>显示暂存区的目录树，其中第三个字段不是文件大小而是暂存区编号<br>若想针对暂存区的目录树使用git ls-tree命令，需要先将暂存区的目录树写入Git对象库，然后针对该目录树执行git ls-tree命令</p><blockquote><p>查看HEAD（版本库中当前提交）指向的目录树</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> ls-tree -l HEAD<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch 分支名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>切换分支</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout 分支名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建并立即切换到分支</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout -b 分支名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>合并分支</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> merge 分支名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em><strong>删除分支(合并后,谨慎使用)</strong></em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch -d 分支名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr>**删除远程源仓库**<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">rm</span> origin <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除远程分支</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push origin --delete 分支名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加远程源仓库**</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">add</span> origin 仓库地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>直接修改远程源仓库</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote set-url origin 仓库地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>将本地分支和远程分支合并关联</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push --set-upstream origin 新分支名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h1 id="git-Fork-项目的仓库同步更新上游"><a href="#git-Fork-项目的仓库同步更新上游" class="headerlink" title="git Fork 项目的仓库同步更新上游"></a>git Fork 项目的仓库同步更新上游</h1><p>git被称为搞基网,可能跟 fork me 有关联…此处应该有一张图</p><h3 id="在你clone-下来的-fork-别人-fork-后的地址-的本地仓库里-运行"><a href="#在你clone-下来的-fork-别人-fork-后的地址-的本地仓库里-运行" class="headerlink" title="在你clone 下来的 fork 别人(fork 后的地址) 的本地仓库里 运行:"></a>在你clone 下来的 fork 别人(fork 后的地址) 的本地仓库里 运行:</h3><p>第一步 验证远程分支</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你是第一次使用本操作,那么不出意外的话,你的源仓库 就是你 fork 过来的仓库</p><p>第二步 现在你要指定你的上游仓库,也就是原作者的仓库地址,去复制过来</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">add</span> upstream 原作者的仓库<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 第三步 进行验证</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在它有4行了.</p><p>第四步  拉取更新的 branches 和 commits</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> fetch upstream<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第五步 Checkout 本地分支</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第六步 合并</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> merge upstream/master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第七步 提交</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h4 id="谨慎使用"><a href="#谨慎使用" class="headerlink" title="谨慎使用"></a>谨慎使用</h4><p>删除暂存区中的文件</p><h3 id="同时删除暂存区与工作区中的文件"><a href="#同时删除暂存区与工作区中的文件" class="headerlink" title="同时删除暂存区与工作区中的文件!"></a>同时删除暂存区与工作区中的文件!</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">rm</span> -f 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="删除远程仓库"><a href="#删除远程仓库" class="headerlink" title="删除远程仓库"></a>删除远程仓库</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">rm</span> 远程仓库名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>初学者 不容易理清楚 remote、origin 以及时间线的概念,其实很好理解</p><p>remote 直译: 远程 </p><p>origin 直译: 源</p><p>时间线:类似黑客帝国 <a href="https://baike.baidu.com/item/%E5%AD%90%E5%BC%B9%E6%97%B6%E9%97%B4/2966162">子弹时间</a> 的实现原理</p><p>提一句</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull     // 等同 <span class="token function">git</span> fetch + <span class="token function">git</span> merge <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一句话:将远程的部分与本地进行合并</p><h2 id="推荐使用"><a href="#推荐使用" class="headerlink" title="推荐使用"></a>推荐使用</h2><p>创建 .gitignore <br>字面意思:git 忽略 ,git 会依赖此文件<em><strong>忽略文件匹配管理</strong></em></p><p>把他建在仓库根目录下</p><p>无需后缀名 ,可以直接用正则进行匹配</p><p>比如:我们推送远程,发给你的协调开发者时,无需或者不想发送某些文件的时候</p><pre class="line-numbers language-none"><code class="language-none">node_modules/                   //匹配所有node_modules目录以及目录下的所有目录以及文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可能遇到的问题</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> merge upstream/master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可能提示</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">error: Your <span class="token builtin class-name">local</span> changes to the following files would be overwritten by merge:        hr/src/views/employees/employees.vuePlease commit your changes or stash them before you merge.Aborting<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>解决办法:回滚</p><pre class="line-numbers language-none"><code class="language-none">git stashgit pull origin mastergit stash pop //此时，执行git stash pop，您将看到冲突的局部更改仍然存在,让你决定将进行什么操纵<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>回滚:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reflog   //查阅版本号<span class="token function">git</span> reset --hard 版本号<span class="token function">git</span> pull origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="git-blame-h"><a href="#git-blame-h" class="headerlink" title="git blame -h"></a>git blame -h</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">--incremental 在我们找到它们时显示责备条目，增量    -b 不显示边界提交的对象名称（默认值：关闭）    --root 不将根提交视为边界（默认值：关闭）    --show-stats 显示工作成本统计    --progress 强制进度报告    --score-debug 显示责备条目的输出分数    -f, --show-name 显示原始文件名（默认：自动）    -n, --show-number 显示原始行号（默认：关闭）    -p, --porcelain 以专为机器使用而设计的格式显示    --line-porcelain 显示带有每行提交信息的瓷器格式    -c 使用与 git-annotate 相同的输出模式（默认：关闭）    -t 显示原始时间戳（默认：关闭）    -l 显示长提交 SHA1（默认值：关闭）    -s 禁止作者姓名和时间戳（默认值：关闭）    -e, --show-email 显示作者电子邮件而不是姓名（默认值：关闭）    -w 忽略空格差异    --ignore-rev <span class="token operator">&lt;</span>rev<span class="token operator">&gt;</span> 责备时忽略 <span class="token operator">&lt;</span>rev<span class="token operator">&gt;</span>    --ignore-revs-file <span class="token operator">&lt;</span>文件<span class="token operator">&gt;</span>                          忽略来自 <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span> 的修订    --color-lines 对上一行的冗余元数据进行不同的着色    --color-by-age 颜色线按年龄    --最少花费额外的周期来找到更好的匹配    -S <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span> 使用来自 <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span> 的修订而不是调用 git-rev-list    --contents <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span> 使用 <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span> 的内容作为最终图像    -C<span class="token punctuation">[</span><span class="token operator">&lt;</span>score<span class="token operator">&gt;</span><span class="token punctuation">]</span> 查找文件内和文件间的行副本    -M<span class="token punctuation">[</span><span class="token operator">&lt;</span>score<span class="token operator">&gt;</span><span class="token punctuation">]</span> 查找文件内和文件间的行移动    -L <span class="token operator">&lt;</span>range<span class="token operator">&gt;</span> 只处理行范围 <span class="token operator">&lt;</span>start<span class="token operator">&gt;</span>,<span class="token operator">&lt;</span>end<span class="token operator">&gt;</span> 或 <span class="token keyword">function</span> :<span class="token operator">&lt;</span>funcname<span class="token operator">&gt;</span>    --abbrev<span class="token punctuation">[</span><span class="token operator">=</span><span class="token operator">&lt;</span>n<span class="token operator">&gt;</span><span class="token punctuation">]</span> 使用 <span class="token operator">&lt;</span>n<span class="token operator">&gt;</span> 位来显示对象名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
